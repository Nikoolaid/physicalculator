{"version":3,"file":"7d3f96adcd60ff11fe4b476b5cf07a7d4eeaa929-25d534fd48dc4d4dfaac.js","mappings":"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","sources":["webpack://physicalculator/./node_modules/classnames/index.js","webpack://physicalculator/./node_modules/nerdamer/Algebra.js","webpack://physicalculator/./node_modules/nerdamer/Calculus.js","webpack://physicalculator/./node_modules/nerdamer/Extra.js","webpack://physicalculator/./node_modules/nerdamer/Solve.js","webpack://physicalculator/./node_modules/nerdamer/all.js","webpack://physicalculator/./node_modules/core-js/internals/a-constructor.js","webpack://physicalculator/./node_modules/core-js/internals/advance-string-index.js","webpack://physicalculator/./node_modules/core-js/internals/correct-prototype-getter.js","webpack://physicalculator/./node_modules/core-js/internals/create-iter-result-object.js","webpack://physicalculator/./node_modules/core-js/internals/is-regexp.js","webpack://physicalculator/./node_modules/core-js/internals/iterator-create-constructor.js","webpack://physicalculator/./node_modules/core-js/internals/iterators-core.js","webpack://physicalculator/./node_modules/core-js/internals/iterators.js","webpack://physicalculator/./node_modules/core-js/internals/object-get-prototype-of.js","webpack://physicalculator/./node_modules/core-js/internals/regexp-exec-abstract.js","webpack://physicalculator/./node_modules/core-js/internals/regexp-exec.js","webpack://physicalculator/./node_modules/core-js/internals/regexp-flags.js","webpack://physicalculator/./node_modules/core-js/internals/regexp-get-flags.js","webpack://physicalculator/./node_modules/core-js/internals/regexp-sticky-helpers.js","webpack://physicalculator/./node_modules/core-js/internals/regexp-unsupported-dot-all.js","webpack://physicalculator/./node_modules/core-js/internals/regexp-unsupported-ncg.js","webpack://physicalculator/./node_modules/core-js/internals/set-to-string-tag.js","webpack://physicalculator/./node_modules/core-js/internals/species-constructor.js","webpack://physicalculator/./node_modules/core-js/internals/string-multibyte.js","webpack://physicalculator/./node_modules/core-js/internals/to-string.js","webpack://physicalculator/./node_modules/core-js/modules/es.string.match-all.js","webpack://physicalculator/./node_modules/core-js/modules/esnext.string.match-all.js","webpack://physicalculator/./src/components/Credits.js","webpack://physicalculator/./src/components/Container.js","webpack://physicalculator/./node_modules/equation-parser/dist/index.esm.js","webpack://physicalculator/./node_modules/equation-resolver/dist/index.esm.js","webpack://physicalculator/./node_modules/react-equation/dist/index.esm.js","webpack://physicalculator/./src/components/Equation.js","webpack://physicalculator/./src/components/Navbar.js"],"sourcesContent":["/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n\n/* global define */\n(function () {\n  'use strict';\n\n  var hasOwn = {}.hasOwnProperty;\n  var nativeCodeString = '[native code]';\n\n  function classNames() {\n    var classes = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      var arg = arguments[i];\n      if (!arg) continue;\n      var argType = typeof arg;\n\n      if (argType === 'string' || argType === 'number') {\n        classes.push(arg);\n      } else if (Array.isArray(arg)) {\n        if (arg.length) {\n          var inner = classNames.apply(null, arg);\n\n          if (inner) {\n            classes.push(inner);\n          }\n        }\n      } else if (argType === 'object') {\n        if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n          classes.push(arg.toString());\n          continue;\n        }\n\n        for (var key in arg) {\n          if (hasOwn.call(arg, key) && arg[key]) {\n            classes.push(key);\n          }\n        }\n      }\n    }\n\n    return classes.join(' ');\n  }\n\n  if (typeof module !== 'undefined' && module.exports) {\n    classNames.default = classNames;\n    module.exports = classNames;\n  } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n    // register as 'classnames', consistent with npm package name\n    define('classnames', [], function () {\n      return classNames;\n    });\n  } else {\n    window.classNames = classNames;\n  }\n})();","/*\r\n * Author : Martin Donk\r\n * Website : http://www.nerdamer.com\r\n * Email : martin.r.donk@gmail.com\r\n * License : MIT\r\n * Source : https://github.com/jiggzson/nerdamer\r\n */\n\n/* global module, Function */\nif (typeof module !== 'undefined') {\n  var nerdamer = require('./nerdamer.core.js');\n\n  require('./Calculus.js');\n}\n\n(function () {\n  \"use strict\";\n  /*shortcuts*/\n\n  var core = nerdamer.getCore(),\n      _ = core.PARSER,\n      N = core.groups.N,\n      P = core.groups.P,\n      S = core.groups.S,\n      EX = core.groups.EX,\n      FN = core.groups.FN,\n      PL = core.groups.PL,\n      CP = core.groups.CP,\n      CB = core.groups.CB,\n      keys = core.Utils.keys,\n      even = core.Utils.even,\n      variables = core.Utils.variables,\n      format = core.Utils.format,\n      round = core.Utils.round,\n      Frac = core.Frac,\n      isInt = core.Utils.isInt,\n      Symbol = core.Symbol,\n      CONST_HASH = core.Settings.CONST_HASH,\n      math = core.Utils.importFunctions(),\n      evaluate = core.Utils.evaluate; //*************** CLASSES ***************//\n\n  /**\r\n   * Converts a symbol into an equivalent polynomial arrays of \r\n   * the form [[coefficient_1, power_1],[coefficient_2, power_2], ... ]\r\n   * Univariate polymials only. \r\n   * @param {Symbol|Number} symbol\r\n   * @param {String} variable The variable name of the polynomial\r\n   * @param {int} order\r\n   */\n\n  function Polynomial(symbol, variable, order) {\n    if (core.Utils.isSymbol(symbol)) {\n      this.parse(symbol);\n      this.variable = this.variable || variable;\n    } else if (!isNaN(symbol)) {\n      order = order || 0;\n      if (variable === undefined) throw new core.exceptions.InvalidVariableNameError('Polynomial expects a variable name when creating using order');\n      this.coeffs = [];\n      this.coeffs[order] = symbol;\n      this.fill(symbol);\n    } else if (typeof symbol === 'string') {\n      this.parse(_.parse(symbol));\n    }\n  }\n  /**\r\n   * Creates a Polynomial given an array of coefficients\r\n   * @param {int[]} arr\r\n   * @param {String} variable\r\n   * @returns {Polynomial}\r\n   */\n\n\n  Polynomial.fromArray = function (arr, variable) {\n    if (typeof variable === 'undefined') throw new core.exceptions.InvalidVariableNameError('A variable name must be specified when creating polynomial from array');\n    var p = new Polynomial();\n    p.coeffs = arr;\n    p.variable = variable;\n    return p;\n  };\n\n  Polynomial.fit = function (c1, c2, n, base, p, variable) {\n    //after having looped through and mod 10 the number to get the matching factor\n    var terms = new Array(p + 1),\n        t = n - c2;\n    terms[0] = c2; //the constants is assumed to be correct\n    //constant for x^p is also assumed know so add\n\n    terms[p] = c1;\n    t -= c1 * Math.pow(base, p); //start fitting\n\n    for (var i = p - 1; i > 0; i--) {\n      var b = Math.pow(base, i),\n          //we want as many wholes as possible\n      q = t / b,\n          sign = Math.sign(q);\n      var c = sign * Math.floor(Math.abs(q));\n      t -= c * b;\n      terms[i] = c;\n    }\n\n    if (t !== 0) return null;\n\n    for (var i = 0; i < terms.length; i++) {\n      terms[i] = new Frac(terms[i]);\n    }\n\n    return Polynomial.fromArray(terms, variable);\n  };\n\n  Polynomial.prototype = {\n    /**\r\n     * Converts Symbol to Polynomial\r\n     * @param {Symbol} symbol\r\n     * @param {Array} c - a collector array\r\n     * @returns {Polynomial}\r\n     */\n    parse: function parse(symbol, c) {\n      this.variable = variables(symbol)[0];\n      if (!symbol.isPoly()) throw core.exceptions.NerdamerTypeError('Polynomial Expected! Received ' + core.Utils.text(symbol));\n      c = c || [];\n      if (!symbol.power.absEquals(1)) symbol = _.expand(symbol);\n\n      if (symbol.group === core.groups.N) {\n        c[0] = symbol.multiplier;\n      } else if (symbol.group === core.groups.S) {\n        c[symbol.power.toDecimal()] = symbol.multiplier;\n      } else {\n        for (var x in symbol.symbols) {\n          var sub = symbol.symbols[x],\n              p = sub.power;\n          if (core.Utils.isSymbol(p)) throw new core.exceptions.NerdamerTypeError('power cannot be a Symbol');\n          p = sub.group === N ? 0 : p.toDecimal();\n\n          if (sub.symbols) {\n            this.parse(sub, c);\n          } else {\n            c[p] = sub.multiplier;\n          }\n        }\n      }\n\n      this.coeffs = c;\n      this.fill();\n    },\n\n    /**\r\n     * Fills in the holes in a polynomial with zeroes\r\n     * @param {Number} x - The number to fill the holes with\r\n     */\n    fill: function fill(x) {\n      x = Number(x) || 0;\n      var l = this.coeffs.length;\n\n      for (var i = 0; i < l; i++) {\n        if (this.coeffs[i] === undefined) {\n          this.coeffs[i] = new Frac(x);\n        }\n      }\n\n      return this;\n    },\n\n    /**\r\n     * Removes higher order zeros or a specific coefficient\r\n     * @returns {Array}\r\n     */\n    trim: function trim() {\n      var l = this.coeffs.length;\n\n      while (l--) {\n        var c = this.coeffs[l];\n        var equalsZero = c.equals(0);\n\n        if (c && equalsZero) {\n          if (l === 0) break;\n          this.coeffs.pop();\n        } else break;\n      }\n\n      return this;\n    },\n\n    /*\r\n     * Returns polynomial mod p **currently fails**\r\n     * @param {Number} p\r\n     * @returns {Polynomial}\r\n     */\n    modP: function modP(p) {\n      var l = this.coeffs.length;\n\n      for (var i = 0; i < l; i++) {\n        var c = this.coeffs[i];\n\n        if (c < 0) {\n          //go borrow\n          var b; //a coefficient > 0\n\n          for (var j = i; j < l; j++) {\n            //starting from where we left off\n            if (this.coeffs[j] > 0) {\n              b = this.coeffs[j];\n              break;\n            }\n          }\n\n          if (b) {\n            //if such a coefficient exists\n            for (j; j > i; j--) {\n              //go down the line and adjust using p\n              this.coeffs[j] = this.coeffs[j].subtract(new Frac(1));\n              this.coeffs[j - 1] = this.coeffs[j - 1].add(new Frac(p));\n            }\n\n            c = this.coeffs[i]; //reset c\n          }\n        }\n\n        var d = c.mod(p);\n        var w = c.subtract(d).divide(p);\n\n        if (!w.equals(0)) {\n          var up_one = i + 1;\n          var next = this.coeffs[up_one] || new Frac(0);\n          next = next.add(w);\n          this.coeffs[up_one] = new Frac(next);\n          this.coeffs[i] = new Frac(d);\n        }\n      }\n\n      return this;\n    },\n\n    /**\r\n     * Adds together 2 polynomials\r\n     * @param {Polynomial} poly\r\n     */\n    add: function add(poly) {\n      var l = Math.max(this.coeffs.length, poly.coeffs.length);\n\n      for (var i = 0; i < l; i++) {\n        var a = this.coeffs[i] || new Frac(0),\n            b = poly.coeffs[i] || new Frac(0);\n        this.coeffs[i] = a.add(b);\n      }\n\n      return this;\n    },\n\n    /**\r\n     * Adds together 2 polynomials\r\n     * @param {Polynomial} poly\r\n     */\n    subtract: function subtract(poly) {\n      var l = Math.max(this.coeffs.length, poly.coeffs.length);\n\n      for (var i = 0; i < l; i++) {\n        var a = this.coeffs[i] || new Frac(0),\n            b = poly.coeffs[i] || new Frac(0);\n        this.coeffs[i] = a.subtract(b);\n      }\n\n      return this;\n    },\n    divide: function divide(poly) {\n      var variable = this.variable,\n          dividend = core.Utils.arrayClone(this.coeffs),\n          divisor = core.Utils.arrayClone(poly.coeffs),\n          n = dividend.length,\n          mp = divisor.length - 1,\n          quotient = []; //loop through the dividend\n\n      for (var i = 0; i < n; i++) {\n        var p = n - (i + 1); //get the difference of the powers\n\n        var d = p - mp; //get the quotient of the coefficients\n\n        var q = dividend[p].divide(divisor[mp]);\n        if (d < 0) break; //the divisor is not greater than the dividend\n        //place it in the quotient\n\n        quotient[d] = q;\n\n        for (var j = 0; j <= mp; j++) {\n          //reduce the dividend\n          dividend[j + d] = dividend[j + d].subtract(divisor[j].multiply(q));\n        }\n      } //clean up\n\n\n      var p1 = Polynomial.fromArray(dividend, variable || 'x').trim(),\n          //pass in x for safety\n      p2 = Polynomial.fromArray(quotient, variable || 'x');\n      return [p2, p1];\n    },\n    multiply: function multiply(poly) {\n      var l1 = this.coeffs.length,\n          l2 = poly.coeffs.length,\n          c = []; //array to be returned\n\n      for (var i = 0; i < l1; i++) {\n        var x1 = this.coeffs[i];\n\n        for (var j = 0; j < l2; j++) {\n          var k = i + j,\n              //add the powers together\n          x2 = poly.coeffs[j],\n              e = c[k] || new Frac(0); //get the existing term from the new array\n\n          c[k] = e.add(x1.multiply(x2)); //multiply the coefficients and add to new polynomial array\n        }\n      }\n\n      this.coeffs = c;\n      return this;\n    },\n\n    /**\r\n     * Checks if a polynomial is zero\r\n     * @returns {Boolean}\r\n     */\n    isZero: function isZero() {\n      var l = this.coeffs.length;\n\n      for (var i = 0; i < l; i++) {\n        var e = this.coeffs[i];\n        if (!e.equals(0)) return false;\n      }\n\n      return true;\n    },\n\n    /** \r\n     * Substitutes in a number n into the polynomial p(n)\r\n     * @param {Number} n\r\n     * @returns {Frac}\r\n     */\n    sub: function sub(n) {\n      var sum = new Frac(0),\n          l = this.coeffs.length;\n\n      for (var i = 0; i < l; i++) {\n        var t = this.coeffs[i];\n        if (!t.equals(0)) sum = sum.add(t.multiply(new Frac(Math.pow(n, i))));\n      }\n\n      return sum;\n    },\n\n    /**\r\n     * Returns a clone of the polynomial\r\n     * @returns {Polynomial}\r\n     */\n    clone: function clone() {\n      var p = new Polynomial();\n      p.coeffs = this.coeffs;\n      p.variable = this.variable;\n      return p;\n    },\n\n    /**\r\n     * Gets the degree of the polynomial\r\n     * @returns {Number}\r\n     */\n    deg: function deg() {\n      this.trim();\n      return this.coeffs.length - 1;\n    },\n\n    /**\r\n     * Returns a lead coefficient\r\n     * @returns {Frac}\r\n     */\n    lc: function lc() {\n      return this.coeffs[this.deg()].clone();\n    },\n\n    /**\r\n     * Converts polynomial into a monic polynomial\r\n     * @returns {Polynomial}\r\n     */\n    monic: function monic() {\n      var lc = this.lc(),\n          l = this.coeffs.length;\n\n      for (var i = 0; i < l; i++) {\n        this.coeffs[i] = this.coeffs[i].divide(lc);\n      }\n\n      return this;\n    },\n\n    /**\r\n     * Returns the GCD of two polynomials\r\n     * @param {Polynomial} poly\r\n     * @returns {Polynomial}\r\n     */\n    gcd: function gcd(poly) {\n      //get the maximum power of each\n      var mp1 = this.coeffs.length - 1,\n          mp2 = poly.coeffs.length - 1,\n          T; //swap so we always have the greater power first\n\n      if (mp1 < mp2) {\n        return poly.gcd(this);\n      }\n\n      var a = this;\n\n      while (!poly.isZero()) {\n        var t = poly.clone();\n        a = a.clone();\n        T = a.divide(t);\n        poly = T[1];\n        a = t;\n      }\n\n      var gcd = core.Math2.QGCD.apply(null, a.coeffs);\n\n      if (!gcd.equals(1)) {\n        var l = a.coeffs.length;\n\n        for (var i = 0; i < l; i++) {\n          a.coeffs[i] = a.coeffs[i].divide(gcd);\n        }\n      }\n\n      return a;\n    },\n\n    /**\r\n     * Differentiates the polynomial\r\n     * @returns {Polynomial}\r\n     */\n    diff: function diff() {\n      var new_array = [],\n          l = this.coeffs.length;\n\n      for (var i = 1; i < l; i++) {\n        new_array.push(this.coeffs[i].multiply(new Frac(i)));\n      }\n\n      this.coeffs = new_array;\n      return this;\n    },\n\n    /**\r\n     * Integrates the polynomial\r\n     * @returns {Polynomial} \r\n     */\n    integrate: function integrate() {\n      var new_array = [0],\n          l = this.coeffs.length;\n\n      for (var i = 0; i < l; i++) {\n        var c = new Frac(i + 1);\n        new_array[c] = this.coeffs[i].divide(c);\n      }\n\n      this.coeffs = new_array;\n      return this;\n    },\n\n    /**\r\n     * Returns the Greatest common factor of the polynomial\r\n     * @param {bool} toPolynomial - true if a polynomial is wanted\r\n     * @returns {Frac|Polynomial}\r\n     */\n    gcf: function gcf(toPolynomial) {\n      //get the first nozero coefficient and returns its power\n      var fnz = function fnz(a) {\n        for (var i = 0; i < a.length; i++) {\n          if (!a[i].equals(0)) return i;\n        }\n      },\n          ca = [];\n\n      for (var i = 0; i < this.coeffs.length; i++) {\n        var c = this.coeffs[i];\n        if (!c.equals(0) && ca.indexOf(c) === -1) ca.push(c);\n      }\n\n      var p = [core.Math2.QGCD.apply(undefined, ca), fnz(this.coeffs)].toDecimal();\n\n      if (toPolynomial) {\n        var parr = [];\n        parr[p[1] - 1] = p[0];\n        p = Polynomial.fromArray(parr, this.variable).fill();\n      }\n\n      return p;\n    },\n\n    /**\r\n     * Raises a polynomial P to a power p -> P^p. e.g. (x+1)^2\r\n     * @param {bool} incl_img - Include imaginary numbers \r\n     */\n    quad: function quad(incl_img) {\n      var roots = [];\n      if (this.coeffs.length > 3) throw new Error('Cannot calculate quadratic order of ' + (this.coeffs.length - 1));\n      if (this.coeffs.length === 0) throw new Error('Polynomial array has no terms');\n      var a = this.coeffs[2] || 0,\n          b = this.coeffs[1] || 0,\n          c = this.coeffs[0];\n      var dsc = b * b - 4 * a * c;\n      if (dsc < 0 && !incl_img) return roots;else {\n        roots[0] = (-b + Math.sqrt(dsc)) / (2 * a);\n        roots[1] = (-b - Math.sqrt(dsc)) / (2 * a);\n      }\n      return roots;\n    },\n\n    /**\r\n     * Makes polynomial square free\r\n     * @returns {Array}\r\n     */\n    squareFree: function squareFree() {\n      var a = this.clone(),\n          i = 1,\n          b = a.clone().diff(),\n          c = a.clone().gcd(b),\n          w = a.divide(c)[0];\n      var output = Polynomial.fromArray([new Frac(1)], a.variable);\n\n      while (!c.equalsNumber(1)) {\n        var y = w.gcd(c);\n        var z = w.divide(y)[0]; //one of the factors may have shown up since it's square but smaller than the \n        //one where finding\n\n        if (!z.equalsNumber(1) && i > 1) {\n          var t = z.clone();\n\n          for (var j = 1; j < i; j++) {\n            t.multiply(z.clone());\n          }\n\n          z = t;\n        }\n\n        output = output.multiply(z);\n        i++;\n        w = y;\n        c = c.divide(y)[0];\n      }\n\n      return [output, w, i];\n    },\n\n    /**\r\n     * Converts polynomial to Symbol\r\n     * @returns {Symbol}\r\n     */\n    toSymbol: function toSymbol() {\n      var l = this.coeffs.length,\n          variable = this.variable;\n      if (l === 0) return new core.Symbol(0);\n      var end = l - 1,\n          str = '';\n\n      for (var i = 0; i < l; i++) {\n        //place the plus sign for all but the last one\n        var plus = i === end ? '' : '+',\n            e = this.coeffs[i];\n        if (!e.equals(0)) str += e + '*' + variable + '^' + i + plus;\n      }\n\n      return _.parse(str);\n    },\n\n    /**\r\n     * Checks if polynomial is equal to a number\r\n     * @param {Number} x\r\n     * @returns {Boolean}\r\n     */\n    equalsNumber: function equalsNumber(x) {\n      this.trim();\n      return this.coeffs.length === 1 && this.coeffs[0].toDecimal() === String(x);\n    },\n    toString: function toString() {\n      return this.toSymbol().toString();\n    }\n  };\n  /**\r\n   * TODO\r\n   * ===================================================================================\r\n   * THIS METHOD HAS A NASTY HIDDEN BUG. IT HAS INCONSISTENT RETURN TYPES PRIMARILY DUE TO \r\n   * WRONG ASSUMPTIONS AT THE BEGINNING. THE ASSUMPTION WAS THAT COEFFS WERE ALWAYS GOING BE NUMBERS\r\n   * NOT TAKING INTO ACCOUNT THAT IMAGINARY NUMBERS. FIXING THIS BREAKS WAY TOO MANY TESTS \r\n   * AT THEM MOMENT WHICH I DON'T HAVE TO FIX\r\n   * ===================================================================================\r\n   * If the symbols is of group PL or CP it will return the multipliers of each symbol\r\n   * as these are polynomial coefficients. CB symbols are glued together by multiplication\r\n   * so the symbol multiplier carries the coefficients for all contained symbols.\r\n   * For S it just returns it's own multiplier. This function doesn't care if it's a polynomial or not\r\n   * @param {Array} c The coefficient array\r\n   * @param {boolean} with_order \r\n   * @return {Array}\r\n   */\n\n  Symbol.prototype.coeffs = function (c, with_order) {\n    if (with_order && !this.isPoly(true)) _.error('Polynomial expected when requesting coefficients with order');\n    c = c || [];\n    var s = this.clone().distributeMultiplier();\n\n    if (s.isComposite()) {\n      for (var x in s.symbols) {\n        var sub = s.symbols[x];\n\n        if (sub.isComposite()) {\n          sub.clone().distributeMultiplier().coeffs(c, with_order);\n        } else {\n          if (with_order) c[sub.isConstant() ? 0 : sub.power.toDecimal()] = sub.multiplier;else {\n            c.push(sub.multiplier);\n          }\n        }\n      }\n    } else {\n      if (with_order) c[s.isConstant(true) ? 0 : s.power.toDecimal()] = s.multiplier;else {\n        if (s.group === CB && s.isImaginary()) {\n          var m = new Symbol(s.multiplier);\n          s.each(function (x) {\n            //add the imaginary part\n            if (x.isConstant(true) || x.imaginary) m = _.multiply(m, x);\n          });\n          c.push(m);\n        } else c.push(s.multiplier);\n      }\n    } //fill the holes\n\n\n    if (with_order) {\n      for (var i = 0; i < c.length; i++) {\n        if (c[i] === undefined) c[i] = new Symbol(0);\n      }\n    }\n\n    return c;\n  };\n\n  Symbol.prototype.tBase = function (map) {\n    if (typeof map === 'undefined') throw new Error('Symbol.tBase requires a map object!');\n    var terms = [];\n    var symbols = this.collectSymbols(null, null, null, true),\n        l = symbols.length;\n\n    for (var i = 0; i < l; i++) {\n      var symbol = symbols[i],\n          g = symbol.group,\n          nterm = new MVTerm(symbol.multiplier, [], map);\n\n      if (g === CB) {\n        for (var x in symbol.symbols) {\n          var sym = symbol.symbols[x];\n          nterm.terms[map[x]] = sym.power;\n        }\n      } else {\n        nterm.terms[map[symbol.value]] = symbol.power;\n      }\n\n      terms.push(nterm.fill());\n      nterm.updateCount();\n    }\n\n    return terms;\n  };\n\n  Symbol.prototype.altVar = function (x) {\n    var m = this.multiplier.toString(),\n        p = this.power.toString();\n    return (m === '1' ? '' : m + '*') + x + (p === '1' ? '' : '^' + p);\n  };\n  /**\r\n   * Checks to see if the symbols contain the same variables\r\n   * @param {Symbol} symbol\r\n   * @returns {Boolean}\r\n   */\n\n\n  Symbol.prototype.sameVars = function (symbol) {\n    if (!(this.symbols || this.group === symbol.group)) return false;\n\n    for (var x in this.symbols) {\n      var a = this.symbols[x],\n          b = symbol.symbols[x];\n      if (!b) return false;\n      if (a.value !== b.value) return false;\n    }\n\n    return true;\n  };\n  /**\r\n   * Groups the terms in a symbol with respect to a variable\r\n   * For instance the symbol {a*b^2*x^2+a*b*x^2+x+6} returns [6,1,a*b+a*b^2]\r\n   * @returns {Factors}\r\n   */\n\n\n  Symbol.prototype.groupTerms = function (x) {\n    x = String(x);\n    var f, p, egrouped;\n    var grouped = [];\n    this.each(function (e) {\n      if (e.group === PL) {\n        egrouped = e.groupTerms(x);\n\n        for (var i = 0; i < egrouped.length; i++) {\n          var el = egrouped[i];\n          if (el) grouped[i] = el;\n        }\n      } else {\n        f = core.Utils.decompose_fn(e, x, true);\n        p = f.x.value === x ? Number(f.x.power) : 0; //check if there's an existing value\n\n        grouped[p] = _.add(grouped[p] || new Symbol(0), f.a);\n      }\n    });\n    return grouped;\n  };\n  /**\r\n   * Use this to collect Factors\r\n   * @returns {Symbol[]}\r\n   */\n\n\n  Symbol.prototype.collectFactors = function () {\n    var factors = [];\n    if (this.group === CB) this.each(function (x) {\n      factors.push(x.clone());\n    });else factors.push(this.clone());\n    return factors;\n  };\n  /**\r\n   * A container class for factors\r\n   * @returns {Factors}\r\n   */\n\n\n  function Factors() {\n    this.factors = {};\n    this.length = 0;\n  }\n\n  ;\n\n  Factors.prototype.getNumberSymbolics = function () {\n    var n = 0;\n    this.each(function (x) {\n      if (!x.isConstant(true)) n++;\n    });\n    return n;\n  };\n  /**\r\n   * Adds the factors to the factor object\r\n   * @param {Symbo} s\r\n   * @returns {Factors}\r\n   */\n\n\n  Factors.prototype.add = function (s) {\n    if (s.equals(0)) return this; //nothing to add\n    //we don't want to carry -1 as a factor. If a factor already exists,\n    //then add the minus one to that factor and return.\n\n    if (s.equals(-1) && this.length > 0) {\n      var fo = core.Utils.firstObject(this.factors, null, true);\n      this.add(_.symfunction(core.Settings.PARENTHESIS, [fo.obj]).negate());\n      delete this.factors[fo.key];\n      this.length--;\n      return this;\n    }\n\n    if (s.group === CB) {\n      var factors = this;\n      if (!s.multiplier.equals(1)) factors.add(new Symbol(s.multiplier));\n      s.each(function (x) {\n        factors.add(x);\n      });\n    } else {\n      if (this.preAdd) //if a preAdd function was defined call it to do prep\n        s = this.preAdd(s);\n      if (this.pFactor) //if the symbol isn't linear add back the power\n        s = _.pow(s, new Symbol(this.pFactor));\n      var is_constant = s.isConstant();\n      if (is_constant && s.equals(1)) return this; //don't add 1\n\n      var v = is_constant ? s.value : s.text();\n\n      if (v in this.factors) {\n        this.factors[v] = _.multiply(this.factors[v], s); //did the addition cancel out the existing factor? If so remove it and decrement the length\n\n        if (this.factors[v].equals(1)) {\n          delete this.factors[v];\n          this.length--;\n        }\n      } else {\n        this.factors[v] = s;\n        this.length++;\n      }\n    }\n\n    return this;\n  };\n  /**\r\n   * Converts the factor object to a Symbol\r\n   * @returns {Symbol}\r\n   */\n\n\n  Factors.prototype.toSymbol = function () {\n    var factored = new Symbol(1);\n    var factors = Object.values(this.factors).sort(function (a, b) {\n      return a.group > b.group;\n    });\n\n    for (var i = 0, l = factors.length; i < l; i++) {\n      var f = factors[i]; //don't wrap group S or FN\n\n      var factor = f.power.equals(1) && f.fname !== ''\n      /* don't wrap it twice */\n      ? _.symfunction(core.PARENTHESIS, [f]) : f;\n      factored = _.multiply(factored, factor);\n    }\n\n    if (factored.fname === '') factored = Symbol.unwrapPARENS(factored);\n    return factored;\n  };\n  /**\r\n   * Merges 2 factor objects into one\r\n   * @param {Factor} o\r\n   * @returns {Factors}\r\n   */\n\n\n  Factors.prototype.merge = function (o) {\n    for (var x in o) {\n      if (x in this.factors) this.factors[x] = _.multiply(this.factors[x], o[x]);else this.factors[x] = o[x];\n    }\n\n    return this;\n  };\n  /**\r\n   * The iterator for the factor object\r\n   * @param {Function} f - callback\r\n   * @returns {Factor}\r\n   */\n\n\n  Factors.prototype.each = function (f) {\n    for (var x in this.factors) {\n      var factor = this.factors[x];\n      if (factor.fname === core.PARENTHESIS && factor.isLinear()) factor = factor.args[0];\n      f.call(this, factor, x);\n    }\n\n    return this;\n  };\n  /**\r\n   * Return the number of factors contained in the factor object\r\n   * @returns {int}\r\n   */\n\n\n  Factors.prototype.count = function () {\n    return keys(this.factors).length;\n  };\n  /**\r\n   * Cleans up factors from -1\r\n   * @returns {undefined}\r\n   */\n\n\n  Factors.prototype.clean = function () {\n    try {\n      var h = core.Settings.CONST_HASH;\n\n      if (this.factors[h].lessThan(0)) {\n        if (this.factors[h].equals(-1)) delete this.factors[h];else this.factors[h].negate();\n        this.each(function (x) {\n          x.negate();\n        });\n      }\n    } catch (e) {}\n\n    ;\n  };\n\n  Factors.prototype.toString = function () {\n    return this.toSymbol().toString();\n  }; //a wrapper for performing multivariate division\n\n\n  function MVTerm(coeff, terms, map) {\n    this.terms = terms || [];\n    this.coeff = coeff;\n    this.map = map; //careful! all maps are the same object\n\n    this.sum = new core.Frac(0);\n    this.image = undefined;\n  }\n\n  ;\n\n  MVTerm.prototype.updateCount = function () {\n    this.count = this.count || 0;\n\n    for (var i = 0; i < this.terms.length; i++) {\n      if (!this.terms[i].equals(0)) this.count++;\n    }\n\n    return this;\n  };\n\n  MVTerm.prototype.getVars = function () {\n    var vars = [];\n\n    for (var i = 0; i < this.terms.length; i++) {\n      var term = this.terms[i],\n          rev_map = this.getRevMap();\n      if (!term.equals(0)) vars.push(this.rev_map[i]);\n    }\n\n    return vars.join(' ');\n  };\n\n  MVTerm.prototype.len = function () {\n    if (typeof this.count === 'undefined') {\n      this.updateCount();\n    }\n\n    return this.count;\n  };\n\n  MVTerm.prototype.toSymbol = function (rev_map) {\n    rev_map = rev_map || this.getRevMap();\n    var symbol = new Symbol(this.coeff);\n\n    for (var i = 0; i < this.terms.length; i++) {\n      var v = rev_map[i],\n          t = this.terms[i];\n      if (t.equals(0) || v === CONST_HASH) continue;\n      var mapped = new Symbol(v);\n      mapped.power = t;\n      symbol = _.multiply(symbol, mapped);\n    }\n\n    return symbol;\n  };\n\n  MVTerm.prototype.getRevMap = function () {\n    if (this.rev_map) return this.rev_map;\n    var o = {};\n\n    for (var x in this.map) {\n      o[this.map[x]] = x;\n    }\n\n    this.rev_map = o;\n    return o;\n  };\n\n  MVTerm.prototype.generateImage = function () {\n    this.image = this.terms.join(' ');\n    return this;\n  }, MVTerm.prototype.getImg = function () {\n    if (!this.image) this.generateImage();\n    return this.image;\n  }, MVTerm.prototype.fill = function () {\n    var l = this.map.length;\n\n    for (var i = 0; i < l; i++) {\n      if (typeof this.terms[i] === 'undefined') this.terms[i] = new core.Frac(0);else {\n        this.sum = this.sum.add(this.terms[i]);\n      }\n    }\n\n    return this;\n  };\n\n  MVTerm.prototype.divide = function (mvterm) {\n    var c = this.coeff.divide(mvterm.coeff),\n        l = this.terms.length,\n        new_mvterm = new MVTerm(c, [], this.map);\n\n    for (var i = 0; i < l; i++) {\n      new_mvterm.terms[i] = this.terms[i].subtract(mvterm.terms[i]);\n      new_mvterm.sum = new_mvterm.sum.add(new_mvterm.terms[i]);\n    }\n\n    return new_mvterm;\n  };\n\n  MVTerm.prototype.multiply = function (mvterm) {\n    var c = this.coeff.multiply(mvterm.coeff),\n        l = this.terms.length,\n        new_mvterm = new MVTerm(c, [], this.map);\n\n    for (var i = 0; i < l; i++) {\n      new_mvterm.terms[i] = this.terms[i].add(mvterm.terms[i]);\n      new_mvterm.sum = new_mvterm.sum.add(new_mvterm.terms[i]);\n    }\n\n    return new_mvterm;\n  };\n\n  MVTerm.prototype.isZero = function () {\n    return this.coeff.equals(0);\n  };\n\n  MVTerm.prototype.toString = function () {\n    return '{ coeff: ' + this.coeff.toString() + ', terms: [' + this.terms.join(',') + ']: sum: ' + this.sum.toString() + ', count: ' + this.count + '}';\n  };\n\n  core.Utils.toMapObj = function (arr) {\n    var c = 0,\n        o = {};\n\n    for (var i = 0; i < arr.length; i++) {\n      var v = arr[i];\n\n      if (typeof o[v] === 'undefined') {\n        o[v] = c;\n        c++;\n      }\n    }\n\n    o.length = c;\n    return o;\n  };\n\n  core.Utils.filledArray = function (v, n, clss) {\n    var a = [];\n\n    while (n--) {\n      a[n] = clss ? new clss(v) : v;\n    }\n\n    return a;\n  };\n\n  core.Utils.arrSum = function (arr) {\n    var sum = 0,\n        l = arr.length;\n\n    for (var i = 0; i < l; i++) {\n      sum += arr[i];\n    }\n\n    return sum;\n  };\n  /**\r\n   * Determines if 2 arrays have intersecting elements.\r\n   * @param {Array} a\r\n   * @param {Array} b\r\n   * @returns {Boolean} True if a and b have intersecting elements.\r\n   */\n\n\n  core.Utils.haveIntersection = function (a, b) {\n    var t;\n    if (b.length > a.length) t = b, b = a, a = t; // indexOf to loop over shorter\n\n    return a.some(function (e) {\n      return b.indexOf(e) > -1;\n    });\n  };\n  /**\r\n   * Substitutes out functions as variables so they can be used in regular algorithms\r\n   * @param {Symbol} symbol\r\n   * @param {Object} map\r\n   * @returns {String} The expression string\r\n   */\n\n\n  core.Utils.subFunctions = function (symbol, map) {\n    map = map || {};\n    var subbed = [];\n    symbol.each(function (x) {\n      if (x.group === FN || x.previousGroup === FN) {\n        //we need a new variable name so why not use one of the existing\n        var val = core.Utils.text(x, 'hash'),\n            tvar = map[val];\n\n        if (!tvar) {\n          //generate a unique enough name\n          var t = x.fname + keys(map).length;\n          map[val] = t;\n          subbed.push(x.altVar(t));\n        } else subbed.push(x.altVar(tvar));\n      } else if (x.group === CB || x.group === PL || x.group === CP) {\n        subbed.push(core.Utils.subFunctions(x, map));\n      } else subbed.push(x.text());\n    });\n    if (symbol.group === CP || symbol.group === PL) return symbol.altVar(core.Utils.inBrackets(subbed.join('+')));\n    ;\n    if (symbol.group === CB) return symbol.altVar(core.Utils.inBrackets(subbed.join('*')));\n    return symbol.text();\n  };\n\n  core.Utils.getFunctionsSubs = function (map) {\n    var subs = {}; //prepare substitutions\n\n    for (var x in map) {\n      subs[map[x]] = _.parse(x);\n    }\n\n    return subs;\n  };\n\n  var __ = core.Algebra = {\n    version: '1.4.6',\n    proots: function proots(symbol, decp) {\n      //the roots will be rounded up to 7 decimal places.\n      //if this causes trouble you can explicitly pass in a different number of places\n      //rarr for polynomial of power n is of format [n, coeff x^n, coeff x^(n-1), ..., coeff x^0]\n      decp = decp || 7;\n      var zeros = 0;\n      var known_roots = [];\n\n      var get_roots = function get_roots(rarr, powers, max) {\n        var roots = calcroots(rarr, powers, max).concat(known_roots);\n\n        for (var i = 0; i < zeros; i++) {\n          roots.unshift(0);\n        }\n\n        return roots;\n      };\n\n      if (symbol instanceof Symbol && symbol.isPoly()) {\n        symbol.distributeMultiplier(); //make it so the symbol has a constants as the lowest term\n\n        if (symbol.group === PL) {\n          var lowest_pow = core.Utils.arrayMin(keys(symbol.symbols));\n          var lowest_symbol = symbol.symbols[lowest_pow].clone().toUnitMultiplier();\n          symbol = _.expand(_.divide(symbol, lowest_symbol));\n          known_roots.push(0); //add zero since this is a known root\n        }\n\n        if (symbol.group === core.groups.S) {\n          return [0];\n        } else if (symbol.group === core.groups.PL) {\n          var powers = keys(symbol.symbols),\n              minpower = core.Utils.arrayMin(powers),\n              symbol = core.PARSER.divide(symbol, core.PARSER.parse(symbol.value + '^' + minpower));\n        }\n\n        var variable = keys(symbol.symbols).sort().pop(),\n            sym = symbol.group === core.groups.PL ? symbol.symbols : symbol.symbols[variable],\n            g = sym.group,\n            powers = g === S ? [sym.power.toDecimal()] : keys(sym.symbols),\n            rarr = [],\n            max = core.Utils.arrayMax(powers); //maximum power and degree of polynomial to be solved\n        // Prepare the data\n\n        for (var i = 1; i <= max; i++) {\n          var c = 0; //if there is no power then the hole must be filled with a zero\n\n          if (powers.indexOf(i + '') !== -1) {\n            if (g === S) {\n              c = sym.multiplier;\n            } else {\n              c = sym.symbols[i].multiplier;\n            }\n          } // Insert the coeffient but from the front\n\n\n          rarr.unshift(c);\n        }\n\n        rarr.push(symbol.symbols[CONST_HASH].multiplier);\n        if (sym.group === S) rarr[0] = sym.multiplier; //the symbol maybe of group CP with one variable\n\n        return get_roots(rarr, powers, max);\n      } else if (core.Utils.isArray(symbol)) {\n        var parr = symbol;\n        var rarr = [],\n            powers = [],\n            last_power = 0;\n\n        for (var i = 0; i < parr.length; i++) {\n          var coeff = parr[i][0],\n              pow = parr[i][1],\n              d = pow - last_power - 1; //insert the zeros\n\n          for (var j = 0; j < d; j++) {\n            rarr.unshift(0);\n          }\n\n          rarr.unshift(coeff);\n          if (pow !== 0) powers.push(pow);\n          last_power = pow;\n        }\n\n        var max = Math.max.apply(undefined, powers);\n        return get_roots(rarr, powers, max);\n      } else {\n        throw new core.exceptions.NerdamerTypeError('Cannot calculate roots. Symbol must be a polynomial!');\n      }\n\n      function calcroots(rarr, powers, max) {\n        var MAXDEGREE = 100; // Degree of largest polynomial accepted by this script.\n        // Make a clone of the coefficients before appending the max power\n\n        var p = rarr.slice(0); // Divide the string up into its individual entries, which--presumably--are separated by whitespace\n\n        rarr.unshift(max);\n\n        if (max > MAXDEGREE) {\n          throw new core.exceptions.ValueLimitExceededError(\"This utility accepts polynomials of degree up to \" + MAXDEGREE + \". \");\n        }\n\n        var zeroi = [],\n            // Vector of imaginary components of roots\n        degreePar = {}; // degreePar is a dummy variable for passing the parameter POLYDEGREE by reference\n\n        degreePar.Degree = max;\n\n        for (i = 0; i < max; i++) {\n          zeroi.push(0);\n        }\n\n        var zeror = zeroi.slice(0); // Vector of real components of roots\n        // Find the roots\n        //--> Begin Jenkins-Traub\n\n        /*\r\n         * A verbatim copy of Mr. David Binner's Jenkins-Traub port\r\n         */\n\n        function QuadSD_ak1(NN, u, v, p, q, iPar) {\n          // Divides p by the quadratic 1, u, v placing the quotient in q and the remainder in a, b\n          // iPar is a dummy variable for passing in the two parameters--a and b--by reference\n          q[0] = iPar.b = p[0];\n          q[1] = iPar.a = -(u * iPar.b) + p[1];\n\n          for (var i = 2; i < NN; i++) {\n            q[i] = -(u * iPar.a + v * iPar.b) + p[i];\n            iPar.b = iPar.a;\n            iPar.a = q[i];\n          }\n\n          return;\n        }\n\n        function calcSC_ak1(DBL_EPSILON, N, a, b, iPar, K, u, v, qk) {\n          // This routine calculates scalar quantities used to compute the next K polynomial and\n          // new estimates of the quadratic coefficients.\n          // calcSC -\tinteger variable set here indicating how the calculations are normalized\n          // to avoid overflow.\n          // iPar is a dummy variable for passing in the nine parameters--a1, a3, a7, c, d, e, f, g, and h --by reference\n          // sdPar is a dummy variable for passing the two parameters--c and d--into QuadSD_ak1 by reference\n          var sdPar = new Object(),\n              // TYPE = 3 indicates the quadratic is almost a factor of K\n          dumFlag = 3; // Synthetic division of K by the quadratic 1, u, v\n\n          sdPar.b = sdPar.a = 0.0;\n          QuadSD_ak1(N, u, v, K, qk, sdPar);\n          iPar.c = sdPar.a;\n          iPar.d = sdPar.b;\n\n          if (Math.abs(iPar.c) <= 100.0 * DBL_EPSILON * Math.abs(K[N - 1])) {\n            if (Math.abs(iPar.d) <= 100.0 * DBL_EPSILON * Math.abs(K[N - 2])) return dumFlag;\n          }\n\n          iPar.h = v * b;\n\n          if (Math.abs(iPar.d) >= Math.abs(iPar.c)) {\n            // TYPE = 2 indicates that all formulas are divided by d\n            dumFlag = 2;\n            iPar.e = a / iPar.d;\n            iPar.f = iPar.c / iPar.d;\n            iPar.g = u * b;\n            iPar.a3 = iPar.e * (iPar.g + a) + iPar.h * (b / iPar.d);\n            iPar.a1 = -a + iPar.f * b;\n            iPar.a7 = iPar.h + (iPar.f + u) * a;\n          } else {\n            // TYPE = 1 indicates that all formulas are divided by c;\n            dumFlag = 1;\n            iPar.e = a / iPar.c;\n            iPar.f = iPar.d / iPar.c;\n            iPar.g = iPar.e * u;\n            iPar.a3 = iPar.e * a + (iPar.g + iPar.h / iPar.c) * b;\n            iPar.a1 = -(a * (iPar.d / iPar.c)) + b;\n            iPar.a7 = iPar.g * iPar.d + iPar.h * iPar.f + a;\n          }\n\n          return dumFlag;\n        }\n\n        function nextK_ak1(DBL_EPSILON, N, tFlag, a, b, iPar, K, qk, qp) {\n          // Computes the next K polynomials using the scalars computed in calcSC_ak1\n          // iPar is a dummy variable for passing in three parameters--a1, a3, and a7\n          var temp;\n\n          if (tFlag == 3) {\n            // Use unscaled form of the recurrence\n            K[1] = K[0] = 0.0;\n\n            for (var i = 2; i < N; i++) {\n              K[i] = qk[i - 2];\n            }\n\n            return;\n          }\n\n          temp = tFlag == 1 ? b : a;\n\n          if (Math.abs(iPar.a1) > 10.0 * DBL_EPSILON * Math.abs(temp)) {\n            // Use scaled form of the recurrence\n            iPar.a7 /= iPar.a1;\n            iPar.a3 /= iPar.a1;\n            K[0] = qp[0];\n            K[1] = -(qp[0] * iPar.a7) + qp[1];\n\n            for (var i = 2; i < N; i++) {\n              K[i] = -(qp[i - 1] * iPar.a7) + qk[i - 2] * iPar.a3 + qp[i];\n            }\n          } else {\n            // If a1 is nearly zero, then use a special form of the recurrence\n            K[0] = 0.0;\n            K[1] = -(qp[0] * iPar.a7);\n\n            for (var i = 2; i < N; i++) {\n              K[i] = -(qp[i - 1] * iPar.a7) + qk[i - 2] * iPar.a3;\n            }\n          }\n\n          return;\n        }\n\n        function newest_ak1(tFlag, iPar, a, a1, a3, a7, b, c, d, f, g, h, u, v, K, N, p) {\n          // Compute new estimates of the quadratic coefficients using the scalars computed in calcSC_ak1\n          // iPar is a dummy variable for passing in the two parameters--uu and vv--by reference\n          // iPar.a = uu, iPar.b = vv\n          var a4, a5, b1, b2, c1, c2, c3, c4, temp;\n          iPar.b = iPar.a = 0.0; // The quadratic is zeroed\n\n          if (tFlag != 3) {\n            if (tFlag != 2) {\n              a4 = a + u * b + h * f;\n              a5 = c + (u + v * f) * d;\n            } else {\n              a4 = (a + g) * f + h;\n              a5 = (f + u) * c + v * d;\n            } // Evaluate new quadratic coefficients\n\n\n            b1 = -(K[N - 1] / p[N]);\n            b2 = -(K[N - 2] + b1 * p[N - 1]) / p[N];\n            c1 = v * b2 * a1;\n            c2 = b1 * a7;\n            c3 = b1 * b1 * a3;\n            c4 = -(c2 + c3) + c1;\n            temp = -c4 + a5 + b1 * a4;\n\n            if (temp != 0.0) {\n              iPar.a = -((u * (c3 + c2) + v * (b1 * a1 + b2 * a7)) / temp) + u;\n              iPar.b = v * (1.0 + c4 / temp);\n            }\n          }\n\n          return;\n        }\n\n        function Quad_ak1(a, b1, c, iPar) {\n          // Calculates the zeros of the quadratic a*Z^2 + b1*Z + c\n          // The quadratic formula, modified to avoid overflow, is used to find the larger zero if the\n          // zeros are real and both zeros are complex. The smaller real zero is found directly from\n          // the product of the zeros c/a.\n          // iPar is a dummy variable for passing in the four parameters--sr, si, lr, and li--by reference\n          var b, d, e;\n          iPar.sr = iPar.si = iPar.lr = iPar.li = 0.0;\n\n          if (a == 0) {\n            iPar.sr = b1 != 0 ? -(c / b1) : iPar.sr;\n            return;\n          }\n\n          if (c == 0) {\n            iPar.lr = -(b1 / a);\n            return;\n          } // Compute discriminant avoiding overflow\n\n\n          b = b1 / 2.0;\n\n          if (Math.abs(b) < Math.abs(c)) {\n            e = c >= 0 ? a : -a;\n            e = -e + b * (b / Math.abs(c));\n            d = Math.sqrt(Math.abs(e)) * Math.sqrt(Math.abs(c));\n          } else {\n            e = -(a / b * (c / b)) + 1.0;\n            d = Math.sqrt(Math.abs(e)) * Math.abs(b);\n          }\n\n          if (e >= 0) {\n            // Real zeros\n            d = b >= 0 ? -d : d;\n            iPar.lr = (-b + d) / a;\n            iPar.sr = iPar.lr != 0 ? c / iPar.lr / a : iPar.sr;\n          } else {\n            // Complex conjugate zeros\n            iPar.lr = iPar.sr = -(b / a);\n            iPar.si = Math.abs(d / a);\n            iPar.li = -iPar.si;\n          }\n\n          return;\n        }\n\n        function QuadIT_ak1(DBL_EPSILON, N, iPar, uu, vv, qp, NN, sdPar, p, qk, calcPar, K) {\n          // Variable-shift K-polynomial iteration for a quadratic factor converges only if the\n          // zeros are equimodular or nearly so.\n          // iPar is a dummy variable for passing in the five parameters--NZ, lzi, lzr, szi, and szr--by reference\n          // sdPar is a dummy variable for passing the two parameters--a and b--in by reference\n          // calcPar is a dummy variable for passing the nine parameters--a1, a3, a7, c, d, e, f, g, and h --in by reference\n          // qPar is a dummy variable for passing the four parameters--szr, szi, lzr, and lzi--into Quad_ak1 by reference\n          var qPar = new Object(),\n              ee,\n              mp,\n              omp,\n              relstp,\n              t,\n              u,\n              ui,\n              v,\n              vi,\n              zm,\n              i,\n              j = 0,\n              tFlag,\n              triedFlag = 0; // Integer variables\n\n          iPar.NZ = 0; // Number of zeros found\n\n          u = uu; // uu and vv are coefficients of the starting quadratic\n\n          v = vv;\n\n          do {\n            qPar.li = qPar.lr = qPar.si = qPar.sr = 0.0;\n            Quad_ak1(1.0, u, v, qPar);\n            iPar.szr = qPar.sr;\n            iPar.szi = qPar.si;\n            iPar.lzr = qPar.lr;\n            iPar.lzi = qPar.li; // Return if roots of the quadratic are real and not close to multiple or nearly\n            // equal and of opposite sign.\n\n            if (Math.abs(Math.abs(iPar.szr) - Math.abs(iPar.lzr)) > 0.01 * Math.abs(iPar.lzr)) break; // Evaluate polynomial by quadratic synthetic division\n\n            QuadSD_ak1(NN, u, v, p, qp, sdPar);\n            mp = Math.abs(-(iPar.szr * sdPar.b) + sdPar.a) + Math.abs(iPar.szi * sdPar.b); // Compute a rigorous bound on the rounding error in evaluating p\n\n            zm = Math.sqrt(Math.abs(v));\n            ee = 2.0 * Math.abs(qp[0]);\n            t = -(iPar.szr * sdPar.b);\n\n            for (i = 1; i < N; i++) {\n              ee = ee * zm + Math.abs(qp[i]);\n            }\n\n            ee = ee * zm + Math.abs(t + sdPar.a);\n            ee = (9.0 * ee + 2.0 * Math.abs(t) - 7.0 * (Math.abs(sdPar.a + t) + zm * Math.abs(sdPar.b))) * DBL_EPSILON; // Iteration has converged sufficiently if the polynomial value is less than 20 times this bound\n\n            if (mp <= 20.0 * ee) {\n              iPar.NZ = 2;\n              break;\n            }\n\n            j++; // Stop iteration after 20 steps\n\n            if (j > 20) break;\n\n            if (j >= 2) {\n              if (relstp <= 0.01 && mp >= omp && !triedFlag) {\n                // A cluster appears to be stalling the convergence. Five fixed shift\n                // steps are taken with a u, v close to the cluster.\n                relstp = relstp < DBL_EPSILON ? Math.sqrt(DBL_EPSILON) : Math.sqrt(relstp);\n                u -= u * relstp;\n                v += v * relstp;\n                QuadSD_ak1(NN, u, v, p, qp, sdPar);\n\n                for (i = 0; i < 5; i++) {\n                  tFlag = calcSC_ak1(DBL_EPSILON, N, sdPar.a, sdPar.b, calcPar, K, u, v, qk);\n                  nextK_ak1(DBL_EPSILON, N, tFlag, sdPar.a, sdPar.b, calcPar, K, qk, qp);\n                }\n\n                triedFlag = 1;\n                j = 0;\n              }\n            }\n\n            omp = mp; // Calculate next K polynomial and new u and v\n\n            tFlag = calcSC_ak1(DBL_EPSILON, N, sdPar.a, sdPar.b, calcPar, K, u, v, qk);\n            nextK_ak1(DBL_EPSILON, N, tFlag, sdPar.a, sdPar.b, calcPar, K, qk, qp);\n            tFlag = calcSC_ak1(DBL_EPSILON, N, sdPar.a, sdPar.b, calcPar, K, u, v, qk);\n            newest_ak1(tFlag, sdPar, sdPar.a, calcPar.a1, calcPar.a3, calcPar.a7, sdPar.b, calcPar.c, calcPar.d, calcPar.f, calcPar.g, calcPar.h, u, v, K, N, p);\n            ui = sdPar.a;\n            vi = sdPar.b; // If vi is zero, the iteration is not converging\n\n            if (vi != 0) {\n              relstp = Math.abs((-v + vi) / vi);\n              u = ui;\n              v = vi;\n            }\n          } while (vi != 0);\n\n          return;\n        }\n\n        function RealIT_ak1(DBL_EPSILON, iPar, sdPar, N, p, NN, qp, K, qk) {\n          // Variable-shift H-polynomial iteration for a real zero\n          // sss\t- starting iterate = sdPar.a\n          // NZ\t\t- number of zeros found = iPar.NZ\n          // dumFlag\t- flag to indicate a pair of zeros near real axis, returned to iFlag\n          var ee,\n              kv,\n              mp,\n              ms,\n              omp,\n              pv,\n              s,\n              t,\n              dumFlag,\n              i,\n              j,\n              nm1 = N - 1; // Integer variables\n\n          iPar.NZ = j = dumFlag = 0;\n          s = sdPar.a;\n\n          for (;;) {\n            pv = p[0]; // Evaluate p at s\n\n            qp[0] = pv;\n\n            for (i = 1; i < NN; i++) {\n              qp[i] = pv = pv * s + p[i];\n            }\n\n            mp = Math.abs(pv); // Compute a rigorous bound on the error in evaluating p\n\n            ms = Math.abs(s);\n            ee = 0.5 * Math.abs(qp[0]);\n\n            for (i = 1; i < NN; i++) {\n              ee = ee * ms + Math.abs(qp[i]);\n            } // Iteration has converged sufficiently if the polynomial value is less than\n            // 20 times this bound\n\n\n            if (mp <= 20.0 * DBL_EPSILON * (2.0 * ee - mp)) {\n              iPar.NZ = 1;\n              iPar.szr = s;\n              iPar.szi = 0.0;\n              break;\n            }\n\n            j++; // Stop iteration after 10 steps\n\n            if (j > 10) break;\n\n            if (j >= 2) {\n              if (Math.abs(t) <= 0.001 * Math.abs(-t + s) && mp > omp) {\n                // A cluster of zeros near the real axis has been encountered.\n                // Return with iFlag set to initiate a quadratic iteration.\n                dumFlag = 1;\n                iPar.a = s;\n                break;\n              } // End if ((fabs(t) <= 0.001*fabs(s - t)) && (mp > omp))\n\n            } //End if (j >= 2)\n            // Return if the polynomial value has increased significantly\n\n\n            omp = mp; // Compute t, the next polynomial and the new iterate\n\n            qk[0] = kv = K[0];\n\n            for (i = 1; i < N; i++) {\n              qk[i] = kv = kv * s + K[i];\n            }\n\n            if (Math.abs(kv) > Math.abs(K[nm1]) * 10.0 * DBL_EPSILON) {\n              // Use the scaled form of the recurrence if the value of K at s is non-zero\n              t = -(pv / kv);\n              K[0] = qp[0];\n\n              for (i = 1; i < N; i++) {\n                K[i] = t * qk[i - 1] + qp[i];\n              }\n            } else {\n              // Use unscaled form\n              K[0] = 0.0;\n\n              for (i = 1; i < N; i++) {\n                K[i] = qk[i - 1];\n              }\n            }\n\n            kv = K[0];\n\n            for (i = 1; i < N; i++) {\n              kv = kv * s + K[i];\n            }\n\n            t = Math.abs(kv) > Math.abs(K[nm1]) * 10.0 * DBL_EPSILON ? -(pv / kv) : 0.0;\n            s += t;\n          }\n\n          return dumFlag;\n        }\n\n        function Fxshfr_ak1(DBL_EPSILON, MDP1, L2, sr, v, K, N, p, NN, qp, u, iPar) {\n          // Computes up to L2 fixed shift K-polynomials, testing for convergence in the linear or\n          // quadratic case. Initiates one of the variable shift iterations and returns with the\n          // number of zeros found.\n          // L2\tlimit of fixed shift steps\n          // iPar is a dummy variable for passing in the five parameters--NZ, lzi, lzr, szi, and szr--by reference\n          // NZ\tnumber of zeros found\n          var sdPar = new Object(),\n              // sdPar is a dummy variable for passing the two parameters--a and b--into QuadSD_ak1 by reference\n          calcPar = new Object(),\n              // calcPar is a dummy variable for passing the nine parameters--a1, a3, a7, c, d, e, f, g, and h --into calcSC_ak1 by reference\n          qk = new Array(MDP1),\n              svk = new Array(MDP1),\n              a,\n              b,\n              betas,\n              betav,\n              oss,\n              ots,\n              otv,\n              ovv,\n              s,\n              ss,\n              ts,\n              tss,\n              tv,\n              tvv,\n              ui,\n              vi,\n              vv,\n              fflag,\n              i,\n              iFlag = 1,\n              j,\n              spass,\n              stry,\n              tFlag,\n              vpass,\n              vtry; // Integer variables\n\n          iPar.NZ = 0;\n          betav = betas = 0.25;\n          oss = sr;\n          ovv = v; //Evaluate polynomial by synthetic division\n\n          sdPar.b = sdPar.a = 0.0;\n          QuadSD_ak1(NN, u, v, p, qp, sdPar);\n          a = sdPar.a;\n          b = sdPar.b;\n          calcPar.h = calcPar.g = calcPar.f = calcPar.e = calcPar.d = calcPar.c = calcPar.a7 = calcPar.a3 = calcPar.a1 = 0.0;\n          tFlag = calcSC_ak1(DBL_EPSILON, N, a, b, calcPar, K, u, v, qk);\n\n          for (j = 0; j < L2; j++) {\n            fflag = 1; // Calculate next K polynomial and estimate v\n\n            nextK_ak1(DBL_EPSILON, N, tFlag, a, b, calcPar, K, qk, qp);\n            tFlag = calcSC_ak1(DBL_EPSILON, N, a, b, calcPar, K, u, v, qk); // Use sdPar for passing in uu and vv instead of defining a brand-new variable.\n            // sdPar.a = ui, sdPar.b = vi\n\n            newest_ak1(tFlag, sdPar, a, calcPar.a1, calcPar.a3, calcPar.a7, b, calcPar.c, calcPar.d, calcPar.f, calcPar.g, calcPar.h, u, v, K, N, p);\n            ui = sdPar.a;\n            vv = vi = sdPar.b; // Estimate s\n\n            ss = K[N - 1] != 0.0 ? -(p[N] / K[N - 1]) : 0.0;\n            ts = tv = 1.0;\n\n            if (j != 0 && tFlag != 3) {\n              // Compute relative measures of convergence of s and v sequences\n              tv = vv != 0.0 ? Math.abs((vv - ovv) / vv) : tv;\n              ts = ss != 0.0 ? Math.abs((ss - oss) / ss) : ts; // If decreasing, multiply the two most recent convergence measures\n\n              tvv = tv < otv ? tv * otv : 1.0;\n              tss = ts < ots ? ts * ots : 1.0; // Compare with convergence criteria\n\n              vpass = tvv < betav ? 1 : 0;\n              spass = tss < betas ? 1 : 0;\n\n              if (spass || vpass) {\n                // At least one sequence has passed the convergence test.\n                // Store variables before iterating\n                for (i = 0; i < N; i++) {\n                  svk[i] = K[i];\n                }\n\n                s = ss; // Choose iteration according to the fastest converging sequence\n\n                stry = vtry = 0;\n\n                for (;;) {\n                  if (fflag && (fflag = 0) == 0 && spass && (!vpass || tss < tvv)) {\n                    ; // Do nothing. Provides a quick \"short circuit\".\n                  } else {\n                    QuadIT_ak1(DBL_EPSILON, N, iPar, ui, vi, qp, NN, sdPar, p, qk, calcPar, K);\n                    a = sdPar.a;\n                    b = sdPar.b;\n                    if (iPar.NZ > 0) return; // Quadratic iteration has failed. Flag that it has been tried and decrease the\n                    // convergence criterion\n\n                    iFlag = vtry = 1;\n                    betav *= 0.25; // Try linear iteration if it has not been tried and the s sequence is converging\n\n                    if (stry || !spass) {\n                      iFlag = 0;\n                    } else {\n                      for (i = 0; i < N; i++) {\n                        K[i] = svk[i];\n                      }\n                    }\n                  } //fflag = 0;\n\n\n                  if (iFlag != 0) {\n                    // Use sdPar for passing in s instead of defining a brand-new variable.\n                    // sdPar.a = s\n                    sdPar.a = s;\n                    iFlag = RealIT_ak1(DBL_EPSILON, iPar, sdPar, N, p, NN, qp, K, qk);\n                    s = sdPar.a;\n                    if (iPar.NZ > 0) return; // Linear iteration has failed. Flag that it has been tried and decrease the\n                    // convergence criterion\n\n                    stry = 1;\n                    betas *= 0.25;\n\n                    if (iFlag != 0) {\n                      // If linear iteration signals an almost double real zero, attempt quadratic iteration\n                      ui = -(s + s);\n                      vi = s * s;\n                      continue;\n                    }\n                  } // Restore variables\n\n\n                  for (i = 0; i < N; i++) {\n                    K[i] = svk[i];\n                  } // Try quadratic iteration if it has not been tried and the v sequence is converging\n\n\n                  if (!vpass || vtry) break; // Break out of infinite for loop\n                } // Re-compute qp and scalar values to continue the second stage\n\n\n                QuadSD_ak1(NN, u, v, p, qp, sdPar);\n                a = sdPar.a;\n                b = sdPar.b;\n                tFlag = calcSC_ak1(DBL_EPSILON, N, a, b, calcPar, K, u, v, qk);\n              }\n            }\n\n            ovv = vv;\n            oss = ss;\n            otv = tv;\n            ots = ts;\n          }\n\n          return;\n        }\n\n        function rpSolve(degPar, p, zeror, zeroi) {\n          var N = degPar.Degree,\n              RADFAC = 3.14159265358979323846 / 180,\n              // Degrees-to-radians conversion factor = PI/180\n          LB2 = Math.LN2,\n              // Dummy variable to avoid re-calculating this value in loop below\n          MDP1 = degPar.Degree + 1,\n              K = new Array(MDP1),\n              pt = new Array(MDP1),\n              qp = new Array(MDP1),\n              temp = new Array(MDP1),\n              // qPar is a dummy variable for passing the four parameters--sr, si, lr, and li--by reference\n          qPar = new Object(),\n              // Fxshfr_Par is a dummy variable for passing parameters by reference : NZ, lzi, lzr, szi, szr);\n          Fxshfr_Par = new Object(),\n              bnd,\n              DBL_EPSILON,\n              df,\n              dx,\n              factor,\n              ff,\n              moduli_max,\n              moduli_min,\n              sc,\n              x,\n              xm,\n              aa,\n              bb,\n              cc,\n              sr,\n              t,\n              u,\n              xxx,\n              j,\n              jj,\n              l,\n              NM1,\n              NN,\n              zerok; // Integer variables\n          // Calculate the machine epsilon and store in the variable DBL_EPSILON.\n          // To calculate this value, just use existing variables rather than create new ones that will be used only for this code block\n\n          aa = 1.0;\n\n          do {\n            DBL_EPSILON = aa;\n            aa /= 2;\n            bb = 1.0 + aa;\n          } while (bb > 1.0);\n\n          var LO = Number.MIN_VALUE / DBL_EPSILON,\n              cosr = Math.cos(94.0 * RADFAC),\n              // = -0.069756474\n          sinr = Math.sin(94.0 * RADFAC),\n              // = 0.99756405\n          xx = Math.sqrt(0.5),\n              // = 0.70710678\n          yy = -xx;\n          Fxshfr_Par.NZ = j = 0;\n          Fxshfr_Par.szr = Fxshfr_Par.szi = Fxshfr_Par.lzr = Fxshfr_Par.lzi = 0.0; // Remove zeros at the origin, if any\n\n          while (p[N] == 0) {\n            zeror[j] = zeroi[j] = 0;\n            N--;\n            j++;\n          }\n\n          NN = N + 1; // >>>>> Begin Main Loop <<<<<\n\n          while (N >= 1) {\n            // Main loop\n            // Start the algorithm for one zero\n            if (N <= 2) {\n              // Calculate the final zero or pair of zeros\n              if (N < 2) {\n                zeror[degPar.Degree - 1] = -(p[1] / p[0]);\n                zeroi[degPar.Degree - 1] = 0;\n              } else {\n                qPar.li = qPar.lr = qPar.si = qPar.sr = 0.0;\n                Quad_ak1(p[0], p[1], p[2], qPar);\n                zeror[degPar.Degree - 2] = qPar.sr;\n                zeroi[degPar.Degree - 2] = qPar.si;\n                zeror[degPar.Degree - 1] = qPar.lr;\n                zeroi[degPar.Degree - 1] = qPar.li;\n              }\n\n              break;\n            } // Find the largest and smallest moduli of the coefficients\n\n\n            moduli_max = 0.0;\n            moduli_min = Number.MAX_VALUE;\n\n            for (i = 0; i < NN; i++) {\n              x = Math.abs(p[i]);\n              if (x > moduli_max) moduli_max = x;\n              if (x != 0 && x < moduli_min) moduli_min = x;\n            } // Scale if there are large or very small coefficients\n            // Computes a scale factor to multiply the coefficients of the polynomial. The scaling\n            // is done to avoid overflow and to avoid undetected underflow interfering with the\n            // convergence criterion.\n            // The factor is a power of the base.\n\n\n            sc = LO / moduli_min;\n\n            if (sc <= 1.0 && moduli_max >= 10 || sc > 1.0 && Number.MAX_VALUE / sc >= moduli_max) {\n              sc = sc == 0 ? Number.MIN_VALUE : sc;\n              l = Math.floor(Math.log(sc) / LB2 + 0.5);\n              factor = Math.pow(2.0, l);\n\n              if (factor != 1.0) {\n                for (i = 0; i < NN; i++) {\n                  p[i] *= factor;\n                }\n              }\n            } // Compute lower bound on moduli of zeros\n\n\n            for (var i = 0; i < NN; i++) {\n              pt[i] = Math.abs(p[i]);\n            }\n\n            pt[N] = -pt[N];\n            NM1 = N - 1; // Compute upper estimate of bound\n\n            x = Math.exp((Math.log(-pt[N]) - Math.log(pt[0])) / N);\n\n            if (pt[NM1] != 0) {\n              // If Newton step at the origin is better, use it\n              xm = -pt[N] / pt[NM1];\n              x = xm < x ? xm : x;\n            } // Chop the interval (0, x) until ff <= 0\n\n\n            xm = x;\n\n            do {\n              x = xm;\n              xm = 0.1 * x;\n              ff = pt[0];\n\n              for (var i = 1; i < NN; i++) {\n                ff = ff * xm + pt[i];\n              }\n            } while (ff > 0); // End do-while loop\n\n\n            dx = x; // Do Newton iteration until x converges to two decimal places\n\n            do {\n              df = ff = pt[0];\n\n              for (var i = 1; i < N; i++) {\n                ff = x * ff + pt[i];\n                df = x * df + ff;\n              } // End for i\n\n\n              ff = x * ff + pt[N];\n              dx = ff / df;\n              x -= dx;\n            } while (Math.abs(dx / x) > 0.005); // End do-while loop\n\n\n            bnd = x; // Compute the derivative as the initial K polynomial and do 5 steps with no shift\n\n            for (var i = 1; i < N; i++) {\n              K[i] = (N - i) * p[i] / N;\n            }\n\n            K[0] = p[0];\n            aa = p[N];\n            bb = p[NM1];\n            zerok = K[NM1] == 0 ? 1 : 0;\n\n            for (jj = 0; jj < 5; jj++) {\n              cc = K[NM1];\n\n              if (zerok) {\n                // Use unscaled form of recurrence\n                for (var i = 0; i < NM1; i++) {\n                  j = NM1 - i;\n                  K[j] = K[j - 1];\n                } // End for i\n\n\n                K[0] = 0;\n                zerok = K[NM1] == 0 ? 1 : 0;\n              } else {\n                // Used scaled form of recurrence if value of K at 0 is nonzero\n                t = -aa / cc;\n\n                for (var i = 0; i < NM1; i++) {\n                  j = NM1 - i;\n                  K[j] = t * K[j - 1] + p[j];\n                } // End for i\n\n\n                K[0] = p[0];\n                zerok = Math.abs(K[NM1]) <= Math.abs(bb) * DBL_EPSILON * 10.0 ? 1 : 0;\n              }\n            } // Save K for restarts with new shifts\n\n\n            for (var i = 0; i < N; i++) {\n              temp[i] = K[i];\n            } // Loop to select the quadratic corresponding to each new shift\n\n\n            for (jj = 1; jj <= 20; jj++) {\n              // Quadratic corresponds to a double shift to a non-real point and its\n              // complex conjugate. The point has modulus BND and amplitude rotated\n              // by 94 degrees from the previous shift.\n              xxx = -(sinr * yy) + cosr * xx;\n              yy = sinr * xx + cosr * yy;\n              xx = xxx;\n              sr = bnd * xx;\n              u = -(2.0 * sr); // Second stage calculation, fixed quadratic\n\n              Fxshfr_ak1(DBL_EPSILON, MDP1, 20 * jj, sr, bnd, K, N, p, NN, qp, u, Fxshfr_Par);\n\n              if (Fxshfr_Par.NZ != 0) {\n                // The second stage jumps directly to one of the third stage iterations and\n                // returns here if successful. Deflate the polynomial, store the zero or\n                // zeros, and return to the main algorithm.\n                j = degPar.Degree - N;\n                zeror[j] = Fxshfr_Par.szr;\n                zeroi[j] = Fxshfr_Par.szi;\n                NN = NN - Fxshfr_Par.NZ;\n                N = NN - 1;\n\n                for (var i = 0; i < NN; i++) {\n                  p[i] = qp[i];\n                }\n\n                if (Fxshfr_Par.NZ != 1) {\n                  zeror[j + 1] = Fxshfr_Par.lzr;\n                  zeroi[j + 1] = Fxshfr_Par.lzi;\n                }\n\n                break;\n              } else {\n                // If the iteration is unsuccessful, another quadratic is chosen after restoring K\n                for (var i = 0; i < N; i++) {\n                  K[i] = temp[i];\n                }\n              }\n            } // Return with failure if no convergence with 20 shifts\n\n\n            if (jj > 20) {\n              degPar.Degree -= N;\n              break;\n            }\n          } // >>>>> End Main Loop <<<<<\n\n\n          return;\n        } //--> End Jenkins-Traub\n\n\n        rpSolve(degreePar, p, zeror, zeroi);\n        var l = zeroi.length; //format the output\n\n        for (i = 0; i < l; i++) {\n          // We round the imaginary part to avoid having something crazy like 5.67e-16.\n          var img = round(zeroi[i], decp + 8),\n              real = round(zeror[i], decp + 8); // Did the rounding pay off? If the rounding did nothing more than chop off a few digits then no.\n          // If the rounding results in a a number at least 3 digits shorter we'll keep it else we'll keep \n          // the original otherwise the rounding was worth it.\n\n          real = decp - String(real).length > 2 ? real : zeror[i];\n          var sign = img < 0 ? '-' : ''; // Remove the zeroes\n\n          if (real === 0) {\n            real = '';\n          }\n\n          if (img === 0) {\n            img = '';\n          } // Remove 1 as the multiplier and discard imaginary part if there isn't one.\n\n\n          img = Math.abs(img) === 1 ? sign + 'i' : img ? img + '*i' : '';\n          var num = real && img ? real + '+' + img : real + img;\n          zeror[i] = num.replace(/\\+\\-/g, '-');\n        }\n\n        return zeror;\n      }\n    },\n    roots: function roots(symbol) {\n      if (symbol.isConstant(true, true)) {\n        return core.Utils.nroots(symbol);\n      }\n\n      var roots = __.proots(symbol).map(function (x) {\n        return _.parse(x);\n      });\n\n      return core.Vector.fromArray(roots);\n    },\n    froot: function froot(f, guess, dx) {\n      var newtonraph = function newtonraph(xn) {\n        var mesh = 1e-12,\n            // If the derivative was already provided then don't recalculate.\n        df = dx ? dx : core.Utils.build(core.Calculus.diff(f.clone())),\n            // If the function was passed in as a function then don't recalculate.\n        fn = f instanceof Function ? f : core.Utils.build(f),\n            max = 10000,\n            done = false,\n            safety = 0;\n\n        while (!done) {\n          var x = xn - fn(xn) / df(xn); //absolute values for both x & xn ensures that we indeed have the radius    \n\n          var r = Math.abs(x) - Math.abs(xn),\n              delta = Math.abs(r);\n          xn = x;\n          if (delta < mesh) done = true;else if (safety > max) {\n            xn = null;\n            done = true;\n          }\n          safety++;\n        }\n\n        return xn;\n      };\n\n      return newtonraph(Number(guess));\n    },\n    quad: function quad(a, b, c) {\n      var q = function q(a, b, c, sign) {\n        return _.parse('-(' + b + '+' + sign + '*sqrt((' + b + ')^2-4*(' + a + ')*(' + c + ')))/(2*' + a + ')');\n      };\n\n      return [q(a, b, c, 1), q(a, b, c, -1)];\n    },\n    sumProd: function sumProd(a, b) {\n      return __.quad(-b, a, -1).map(function (x) {\n        return x.invert();\n      });\n    },\n    coeffs: function coeffs(symbol, wrt, _coeffs) {\n      wrt = String(wrt);\n      symbol = _.expand(symbol);\n      _coeffs = _coeffs || [new Symbol(0)]; //we cannot get coeffs for group EX\n\n      if (symbol.group === EX && symbol.contains(wrt, true)) _.error('Unable to get coefficients using expression ' + symbol.toString());\n      var vars = variables(symbol);\n\n      if (vars.length === 1 && vars[0] === wrt && !symbol.isImaginary()) {\n        var a = new Polynomial(symbol).coeffs.map(function (x) {\n          return new Symbol(x);\n        });\n\n        for (var i = 0, l = a.length; i < l; i++) {\n          var coeff = a[i],\n              e = _coeffs[i];\n          if (e) coeff = _.add(e, coeff);\n          _coeffs[i] = coeff; //transfer it all over\n        }\n      } else {\n        if (!wrt) _.error('Polynomial contains more than one variable. Please specify which variable is to be used!'); //if the variable isn't part of this polynomial then we're looking at x^0\n\n        if (vars.indexOf(wrt) === -1) {\n          _coeffs[0] = _.add(symbol, _coeffs[0]);\n        } else {\n          _coeffs = _coeffs || [new Symbol(0)];\n\n          if (symbol.group === CB) {\n            var s = symbol.symbols[wrt];\n            if (!s) _.error('Expression is not a polynomial!');\n            var p = Number(s.power);\n            coeff = _.divide(symbol.clone(), s.clone());\n            if (coeff.contains(wrt, true) || p < 0 || !isInt(p)) _.error('Expression is not a polynomial!');\n            var e = _coeffs[p];\n            if (e) coeff = _.add(e, coeff);\n            _coeffs[p] = coeff;\n          } else if (symbol.group === CP) {\n            symbol.each(function (x) {\n              __.coeffs(x.clone(), wrt, _coeffs);\n            }, true);\n          }\n        }\n      } //fill holes\n\n\n      for (var i = 0, l = _coeffs.length; i < l; i++) {\n        if (typeof _coeffs[i] === 'undefined') _coeffs[i] = new Symbol(0);\n      }\n\n      return _coeffs;\n    },\n\n    /**\r\n     * Get's all the powers of a particular polynomial including the denominators. The denominators powers\r\n     * are returned as negative. All remaining polynomials are returned as zero order polynomials.\r\n     * for example polyPowers(x^2+1/x+y+t) will return [ '-1', 0, '2' ]\r\n     * @param {Symbol} e\r\n     * @param {String} for_variable\r\n     * @param {Array} powers\r\n     * @returns {Array} An array of the powers\r\n     */\n    //assumes you've already verified that it's a polynomial\n    polyPowers: function polyPowers(e, for_variable, powers) {\n      powers = powers || [];\n      var g = g = e.group;\n\n      if (g === PL && for_variable === e.value) {\n        powers = powers.concat(keys(e.symbols));\n      } else if (g === CP) {\n        for (var s in e.symbols) {\n          var symbol = e.symbols[s];\n          var g = symbol.group,\n              v = symbol.value;\n          if (g === S && for_variable === v) powers.push(symbol.power);else if (g === PL || g === CP) powers = __.polyPowers(symbol, for_variable, powers);else if (g === CB && symbol.contains(for_variable)) {\n            var t = symbol.symbols[for_variable];\n            if (t) powers.push(t.power);\n          } else if (g === N || for_variable !== v) powers.push(0);\n        }\n      } else if (g === CB && e.contains(for_variable)) {\n        powers.push(core.Utils.decompose_fn(e, for_variable, true).x.power);\n      }\n\n      return core.Utils.arrayUnique(powers).sort();\n    },\n    //The factor object\n    Factor: {\n      //splits the symbol in symbol and constant\n      split: function split(symbol) {\n        var c = new Symbol(1); //the constants part\n\n        var s = new Symbol(1); //the symbolic part\n\n        __.Factor.factor(symbol, new Factors()).each(function (x) {\n          var t = _.parse(x);\n\n          if (x.isConstant(true)) {\n            c = _.multiply(c, t);\n          } else {\n            s = _.multiply(s, t);\n          }\n        });\n\n        return [c, s];\n      },\n      mix: function mix(o, include_negatives) {\n        var factors = keys(o);\n        var l = factors.length;\n        var m = []; //create a row which we'r going to be mixing\n\n        for (var i = 0; i < l; i++) {\n          var factor = factors[i],\n              p = o[factor];\n          var ll = m.length;\n\n          for (var j = 0; j < ll; j++) {\n            var t = m[j] * factor;\n            m.push(t);\n            if (include_negatives) m.push(-t);\n          }\n\n          for (var j = 1; j <= p; j++) {\n            m.push(Math.pow(factor, j));\n          }\n        }\n\n        return m;\n      },\n      //TODO: this method is to replace common factoring\n      common: function common(symbol, factors) {\n        try {\n          if (symbol.group === CP) {\n            //this may have the unfortunate side effect of expanding and factoring again\n            //to only end up with the same result. \n            //TODO: try to avoid this\n            //collect the symbols and sort to have the longest first. Thinking is that the longest terms \n            //has to contain the variable in order for it to be factorable\n            var symbols = _.expand(symbol.clone(), true).collectSymbols(null, null, function (a, b) {\n              return (b.length || 1) - (a.length || 1);\n            });\n\n            var map = {}; //create a map of common factors\n\n            var coeffs = [];\n\n            for (var i = 0; i < symbols.length; i++) {\n              var sym = symbols[i];\n              coeffs.push(sym.multiplier.clone());\n              sym.each(function (x) {\n                var p = Number(x.power); //This check exits since we have a symbolic power.\n                //For the future... think about removing this check and modify for symbolic powers\n\n                if (isNaN(p)) throw new Error('exiting'); //loop through the symbols and lump together common terms\n\n                if (x.value in map) {\n                  if (p < map[x.value][0]) map[x.value][0] = p;\n                  map[x.value][1].push(x);\n                } else map[x.value] = [p, [x]];\n              });\n            } //the factor\n\n\n            var factor = new Symbol(1);\n\n            for (var x in map) {\n              //if this factor is found in all terms since the length of \n              //matching variable terms matches the number of original terms\n              if (map[x][1].length === symbols.length) {\n                //generate a symbol and multiply into the factor\n                factor = _.multiply(factor, _.pow(new Symbol(x), new Symbol(map[x][0])));\n              }\n            } //get coefficient factor\n\n\n            var c = core.Math2.QGCD.apply(null, coeffs);\n\n            if (!c.equals(1)) {\n              factors.add(new Symbol(c));\n\n              for (var i = 0; i < symbols.length; i++) {\n                symbols[i].multiplier = symbols[i].multiplier.divide(c);\n              }\n            } //if we actuall found any factors\n\n\n            if (!factor.equals(1)) {\n              factors.add(factor);\n              symbol = new Symbol(0);\n\n              for (var i = 0; i < symbols.length; i++) {\n                symbol = _.add(symbol, _.divide(symbols[i], factor.clone()));\n              }\n            }\n          }\n        } catch (e) {\n          ;\n        }\n\n        return symbol;\n      },\n      zeroes: function zeroes(symbol, factors) {\n        var exit = function exit() {\n          throw new core.exceptions.ValueLimitExceededError('Exiting');\n        };\n\n        try {\n          var vars, term, sum, p, e;\n          symbol = _.expand(symbol.clone());\n          e = symbol.toString();\n          vars = variables(symbol);\n          sum = new Symbol(0);\n          var terms = [];\n          var powers = []; //start setting each variable to zero\n\n          for (var i = 0, l = vars.length; i < vars.length; i++) {\n            var subs = {}; //we want to create a subs object with all but the current variable set to zero\n\n            for (var j = 0; j < l; j++) {\n              if (i !== j) //make sure we're not looking at the same variable\n                subs[vars[j]] = 0;\n            }\n\n            term = _.parse(e, subs);\n            var tp = term.power; //the temporary power has to be an integer as well\n\n            if (!isInt(tp)) exit();\n            terms.push(term);\n            powers.push(term.power);\n          } //get the gcd. This will be the p in (a^n+b^m)^p\n          //if the gcd equals 1 meaning n = m then we need a tie breakder\n\n\n          if (core.Utils.allSame(powers)) {\n            //get p given x number of terms\n            var n_terms = symbol.length; //the number of zeroes determines\n\n            var n_zeroes = terms.length;\n\n            if (n_zeroes === 2) {\n              p = new Frac(powers[0] / (n_terms - 1));\n            }\n\n            if (n_zeroes === 3) {\n              p = new Frac(powers[0] / Math.round((Math.sqrt(8 * n_terms - 1) - 3) / 2));\n            }\n            /*\r\n             //get the lowest possible power\r\n             //e.g. given b^4+2*a^2*b^2+a^4, the power we're looking for would be 2\r\n             symbol.each(function(x) {\r\n             if(x.group === CB)\r\n             x.each(function(y) {\r\n             if(!p || y.power.lessThan(p))\r\n             //p = Number(y.power);\r\n             p = y.power;\r\n             });\r\n             else if(!p || x.power.lessThan(p))\r\n             //p = Number(x.power);\r\n             p = x.power;\r\n             });\r\n             */\n\n          } else //p is just the gcd of the powers\n            p = core.Math2.QGCD.apply(null, powers); //if we don't have an integer then exit\n\n\n          if (!isInt(p)) exit(); //build the factor\n\n          for (var i = 0; i < terms.length; i++) {\n            var t = terms[i];\n            var n = t.power.clone().divide(p);\n            t.multiplier = new Frac(Math.pow(t.multiplier, 1 / n));\n            t.power = p.clone();\n            sum = _.add(sum, t);\n          } //by now we have the factor of zeroes. We'll know if we got it right because \n          //we'll get a remainder of zero each time we divide by it\n\n\n          if (sum.group !== CP) return symbol; //nothing to do\n\n          while (true) {\n            var d = __.div(symbol.clone(), sum.clone());\n\n            if (d[1].equals(0)) {\n              symbol = d[0];\n              factors.add(sum.clone());\n              if (symbol.equals(1)) //we've reached 1 so done.\n                break;\n            } else break;\n          }\n        } catch (e) {}\n\n        ;\n        return symbol;\n      },\n      factor: function factor(symbol, factors) {\n        // Don't try to factor constants\n        if (symbol.isConstant()) {\n          return core.Math2.factor(symbol);\n        }\n\n        var _symbol = _.parse(symbol);\n\n        var retval = __.Factor._factor(_symbol, factors);\n\n        if (retval.equals(symbol)) {\n          return retval;\n        }\n\n        if (retval.group === CB) {\n          var t = new Symbol(1);\n\n          var p = _.parse(retval.power); //store the multiplier and strip it\n\n\n          var m = _.parse(retval.multiplier);\n\n          retval.toUnitMultiplier();\n          /* \r\n           * NOTE: for sign issues with factor START DEBUGGING HERE\r\n           */\n          //move the sign to t\n\n          if (retval.multiplier.lessThan(0)) {\n            t.negate();\n            retval.negate();\n          }\n\n          retval.each(function (x) {\n            // Related to #566. Since the symbol's group may not have been properly\n            // updated, it's easier to just parse the symbol and have the parser \n            // do the update for us.\n            var factored = _.parse(__.Factor._factor(x));\n\n            if (factored.group === CB) {\n              // Include the multiplier\n              m = _.multiply(m, Symbol.create(factored.multiplier));\n              factored.each(function (y) {\n                var _factored = _.parse(__.Factor._factor(y));\n\n                t = _.multiply(t, _factored);\n\n                if (_factored.group === CB) {\n                  m = _.multiply(m, Symbol.create(_factored.multiplier));\n                }\n              });\n            } else {\n              t = _.multiply(t, factored);\n            }\n          }); //put back the multiplier and power\n\n          retval = _.pow(_.multiply(m, t), p);\n        }\n\n        return retval;\n      },\n      quadFactor: function quadFactor(symbol, factors) {\n        if (symbol.isPoly() && __.degree(symbol.equals(2))) {\n          //We've  already checked that we're dealing with a polynomial\n          var v = core.Utils.variables(symbol)[0]; //get the variable\n\n          var coeffs = __.coeffs(symbol, v); //factor the lead coefficient\n\n\n          var cf = __.Factor._factor(coeffs[2].clone()); //check if we have factors\n\n\n          if (cf.group === CB) {\n            var symbols = cf.collectSymbols(); //if the factors are greater than 2 we're done so exit\n\n            if (symbols.length > 2) return symbol; //if we have two factors then attempt to factor the polynomial\n            //let the factors be f1 and f1\n            //let the factors be (ax+b)(cx+d)\n            //let the coefficients be c1x^2+c2x+c3\n            //then a(x1)+c(x2)=c2 and x1*x2=c3\n            //we can solve for x1 and x2\n\n            var c = _.multiply(_.parse(coeffs[0]), _.parse(symbols[0]));\n\n            var b = _.parse(coeffs[1]).negate();\n\n            var a = _.parse(symbols[1]); //solve the system\n\n\n            var root = __.quad(a, b, c).filter(function (x) {\n              if (core.Utils.isInt(x)) return x;\n            }); //if we have one root then find the other one by dividing the constant\n\n\n            if (root.length === 1) {\n              var root1 = root[0];\n\n              var root2 = _.divide(coeffs[0], _.parse(root1));\n\n              if (core.Utils.isInt(root2)) {\n                //we found them both\n                factors.add(_.parse(format('({0})*({1})+({2})', symbols[1], v, root2)));\n                factors.add(_.parse(format('({0})*({1})+({2})', symbols[0], v, root1)));\n                symbol = new Symbol(1);\n              }\n            }\n          }\n        }\n\n        return symbol;\n      },\n      cubeFactor: function cubeFactor(symbol, factors) {\n        if (symbol.isComposite()) {\n          var symbols = symbol.collectSymbols(); // The symbol should be in the form of a^3+-b^3. The length\n          // should therefore only be two. If it's any different from this\n          // then we're done\n\n          if (symbols.length === 2) {\n            // Store the signs and then strip them from the symbols\n            var sign_a = symbols[0].sign();\n            var a = symbols[0].clone().abs();\n            var sign_b = symbols[1].sign();\n            var b = symbols[1].clone().abs(); // Check if they're cube\n\n            if (a.isCube() && b.isCube()) {\n              // Keep the negative sign on the right, meaning b is always negative.\n              if (sign_a < sign_b) {\n                // Swap the signs and then the values\n                var _ref = [sign_b, sign_a];\n                sign_a = _ref[0];\n                sign_b = _ref[1];\n                var _ref2 = [b, a];\n                a = _ref2[0];\n                b = _ref2[1];\n              } // Get teh roots\n\n\n              var m_root_a = _.parse(a.getNth(3));\n\n              var m_root_b = _.parse(b.getNth(3)); // Remove the cube for both\n\n\n              var x = _.multiply(_.expand(_.pow(a.clone().toUnitMultiplier(), _.parse('1/3'))), m_root_a);\n\n              var y = _.multiply(_.expand(_.pow(b.clone().toUnitMultiplier(), _.parse('1/3'))), m_root_b);\n\n              if (sign_a === 1 && sign_b === -1) {\n                // Apply difference of cubes rule\n                factors.add(_.parse(format('(({0})-({1}))', x, y)));\n                factors.add(_.parse(format('(({0})^2+({0})*({1})+({1})^2)', x, y)));\n                symbol = Symbol(1);\n              } else if (sign_a === 1 && sign_b === 1) {\n                // Apply sum of cubes rule\n                factors.add(_.parse(format('(({0})+({1}))', x, y)));\n                factors.add(_.parse(format('(({0})^2-({0})*({1})+({1})^2)', x, y)));\n                symbol = Symbol(1);\n              }\n            }\n          }\n        }\n\n        return symbol;\n      },\n      _factor: function _factor(symbol, factors) {\n        var g = symbol.group; //some items cannot be factored any further so return those right away\n\n        if (symbol.group === FN) {\n          var arg = symbol.args[0];\n\n          if (arg.group === S && arg.isSimple()) {\n            return symbol;\n          }\n        } else if (symbol.group === S && symbol.isSimple()) {\n          return symbol;\n        } // Expand the symbol to get it in a predictable form. If this step\n        // is skipped some factors are missed.\n        //if(symbol.group === CP && !(even(symbol.power) && symbol.multiplier.lessThan(0))) {\n\n\n        if (symbol.group === CP) {\n          symbol.distributeMultiplier(true);\n          var t = new Symbol(0);\n          symbol.each(function (x) {\n            if (x.group === CP && x.power.greaterThan(1) || x.group === CB) x = _.expand(x);\n            t = _.add(t, x);\n          });\n          t.power = symbol.power;\n          symbol = t;\n        }\n\n        if (symbol.group === FN && symbol.fname !== 'sqrt') {\n          symbol = core.Utils.evaluate(symbol);\n        } //make a copy of the symbol to return if something goes wrong\n\n\n        var untouched = symbol.clone();\n\n        try {\n          if (symbol.group === CB) {\n            var p = _.parse(symbol.power);\n\n            var den_array, num_array, den, num, dfact, nfact; //grab the denominator and strip the multiplier and power. Store them in an array\n\n            den_array = __.Simplify.strip(symbol.getDenom());\n            num_array = __.Simplify.strip(symbol.getNum());\n            den = den_array.pop();\n            num = num_array.pop(); //if the numerator equals the symbol then we've hit the simplest form and then we're done\n\n            if (num.equals(symbol)) {\n              return symbol;\n            }\n\n            nfact = __.Factor.factor(num);\n            dfact = __.Factor.factor(den);\n\n            var n = __.Simplify.unstrip(num_array, nfact);\n\n            var d = __.Simplify.unstrip(den_array, dfact);\n\n            var retval = _.divide(n, d);\n\n            return retval;\n          }\n\n          if (symbol.group === S) {\n            return symbol; //absolutely nothing to do\n          }\n\n          if (symbol.isConstant()) {\n            if (symbol.equals(1)) return symbol.clone();\n            var ret = core.Math2.factor(symbol);\n            return ret;\n          }\n\n          var p = symbol.power.clone();\n\n          if (isInt(p) && !(p.lessThan(0) && symbol.group === FN)) {\n            var sign = p.sign();\n            symbol.toLinear();\n            factors = factors || new Factors();\n            var map = {};\n            symbol = _.parse(core.Utils.subFunctions(symbol, map));\n\n            if (keys(map).length > 0) {\n              //it might have functions\n              factors.preAdd = function (factor) {\n                var ret = _.parse(factor, core.Utils.getFunctionsSubs(map));\n\n                return ret;\n              };\n            } //strip the power\n\n\n            if (!symbol.isLinear()) {\n              factors.pFactor = symbol.power.toString();\n              symbol.toLinear();\n            }\n\n            var vars = variables(symbol); //bypass for imaginary. TODO: find a better solution\n\n            if (symbol.isImaginary()) {\n              vars.push(core.Settings.IMAGINARY);\n            }\n\n            var multiVar = vars.length > 1; //minor optimization. Seems to cut factor time by half in some cases.\n\n            if (multiVar) {\n              var all_S = true,\n                  all_unit = true;\n              symbol.each(function (x) {\n                if (x.group !== S) all_S = false;\n                if (!x.multiplier.equals(1)) all_unit = false;\n              });\n\n              if (all_S && all_unit) {\n                return _.pow(_.parse(symbol, core.Utils.getFunctionsSubs(map)), _.parse(p));\n              }\n            } //factor the coefficients\n\n\n            var coeff_factors = new Factors();\n            symbol = __.Factor.coeffFactor(symbol, coeff_factors);\n            coeff_factors.each(function (x) {\n              // If the factor was negative but was within a square then it becomes positive\n              if (even(p) && x.lessThan(0)) {\n                x.negate();\n              }\n\n              if (sign < 0) x.invert();\n              factors.add(x);\n            }); //factor the power\n\n            var power_factors = new Factors();\n            symbol = __.Factor.powerFactor(symbol, power_factors);\n            power_factors.each(function (x) {\n              if (sign < 0) x.invert();\n              factors.add(x);\n            });\n\n            if (!multiVar) {\n              //pass in vars[0] for safety\n              var v = vars[0];\n              symbol = __.Factor.squareFree(symbol, factors, v);\n              var t_factors = new Factors();\n              symbol = __.Factor.trialAndError(symbol, t_factors, v); //generate a symbol based off the last factors\n\n              var tf_symbol = t_factors.toSymbol(); //if nothing was factored then return the factors\n\n              if (tf_symbol.equals(untouched)) {\n                return tf_symbol;\n              }\n\n              for (var x in t_factors.factors) {\n                //store the current factor in t_factor\n                var t_factor = t_factors.factors[x];\n                factors.add(_.pow(t_factor, _.parse(p)));\n              } //if we still don't have a factor and it's quadratic then let's just do a quad factor\n\n\n              if (symbol.equals(untouched)) {\n                symbol = __.Factor.quadFactor(symbol, factors);\n              }\n            } else {\n              // Try sum and difference of cubes\n              symbol = __.Factor.cubeFactor(symbol, factors);\n              symbol = __.Factor.mfactor(symbol, factors); //put back the sign of power\n\n              factors.each(function (x) {\n                if (sign < 0) x.power.negate();\n              });\n            } //last minute clean up\n\n\n            symbol = _.parse(symbol, core.Utils.getFunctionsSubs(map));\n            var addPower = factors.length === 1;\n            factors.add(_.pow(symbol, _.parse(p)));\n            var retval = factors.toSymbol(); // We may have only factored out the symbol itself so we end up with a factor of one \n            // where the power needs to be placed back\n            // e.g. factor((2*y+p)^2). Here we end up having a factor of 1 remaining and a p of 2.\n\n            if (addPower && symbol.equals(1) && retval.isLinear()) {\n              retval = _.pow(retval, _.parse(p));\n            }\n\n            return retval;\n          }\n\n          return symbol;\n        } catch (e) {\n          //no need to stop the show because something went wrong :). Just return the unfactored.\n          return untouched;\n        }\n      },\n      reduce: function reduce(symbol, factors) {\n        if (symbol.group === CP && symbol.length === 2) {\n          var symbols = symbol.collectSymbols().sort(function (a, b) {\n            return b.multiplier - a.multiplier;\n          });\n\n          if (symbols[0].power.equals(symbols[1].power)) {\n            //x^n-a^n\n            var n = _.parse(symbols[0].power),\n                a = symbols[0].clone().toLinear(),\n                b = symbols[1].clone().toLinear(); //apply rule: (a-b)*sum(a^(n-i)*b^(i-1),1,n)\n\n\n            factors.add(_.add(a.clone(), b.clone())); //flip the sign\n\n            b.negate(); //turn n into a number\n\n            var nn = Number(n); //the remainder\n\n            var result = new Symbol(0);\n\n            for (var i = 1; i <= nn; i++) {\n              var aa = _.pow(a.clone(), _.subtract(n.clone(), new Symbol(i))),\n                  bb = _.pow(b.clone(), _.subtract(new Symbol(i), new Symbol(1)));\n\n              result = _.add(result, _.multiply(aa, bb));\n            }\n\n            return result;\n          }\n        }\n\n        return symbol;\n      },\n\n      /**\r\n       * Makes Symbol square free\r\n       * @param {Symbol} symbol\r\n       * @param {Factors} factors\r\n       * @@param {String} variable The variable which is being factored \r\n       * @returns {[Symbol, Factor]}\r\n       */\n      squareFree: function squareFree(symbol, factors, variable) {\n        if (symbol.isConstant() || symbol.group === S) return symbol;\n        var poly = new Polynomial(symbol, variable);\n        var sqfr = poly.squareFree();\n        var p = sqfr[2]; //if we found a square then the p entry in the array will be non-unit\n\n        if (p !== 1) {\n          //make sure the remainder doesn't have factors\n          var t = sqfr[1].toSymbol();\n          t.power = t.power.multiply(new Frac(p)); //send the factor to be fatored to be sure it's completely factored\n\n          factors.add(__.Factor.factor(t));\n\n          var retval = __.Factor.squareFree(sqfr[0].toSymbol(), factors);\n\n          return retval;\n        }\n\n        return symbol;\n      },\n\n      /**\r\n       * Factors the powers such that the lowest power is a constant\r\n       * @param {Symbol} symbol\r\n       * @param {Factors} factors\r\n       * @returns {[Symbol, Factor]}\r\n       */\n      powerFactor: function powerFactor(symbol, factors) {\n        //only PL need apply\n        if (symbol.group !== PL || symbol.previousGroup === EX) return symbol;\n        var k = keys(symbol.symbols); //we expect only numeric powers so return all else\n\n        if (!core.Utils.allNumeric(k)) return symbol;\n        var d = core.Utils.arrayMin(k);\n        var retval = new Symbol(0);\n\n        var q = _.parse(symbol.value + '^' + d);\n\n        symbol.each(function (x) {\n          x = _.divide(x, q.clone());\n          retval = _.add(retval, x);\n        });\n        factors.add(q);\n        return retval;\n      },\n\n      /**\r\n       * Removes GCD from coefficients\r\n       * @param {Symbol} symbol\r\n       * @param {Factor} factors\r\n       * @returns {Symbol}\r\n       */\n      coeffFactor: function coeffFactor(symbol, factors) {\n        if (symbol.isComposite()) {\n          var gcd = core.Math2.QGCD.apply(null, symbol.coeffs());\n\n          if (!gcd.equals(1)) {\n            symbol.each(function (x) {\n              if (x.isComposite()) {\n                x.each(function (y) {\n                  y.multiplier = y.multiplier.divide(gcd);\n                });\n              } else x.multiplier = x.multiplier.divide(gcd);\n            });\n            symbol.updateHash();\n          } else {\n            // TODO: This should probably go to the prototype\n            var power = function power(symbol) {\n              var p;\n\n              if (symbol.group === CB) {\n                p = 0;\n                symbol.each(function (x) {\n                  p += x.power;\n                });\n              } else {\n                p = Number(symbol.power);\n              }\n\n              return p;\n            }; // Factor out negatives from the lead term\n\n\n            var terms = symbol.collectSymbols(null, null, null, true).sort(function (a, b) {\n              // Push constants to the back\n              if (a.isConstant(true)) return 1;\n              return b.power - a.power;\n            });\n            var LT = terms[0]; // Check if the LT is indeed the greatest\n\n            if (power(LT) > power(terms[1]) || terms[1].isConstant(true)) {\n              if (LT.multiplier.lessThan(0)) {\n                // Although the symbol should always be linear at this point, remove the negative for squares\n                // to be safe.\n                factors.add(new Symbol(-1));\n                symbol.each(function (x) {\n                  x.negate();\n                }, true);\n              }\n            }\n          }\n\n          if (factors) {\n            factors.add(new Symbol(gcd));\n          }\n        }\n\n        return symbol;\n      },\n\n      /**\r\n       * The name says it all :)\r\n       * @param {Symbol} symbol\r\n       * @param {Factor} factors\r\n       * @@param {String} variable \r\n       * @returns {Symbol}\r\n       */\n      trialAndError: function trialAndError(symbol, factors, variable) {\n        var untouched = symbol.clone();\n\n        try {\n          // At temp holder for the factors. If all goes well then\n          // they'll be moved to the actual factors.\n          var factor_array = [];\n          if (symbol.isConstant() || symbol.group === S) return symbol;\n\n          var poly = new Polynomial(symbol, variable),\n              cnst = poly.coeffs[0],\n              cfactors = core.Math2.ifactor(cnst),\n              roots = __.proots(symbol);\n\n          for (var i = 0; i < roots.length; i++) {\n            var r = roots[i],\n                p = 1;\n\n            if (!isNaN(r)) {\n              //if it's a number\n              for (var x in cfactors) {\n                //check it's raised to a power\n                var n = core.Utils.round(Math.log(x) / Math.log(Math.abs(r)), 8);\n\n                if (isInt(n)) {\n                  r = x; //x must be the root since n gave us a whole\n\n                  p = n;\n                  break;\n                }\n              }\n\n              var root = new Frac(r),\n                  terms = [new Frac(root.num).negate()];\n              terms[p] = new Frac(root.den); //convert to Frac. The den is coeff of LT and the num is coeff of constant\n\n              var div = Polynomial.fromArray(terms, poly.variable).fill(),\n                  t = poly.divide(div);\n\n              if (t[1].equalsNumber(0)) {\n                //if it's zero we have a root and divide it out\n                poly = t[0]; // factors.add(div.toSymbol());\n\n                factor_array.push(div.toSymbol());\n              }\n            }\n          }\n\n          if (!poly.equalsNumber(1)) {\n            poly = __.Factor.search(poly, factors);\n          } // Move the factors over since all went well.\n\n\n          factor_array.forEach(function (x) {\n            factors.add(x);\n          });\n          return poly.toSymbol();\n        } catch (e) {\n          return untouched;\n        }\n      },\n      search: function search(poly, factors, base) {\n        base = base || 10; //I like 10 because numbers exhibit similar behaviours at 10\n\n        var v = poly.variable; //the polynmial variable name\n\n        /**\r\n         * Attempt to remove a root by division given a number by first creating\r\n         * a polynomial fromt he given information\r\n         * @param {int} c1 - coeffient for the constant\r\n         * @param {int} c2 - coefficient for the LT\r\n         * @param {int} n - the number to be used to construct the polynomial\r\n         * @param {int} p - the power at which to create the polynomial\r\n         * @returns {null|Polynomial} - returns polynomial if successful otherwise null\r\n         */\n\n        var check = function check(c1, c2, n, p) {\n          var candidate = Polynomial.fit(c1, c2, n, base, p, v);\n\n          if (candidate && candidate.coeffs.length > 1) {\n            var t = poly.divide(candidate);\n\n            if (t[1].equalsNumber(0)) {\n              factors.add(candidate.toSymbol());\n              return [t[0], candidate];\n            }\n          }\n\n          return null;\n        };\n\n        var cnst = poly.coeffs[0];\n        var cfactors = core.Math2.ifactor(cnst);\n        var lc = poly.lc();\n        var ltfactors = core.Math2.ifactor(lc);\n        var subbed = poly.sub(base);\n        var isubbed = core.Math2.ifactor(subbed);\n\n        var nfactors = __.Factor.mix(isubbed, subbed < 0);\n\n        var cp = Math.ceil(poly.coeffs.length / 2);\n        var lc_is_neg = lc.lessThan(0);\n        var cnst_is_neg = cnst.lessThan(0);\n        ltfactors['1'] = 1;\n        cfactors['1'] = 1;\n\n        while (cp--) {\n          for (var x in ltfactors) {\n            for (var y in cfactors) {\n              for (var i = 0; i < nfactors.length; i++) {\n                var factor_found = check(x, y, nfactors[i], cp);\n\n                if (factor_found) {\n                  poly = factor_found[0];\n                  if (!core.Utils.isPrime(poly.sub(base))) poly = __.Factor.search(poly, factors);\n                  return poly;\n                } else if (!factor_found) {\n                  if (lc_is_neg && cnst_is_neg) factor_found = check(-x, -y, nfactors[i], cp);else if (lc_is_neg) factor_found = check(-x, y, nfactors[i], cp); //check a negative lc\n                  else if (cnst_is_neg) factor_found = check(x, -y, nfactors[i], cp); //check a negative constant\n                }\n              }\n            }\n          }\n        }\n\n        return poly;\n      },\n\n      /**\r\n       * Equivalent of square free factor for multivariate polynomials\r\n       * @param {type} symbol\r\n       * @param {type} factors\r\n       * @returns {AlgebraL#18.Factor.mSqfrFactor.symbol|Array|AlgebraL#18.__.Factor.mSqfrFactor.d}\r\n       */\n      mSqfrFactor: function mSqfrFactor(symbol, factors) {\n        if (symbol.group !== FN) {\n          var vars = variables(symbol).reverse(); // Loop through all the variable and remove the partial derivatives\n\n          for (var i = 0; i < vars.length; i++) {\n            do {\n              if (vars[i] === symbol.value) {\n                //the derivative tells us nothing since this symbol is already the factor\n                factors.add(symbol);\n                symbol = new Symbol(1);\n                continue;\n              }\n\n              var diff = core.Calculus.diff(symbol, vars[i]);\n\n              var d = __.Factor.coeffFactor(diff);\n\n              if (d.equals(0)) break; //trial division to see if factors have whole numbers. \n              //This can be optimized by stopping as soon as can_divide is false\n              //this will also need utilize big number at some point\n\n              var can_divide = true;\n\n              if (d.isConstant() && symbol.isComposite()) {\n                //check the coefficients\n                symbol.each(function (x) {\n                  if (x.multiplier % d !== 0) can_divide = false;\n                }, true);\n              } //if we can divide then do so\n\n\n              if (can_divide) {\n                var div = __.div(symbol, d.clone()),\n                    is_factor = div[1].equals(0); // Break infinite loop for factoring e^t*x-1\n\n\n                if (symbol.equals(div[0]) && div[1].equals(0)) {\n                  break;\n                }\n\n                if (div[0].isConstant()) {\n                  factors.add(div[0]);\n                  break;\n                }\n              } else is_factor = false;\n\n              if (is_factor) {\n                factors.add(div[0]);\n                symbol = d;\n              }\n            } while (is_factor);\n          }\n        }\n\n        return symbol;\n      },\n      //difference of squares factorization\n      sqdiff: function sqdiff(symbol, factors) {\n        if (symbol.isConstant('all')) {\n          // Nothing to do\n          return symbol;\n        }\n\n        try {\n          var remove_square = function remove_square(x) {\n            return core.Utils.block('POSITIVE_MULTIPLIERS', function () {\n              return Symbol.unwrapPARENS(math.sqrt(math.abs(x)));\n            }, true);\n          };\n\n          var separated = core.Utils.separate(symbol.clone());\n          var obj_array = []; //get the unique variables\n\n          for (var x in separated) {\n            if (x !== 'constants') {\n              obj_array.push(separated[x]);\n            }\n          }\n\n          obj_array.sort(function (a, b) {\n            return b.power - a.power;\n          }); //if we have the same number of variables as unique variables then we can apply the difference of squares\n\n          if (obj_array.length === 2) {\n            var a, b;\n            a = obj_array.pop();\n            b = obj_array.pop();\n\n            if (even(a.power) && even(b.power) && a.sign() === b.sign() && a.group === S && b.group === S) {\n              throw new Error('Unable to factor');\n            }\n\n            ;\n\n            if (a.isComposite() && b.power.equals(2)) {\n              //remove the square from b\n              b = remove_square(b);\n\n              var f = __.Factor.factor(_.add(a, separated.constants));\n\n              if (f.power.equals(2)) {\n                f.toLinear();\n                factors.add(_.subtract(f.clone(), b.clone()));\n                factors.add(_.add(f, b));\n                symbol = new Symbol(1);\n              }\n            } else {\n              a = a.powSimp();\n              b = b.powSimp();\n\n              if ((a.group === S || a.fname === '') && a.power.equals(2) && (b.group === S || b.fname === '') && b.power.equals(2) && !separated.constants) {\n                if (a.multiplier.lessThan(0)) {\n                  var t = b;\n                  b = a;\n                  a = t;\n                }\n\n                if (a.multiplier.greaterThan(0)) {\n                  a = remove_square(a);\n                  b = remove_square(b);\n                }\n\n                factors.add(_.subtract(a.clone(), b.clone()));\n                factors.add(_.add(a, b));\n                symbol = new Symbol(1);\n              }\n            }\n          }\n        } catch (e) {\n          ;\n        }\n\n        return symbol;\n      },\n      //factoring for multivariate\n      mfactor: function mfactor(symbol, factors) {\n        if (symbol.group === FN) {\n          if (symbol.fname === 'sqrt') {\n            var factors2 = new Factors(),\n                arg = __.Factor.common(symbol.args[0].clone(), factors2);\n\n            arg = __.Factor.coeffFactor(arg, factors2);\n            symbol = _.multiply(_.symfunction('sqrt', [arg]), _.parse(symbol.multiplier));\n            factors2.each(function (x) {\n              symbol = _.multiply(symbol, _.parse(core.Utils.format('sqrt({0})', x)));\n            });\n          } else factors.add(symbol);\n        } else {\n          //square free factorization\n          symbol = __.Factor.mSqfrFactor(symbol, factors); //try factor out common factors\n          //symbol = __.Factor.common(symbol, factors);\n\n          var vars = variables(symbol),\n              symbols = symbol.collectSymbols().map(function (x) {\n            return Symbol.unwrapSQRT(x);\n          }),\n              sorted = {},\n              maxes = {},\n              l = vars.length,\n              n = symbols.length; //take all the variables in the symbol and organize by variable name\n          //e.g. a^2+a^2+b*a -> {a: {a^3, a^2, b*a}, b: {b*a}}\n\n          for (var i = 0; i < l; i++) {\n            var v = vars[i];\n            sorted[v] = new Symbol(0);\n\n            for (var j = 0; j < n; j++) {\n              var s = symbols[j];\n\n              if (s.contains(v)) {\n                var p = s.value === v ? s.power.toDecimal() : s.symbols[v].power.toDecimal();\n                if (!maxes[v] || p < maxes[v]) maxes[v] = p;\n                sorted[v] = _.add(sorted[v], s.clone());\n              }\n            }\n          }\n\n          for (var x in sorted) {\n            var r = _.parse(x + '^' + maxes[x]);\n\n            var div = _.divide(sorted[x], r);\n\n            var new_factor = _.expand(div);\n\n            if (new_factor.equals(1)) break; //why divide by one. Just move \n\n            var divided = __.div(symbol.clone(), new_factor);\n\n            if (divided[0].equals(0)) {\n              //cant factor anymore\n              break;\n            } // We potentially ended up with fractional coefficients when the\n            // trial division was performed. We need to remove \n            // This check will more then likely become superfluous with improvements\n            // to polynomial division\n\n\n            if (divided[1].equals(0)) {\n              var has_fractions = false;\n              divided[0].each(function (x) {\n                if (!isInt(x.multiplier)) {\n                  has_fractions = true;\n                }\n              }); // The factor isn't really a factor and needs to be put back\n\n              if (has_fractions) {\n                divided[1] = _.expand(_.multiply(divided[1], new_factor)); // Since the new factor is not just one, we exit.\n\n                break;\n              }\n            }\n\n            var neg_numeric_factor = isInt(new_factor) && new_factor.lessThan(0);\n\n            if (divided[1].equals(0) && !neg_numeric_factor) {\n              //we found at least one factor\n              //factors.add(new_factor);\n              var d = __.div(symbol.clone(), divided[0].clone());\n\n              var r = d[0]; // Nothing left to do since we didn't get a reduction\n\n              if (r.equals(0)) {\n                return symbol;\n              }\n\n              symbol = d[1]; //we don't want to just flip the sign. If the remainder is -1 then we accomplished nothing\n              //and we just return the symbol;\n              //If r equals zero then there's nothing left to do so we're done\n\n              if (r.equals(-1) && !symbol.equals(0)) return symbol;\n              var factor = divided[0];\n\n              if (symbol.equals(factor)) {\n                var rem = __.Factor.reduce(factor, factors);\n\n                if (!symbol.equals(rem)) return __.Factor.mfactor(rem, factors);\n                return rem;\n              } else {\n                factors.add(factor); //if the remainder of the symbol is zero then we're done. TODO: Rethink this logic a bit.\n\n                if (symbol.equals(0)) return r;\n              }\n\n              if (r.isConstant('all')) {\n                factors.add(r);\n                return r;\n              }\n\n              return __.Factor.mfactor(r, factors);\n            }\n          }\n        } //difference of squares factorization\n\n\n        symbol = __.Factor.sqdiff(symbol, factors); //factors by fishing for zeroes\n\n        symbol = __.Factor.zeroes(symbol, factors);\n        return symbol;\n      }\n    },\n\n    /**\r\n     * Checks to see if a set of \"equations\" is linear. \r\n     * @param {type} set\r\n     * @returns {Boolean}\r\n     */\n    allLinear: function allLinear(set) {\n      var l = set.length;\n\n      for (var i = 0; i < l; i++) {\n        if (!__.isLinear(set[i])) return false;\n      }\n\n      return true;\n    },\n\n    /*\r\n     * Checks to see if the \"equation\" is linear\r\n     * @param {Symbol} e\r\n     * @returns {boolean}\r\n     */\n    isLinear: function isLinear(e) {\n      var status = false,\n          g = e.group;\n\n      if (g === PL || g === CP) {\n        status = true;\n\n        for (var s in e.symbols) {\n          var symbol = e.symbols[s],\n              sg = symbol.group;\n\n          if (sg === FN || sg === EX) {\n            status = false;\n          }\n\n          if (sg === CB) {\n            //needs further checking since it might be imaginary\n            status = variables(symbol).length === 1;\n          } else {\n            if (sg === PL || sg === CP) status = __.isLinear(symbol);else {\n              if (symbol.group !== N && symbol.power.toString() !== '1') {\n                status = false;\n                break;\n              }\n            }\n          }\n        }\n      } else if (g === S && e.power === 1) status = true;\n\n      return status;\n    },\n    gcd: function gcd() {\n      var args;\n      if (arguments.length === 1 && arguments[0] instanceof core.Vector) args = arguments[0].elements;else args = core.Utils.arguments2Array(arguments); //short-circuit early\n\n      if (args.length === 0) return new Symbol(1);else if (args.length === 1) return args[0];\n      var appeared = [],\n          evaluate = false;\n\n      for (var i = 0; i < args.length; i++) {\n        if (args[i].group === FN && args[i].fname === 'gcd') {\n          //compress gcd(a,gcd(b,c)) into gcd(a,b,c)\n          args = args.concat(arguments[i].args); //do not keep gcd in args\n\n          args.splice(i, 1);\n        } else {\n          //Look if there are any common variables such that\n          //gcd(a,b) => gcd(a,b); gcd(a,a) => a\n          var vars = variables(args[i]);\n\n          if (core.Utils.haveIntersection(vars, appeared)) {\n            //Ok, there are common variables\n            evaluate = true;\n            break;\n          } else appeared = appeared.concat(vars);\n        }\n      } //appeared.length is 0 when all arguments are group N\n\n\n      if (evaluate || appeared.length === 0) {\n        //TODO: distribute exponent so that (a^-1*b^-1)^-1 => a*b\n        if (args.every(function (symbol) {\n          return symbol.getDenom().equals(1);\n        })) {\n          var aggregate = args[0];\n\n          for (var i = 1; i < args.length; i++) {\n            aggregate = __.gcd_(args[i], aggregate);\n          }\n\n          return aggregate;\n        } else {\n          //gcd_ cannot handle denominators correctly\n          return _.divide(__.gcd.apply(null, args.map(function (symbol) {\n            return symbol.getNum();\n          })), __.lcm.apply(null, args.map(function (symbol) {\n            return symbol.getDenom();\n          })));\n        }\n      } else return _.symfunction('gcd', args);\n    },\n    gcd_: function gcd_(a, b) {\n      if (a.group === FN || a.group === P) a = core.Utils.block('PARSE2NUMBER', function () {\n        return _.parse(a);\n      });\n      if (b.group === FN) b = core.Utils.block('PARSE2NUMBER', function () {\n        return _.parse(b);\n      });\n\n      if (a.isConstant() && b.isConstant()) {\n        // return core.Math2.QGCD(new Frac(+a), new Frac(+b));\n        return new Symbol(core.Math2.QGCD(new Frac(+a), new Frac(+b)));\n      }\n\n      var den = _.multiply(a.getDenom() || new Symbol(1), b.getDenom() || new Symbol(1)).invert();\n\n      a = _.multiply(a.clone(), den.clone());\n      b = _.multiply(b.clone(), den.clone()); //feels counter intuitive but it works. Issue #123 (nerdamer(\"gcd(x+y,(x+y)^2)\"))\n\n      a = _.expand(a);\n      b = _.expand(b);\n\n      if (a.group === CB || b.group === CB) {\n        var q = _.divide(a.clone(), b.clone()); //get the quotient\n\n\n        var t = _.multiply(b.clone(), q.getDenom().invert()); //multiply by the denominator\n        //if they have a common factor then the result will not equal one \n\n\n        if (!t.equals(1)) return t;\n      } //just take the gcd of each component when either of them is in group EX\n\n\n      if (a.group === EX || b.group === EX) {\n        var gcd_m = new Symbol(core.Math2.GCD(a.multiplier, b.multiplier));\n\n        var gcd_v = __.gcd_(a.value === CONST_HASH ? new Symbol(1) : _.parse(a.value), b.value === CONST_HASH ? new Symbol(1) : _.parse(b.value));\n\n        var gcd_p = __.gcd_(_.parse(a.power), _.parse(b.power));\n\n        return _.multiply(gcd_m, _.pow(gcd_v, gcd_p));\n      }\n\n      if (a.length < b.length) {\n        //swap'm\n        var t = a;\n        a = b;\n        b = t;\n      }\n\n      var vars_a = variables(a),\n          vars_b = variables(b);\n\n      if (vars_a.length === vars_b.length && vars_a.length === 1 && vars_a[0] === vars_b[0] || vars_a.length === 1 && vars_b.length === 0 || vars_a.length === 0 && vars_b.length === 1) {\n        a = new Polynomial(a);\n        b = new Polynomial(b);\n        return _.divide(a.gcd(b).toSymbol(), den);\n      } else {\n        //get the gcd of the multipiers\n        //get rid of gcd in coeffs\n        var multipliers = [];\n        a.each(function (x) {\n          multipliers.push(x.multiplier);\n        });\n        b.each(function (x) {\n          multipliers.push(x.multiplier);\n        });\n        var T;\n\n        while (!b.equals(0)) {\n          var t = b.clone();\n          a = a.clone();\n          T = __.div(a, t);\n          b = T[1];\n\n          if (T[0].equals(0)) {\n            //return _.multiply(new Symbol(core.Math2.QGCD(a.multiplier, b.multiplier)), b);\n            return _.divide(new Symbol(core.Math2.QGCD(a.multiplier, b.multiplier)), den);\n          }\n\n          a = t;\n        }\n\n        var gcd = core.Math2.QGCD.apply(undefined, multipliers);\n\n        if (!gcd.equals(1)) {\n          a.each(function (x) {\n            x.multiplier = x.multiplier.divide(gcd);\n          });\n        } //return symbolic function for gcd in indeterminate form\n\n\n        if (a.equals(1) && !a.isConstant() && !b.isConstant()) return _.divide(_.symfunction('gcd', arguments), den);\n        return _.divide(a, den);\n      }\n    },\n    lcm: function lcm() {\n      //https://math.stackexchange.com/a/319310\n      //generalization of the 2-variable formula of lcm\n      var args;\n      if (arguments.length === 1) {\n        if (arguments[0] instanceof core.Vector) args = arguments[0].elements;else _.error('lcm expects either 1 vector or 2 or more arguments');\n      } else args = core.Utils.arguments2Array(arguments); //product of all arguments\n      //start with new Symbol(1) so that prev.clone() which makes unnessesary clones can be avoided\n\n      var numer = args.reduce(function (prev, curr) {\n        return _.multiply(prev, curr.clone());\n      }, new Symbol(1)); //gcd of complementary terms\n\n      var denom_args = //https://stackoverflow.com/a/18223072\n      //take all complementary terms, e.g.\n      //[a,b,c] => [a*b, b*c, a*c]\n      //[a,b,c,d] => [a*b*c, a*b*d, a*c*d, b*c*d]\n      function (input, size) {\n        size = Number(size);\n        var results = [],\n            result,\n            mask,\n            i,\n            total = Math.pow(2, input.length);\n\n        for (mask = size; mask < total; mask++) {\n          result = [];\n          i = input.length - 1;\n\n          do {\n            if ((mask & 1 << i) !== 0) {\n              result.push(input[i]);\n            }\n          } while (i--);\n\n          if (result.length === size) {\n            results.push(result);\n          }\n        }\n\n        return results; //start with new Symbol(1) so that prev.clone() which makes unnessesary clones can be avoided\n      }(arguments, arguments.length - 1).map(function (x) {\n        return x.reduce(function (prev, curr) {\n          return _.multiply(prev, curr.clone());\n        }, new Symbol(1));\n      });\n\n      var denom; //don't eat the gcd term if all arguments are symbols\n\n      if (args.every(function (x) {\n        return core.Utils.isVariableSymbol(x);\n      })) denom = _.symfunction('gcd', core.Utils.arrayUnique(denom_args));else denom = __.gcd.apply(null, denom_args); //divide product of all arguments by gcd of complementary terms\n\n      var div = _.divide(numer, denom);\n\n      return div;\n    },\n\n    /**\r\n     * Divides one expression by another\r\n     * @param {Symbol} symbol1\r\n     * @param {Symbol} symbol2\r\n     * @returns {Array}\r\n     */\n    divide: function divide(symbol1, symbol2) {\n      var result, remainder, factored, den;\n      factored = core.Algebra.Factor.factor(symbol1.clone());\n      den = factored.getDenom();\n\n      if (!den.isConstant('all')) {\n        symbol1 = _.expand(Symbol.unwrapPARENS(_.multiply(factored, den.clone())));\n      } else //reset the denominator since we're not dividing by it anymore\n        den = new Symbol(1);\n\n      result = __.div(symbol1, symbol2);\n      remainder = _.divide(result[1], symbol2);\n      return _.divide(_.add(result[0], remainder), den);\n    },\n    div: function div(symbol1, symbol2) {\n      // If all else fails then assume that division failed with\n      // a remainder of zero and the original quotient\n      var fail = [new Symbol(0), symbol1.clone()];\n\n      try {\n        // Division by constants\n        if (symbol2.isConstant('all')) {\n          symbol1.each(function (x) {\n            x.multiplier = x.multiplier.divide(symbol2.multiplier);\n          });\n          return [symbol1, new Symbol(0)];\n        } // So that factorized symbols don't affect the result\n\n\n        symbol1 = _.expand(symbol1);\n        symbol2 = _.expand(symbol2); // Special case. May need revisiting\n\n        if (symbol1.group === S && symbol2.group === CP) {\n          var x = symbol1.value;\n          var f = core.Utils.decompose_fn(symbol2.clone(), x, true);\n\n          if (symbol1.isLinear() && f.x && f.x.isLinear() && symbol2.isLinear()) {\n            var k = Symbol.create(symbol1.multiplier);\n            return [_.divide(k.clone(), f.a.clone()), _.divide(_.multiply(k, f.b), f.a).negate()];\n          }\n        }\n\n        if (symbol1.group === S && symbol2.group === S) {\n          var r = _.divide(symbol1.clone(), symbol2.clone());\n\n          if (r.isConstant()) //we have a whole\n            return [r, new Symbol(0)];\n          return [new Symbol(0), symbol1.clone()];\n        }\n\n        var symbol1_has_func = symbol1.hasFunc(),\n            symbol2_has_func = symbol2.hasFunc(),\n            parse_funcs = false; //substitute out functions so we can treat them as regular variables\n\n        if (symbol1_has_func || symbol2_has_func) {\n          parse_funcs = true;\n\n          var map = {},\n              symbol1 = _.parse(core.Utils.subFunctions(symbol1, map)),\n              symbol2 = _.parse(core.Utils.subFunctions(symbol2, map)),\n              subs = core.Utils.getFunctionsSubs(map);\n        } //get a list of the variables\n\n\n        var vars = core.Utils.arrayUnique(variables(symbol1).concat(variables(symbol2))),\n            quot,\n            rem; //treat imaginary numbers as variables\n\n        if (symbol1.isImaginary() || symbol2.isImaginary()) {\n          vars.push(core.Settings.IMAGINARY);\n        }\n\n        if (vars.length === 1) {\n          var q = new Polynomial(symbol1).divide(new Polynomial(symbol2));\n          quot = q[0].toSymbol();\n          rem = q[1].toSymbol();\n        } else {\n          vars.push(CONST_HASH); //this is for the numbers\n\n          var reconvert = function reconvert(arr) {\n            var symbol = new Symbol(0);\n\n            for (var i = 0; i < arr.length; i++) {\n              var x = arr[i].toSymbol();\n              symbol = _.add(symbol, x);\n            }\n\n            return symbol;\n          }; // Silly Martin. This is why you document. I don't remember now\n\n\n          var get_unique_max = function get_unique_max(term, any) {\n            var max = Math.max.apply(null, term.terms),\n                count = 0,\n                idx;\n\n            if (!any) {\n              for (var i = 0; i < term.terms.length; i++) {\n                if (term.terms[i].equals(max)) {\n                  idx = i;\n                  count++;\n                }\n\n                if (count > 1) return;\n              }\n            }\n\n            if (any) {\n              for (i = 0; i < term.terms.length; i++) {\n                if (term.terms[i].equals(max)) {\n                  idx = i;\n                  break;\n                }\n              }\n            }\n\n            return [max, idx, term];\n          }; // Tries to find an LT in the dividend that will satisfy division\n\n\n          var get_det = function get_det(s, lookat) {\n            lookat = lookat || 0;\n            var det = s[lookat],\n                l = s.length;\n            if (!det) return; //eliminate the first term if it doesn't apply\n\n            var umax = get_unique_max(det);\n\n            for (var i = lookat + 1; i < l; i++) {\n              var term = s[i],\n                  is_equal = det.sum.equals(term.sum);\n\n              if (!is_equal && umax) {\n                break;\n              }\n\n              if (is_equal) {\n                // Check the differences of their maxes. The one with the biggest difference governs\n                // e.g. x^2*y^3 vs x^2*y^3 is unclear but this isn't the case in x*y and x^2\n                var max1,\n                    max2,\n                    idx1,\n                    idx2,\n                    l2 = det.terms.length;\n\n                for (var j = 0; j < l2; j++) {\n                  var item1 = det.terms[j],\n                      item2 = term.terms[j];\n\n                  if (typeof max1 === 'undefined' || item1.greaterThan(max1)) {\n                    max1 = item1;\n                    idx1 = j;\n                  }\n\n                  if (typeof max2 === 'undefined' || item2.greaterThan(max2)) {\n                    max2 = item2;\n                    idx2 = j;\n                  }\n                } //check their differences\n\n\n                var d1 = max1.subtract(term.terms[idx1]),\n                    d2 = max2.subtract(det.terms[idx2]);\n\n                if (d2 > d1) {\n                  umax = [max2, idx2, term];\n                  break;\n                }\n\n                if (d1 > d2) {\n                  umax = [max1, idx1, det];\n                  break;\n                }\n              } else {\n                //check if it's a suitable pick to determine the order\n                umax = get_unique_max(term); //if(umax) return umax;\n\n                if (umax) break;\n              }\n\n              umax = get_unique_max(term); //calculate a new unique max\n            } //if still no umax then any will do since we have a tie\n\n\n            if (!umax) return get_unique_max(s[0], true);\n            var e, idx;\n\n            for (var i = 0; i < s2.length; i++) {\n              var cterm = s2[i].terms; //confirm that this is a good match for the denominator\n\n              idx = umax[1];\n              if (idx === cterm.length - 1) return;\n              e = cterm[idx];\n              if (!e.equals(0)) break;\n            }\n\n            if (e.equals(0)) return get_det(s, ++lookat); //look at the next term\n\n            return umax;\n          };\n\n          var t_map = core.Utils.toMapObj(vars);\n\n          var init_sort = function init_sort(a, b) {\n            return b.sum.subtract(a.sum);\n          };\n\n          var is_larger = function is_larger(a, b) {\n            if (!a || !b) return false; //it's empty so...\n\n            for (var i = 0; i < a.terms.length; i++) {\n              if (a.terms[i].lessThan(b.terms[i])) return false;\n            }\n\n            return true;\n          };\n\n          var s1 = symbol1.tBase(t_map).sort(init_sort),\n              s2 = symbol2.tBase(t_map).sort(init_sort);\n          var target = is_larger(s1[0], s2[0]) && s1[0].count > s2[0].count ? s2 : s1; //since the num is already larger than we can get the det from denom\n\n          var det = get_det(target); //we'll begin by assuming that this will let us know which term \n\n          var quotient = [];\n\n          if (det) {\n            var lead_var = det[1];\n\n            var can_divide = function can_divide(a, b) {\n              if (a[0].sum.equals(b[0].sum)) return a.length >= b.length;\n              return true;\n            };\n\n            var try_better_lead_var = function try_better_lead_var(s1, s2, lead_var) {\n              var checked = [];\n\n              for (var i = 0; i < s1.length; i++) {\n                var t = s1[i];\n\n                for (var j = 0; j < t.terms.length; j++) {\n                  var cf = checked[j],\n                      tt = t.terms[j];\n                  if (i === 0) checked[j] = tt; //add the terms for the first one\n                  else if (cf && !cf.equals(tt)) checked[j] = undefined;\n                }\n              }\n\n              for (var i = 0; i < checked.length; i++) {\n                var t = checked[i];\n                if (t && !t.equals(0)) return i;\n              }\n\n              return lead_var;\n            };\n\n            var sf = function sf(a, b) {\n              var l1 = a.len(),\n                  l2 = b.len();\n              var blv = b.terms[lead_var],\n                  alv = a.terms[lead_var];\n              if (l2 > l1 && blv.greaterThan(alv)) return l2 - l1;\n              return blv.subtract(alv);\n            }; //check to see if there's a better lead_var\n\n\n            lead_var = try_better_lead_var(s1, s2, lead_var); //reorder both according to the max power\n\n            s1.sort(sf); //sort them both according to the leading variable power\n\n            s2.sort(sf); //try to adjust if den is larger\n\n            var fdt = s2[0],\n                fnt = s1[0];\n            var den = new MVTerm(new Frac(1), [], fnt.map);\n\n            if (fdt.sum.greaterThan(fnt.sum) && fnt.len() > 1) {\n              for (var i = 0; i < fnt.terms.length; i++) {\n                var d = fdt.terms[i].subtract(fnt.terms[i]);\n\n                if (!d.equals(0)) {\n                  var nd = d.add(new Frac(1));\n                  den.terms[i] = d;\n\n                  for (var j = 0; j < s1.length; j++) {\n                    s1[j].terms[i] = s1[j].terms[i].add(nd);\n                  }\n                } else den.terms[i] = new Frac(0);\n              }\n            }\n\n            var dividend_larger = is_larger(s1[0], s2[0]);\n            var safety = 0;\n            var max = 200;\n\n            while (dividend_larger && can_divide(s1, s2)) {\n              if (safety++ > max) {\n                throw new core.exceptions.InfiniteLoopError('Unable to compute!');\n              }\n\n              var q = s1[0].divide(s2[0]);\n              quotient.push(q); //add what's divided to the quotient\n\n              s1.shift(); //the first one is guaranteed to be gone so remove from dividend\n\n              for (var i = 1; i < s2.length; i++) {\n                //loop through the denominator\n                var t = s2[i].multiply(q).generateImage(),\n                    l2 = s1.length; //if we're subtracting from 0\n\n                if (l2 === 0) {\n                  t.coeff = t.coeff.neg();\n                  s1.push(t);\n                  s1.sort(sf);\n                }\n\n                for (var j = 0; j < l2; j++) {\n                  var cur = s1[j];\n\n                  if (cur.getImg() === t.getImg()) {\n                    cur.coeff = cur.coeff.subtract(t.coeff);\n\n                    if (cur.coeff.equals(0)) {\n                      core.Utils.remove(s1, j);\n                      j--; //adjust the iterator\n                    }\n\n                    break;\n                  }\n\n                  if (j === l2 - 1) {\n                    t.coeff = t.coeff.neg();\n                    s1.push(t);\n                    s1.sort(sf);\n                  }\n                }\n              }\n\n              dividend_larger = is_larger(s1[0], s2[0]);\n\n              if (!dividend_larger && s1.length >= s2.length) {\n                //One more try since there might be a terms that is larger than the LT of the divisor\n                for (var i = 1; i < s1.length; i++) {\n                  dividend_larger = is_larger(s1[i], s2[0]);\n\n                  if (dividend_larger) {\n                    //take it from its current position and move it to the front\n                    s1.unshift(core.Utils.remove(s1, i));\n                    break;\n                  }\n                }\n              }\n            }\n          }\n\n          quot = reconvert(quotient);\n          rem = reconvert(s1);\n\n          if (typeof den !== 'undefined') {\n            den = den.toSymbol();\n            quot = _.divide(quot, den.clone());\n            rem = _.divide(rem, den);\n          }\n        } //put back the functions\n\n\n        if (parse_funcs) {\n          quot = _.parse(quot.text(), subs);\n          rem = _.parse(rem.text(), subs);\n        }\n\n        return [quot, rem];\n      } catch (e) {\n        return fail;\n      }\n    },\n    line: function line(v1, v2, x) {\n      if (core.Utils.isArray(v1)) v1 = core.Utils.convertToVector(v1);\n      if (core.Utils.isArray(v2)) v2 = core.Utils.convertToVector(v2);\n      x = _.parse(x || 'x');\n      if (!core.Utils.isVector(v1) || !core.Utils.isVector(v2)) _.error('Line expects a vector! Received \"' + v1 + '\" & \"' + v2 + '\"');\n\n      var dx = _.subtract(v2.e(1).clone(), v1.e(1).clone()),\n          dy = _.subtract(v2.e(2).clone(), v1.e(2).clone()),\n          m = _.divide(dy, dx),\n          a = _.multiply(x, m.clone()),\n          b = _.multiply(v1.e(1).clone(), m);\n\n      return _.add(_.subtract(a, b), v1.e(2).clone());\n    },\n    PartFrac: {\n      createTemplate: function createTemplate(den, denom_factors, f_array, v) {\n        //clean up the denominator function by factors so it reduces nicely\n        den = __.Factor.factor(den); //clean up factors. This is so inefficient but factors are wrapped in parens for safety\n\n        den.each(function (x, key) {\n          if (x.group === FN && x.fname === '' && x.args[0].group === S) {\n            var y = x.args[0];\n\n            if (this.symbols) {\n              delete this.symbols[key];\n              this.symbols[y.value] = y;\n            } else {\n              den = x.args[0];\n            }\n          }\n        });\n        var factors, factors_vec, f, p, deg, degrees, m;\n        factors = denom_factors.collectFactors();\n        factors_vec = []; //a vector for the template\n\n        degrees = [];\n        m = new Symbol(1);\n\n        for (var i = 0; i < factors.length; i++) {\n          //loop through the factors\n          var factor = Symbol.unwrapPARENS(factors[i]); //if in he for P^n where P is polynomial and n = integer\n\n          if (factor.power.greaterThan(1)) {\n            p = Number(factor.power);\n            f = factor.clone().toLinear(); //remove the power so we have only the function\n\n            deg = Number(__.degree(f, v)); //get the degree of f\n            //expand the factor\n\n            for (var j = 0; j < p; j++) {\n              var efactor = _.pow(f.clone(), new Symbol(j + 1));\n\n              f_array.push(efactor.clone());\n\n              var d = _.divide(den.clone(), efactor.clone());\n\n              degrees.push(deg);\n              factors_vec.push(d);\n            }\n          }\n          /*\r\n           Possible bug.\r\n           Removed: causes 1/(20+24*x+4*x^2) to result in (-1/64)*(5+x)^(-1)+(1/64)*(1+x)^(-1)\r\n           else if(factor.isConstant('all')) {\r\n           m = _.multiply(m, factor);\r\n           }\r\n           */\n          else {\n            //get the degree of the factor so we tack it on tot he factor. This should probably be an array\n            //but for now we note it on the symbol\n            deg = Number(__.degree(factor, v));\n            f_array.push(factor);\n\n            var d = _.divide(den.clone(), factor.clone());\n\n            d = _.expand(Symbol.unwrapPARENS(d));\n            degrees.push(deg);\n            factors_vec.push(d);\n          }\n        } //put back the constant\n\n\n        f_array = f_array.map(function (x) {\n          return _.multiply(x, m.clone());\n        });\n        return [f_array, factors_vec, degrees];\n      },\n      partfrac: function partfrac(symbol, v, as_array) {\n        var vars = variables(symbol);\n        v = v || _.parse(vars[0]); //make wrt optional and assume first variable\n\n        try {\n          var num, den, factors, tfactors, ofactors, nterms, degrees, dterms, max, M, c, powers, div, r, factors_vec, ks, template, tfactors;\n          num = _.expand(symbol.getNum());\n          den = _.expand(symbol.getDenom().toUnitMultiplier()); //move the entire multipier to the numerator\n\n          num.multiplier = symbol.multiplier; //we only have a meaningful change if n factors > 1. This means that\n          //the returned group will be a CB\n          //collect the terms wrt the x\n\n          nterms = num.groupTerms(v); //divide out wholes if top is larger\n\n          if (Number(__.degree(num, v)) >= Number(__.degree(den, v))) {\n            div = __.div(num.clone(), _.expand(den.clone()));\n            r = div[0]; //remove the wholes\n\n            num = div[1]; //work with the remainder\n\n            nterms = num.groupTerms(v); //recalculate the nterms\n          } else r = new Symbol(0);\n\n          if (Number(__.degree(den, v)) === 1) {\n            var q = _.divide(num, den);\n\n            if (as_array) return [r, q];\n            return _.add(r, q);\n          } //first factor the denominator. This means that the strength of this\n          //algorithm depends on how well we can factor the denominator. \n\n\n          ofactors = __.Factor.factor(den); //create the template. This method will create the template for solving \n          //the partial fractions. So given x/(x-1)^2 the template creates A/(x-1)+B/(x-1)^2\n\n          template = __.PartFrac.createTemplate(den.clone(), ofactors, [], v);\n          tfactors = template[0]; //grab the factors\n\n          factors_vec = template[1]; //grab the factor vectors\n\n          degrees = template[2]; //grab the degrees\n          //make note of the powers of each term\n\n          powers = [nterms.length]; //create the dterms vector\n\n          dterms = [];\n          factors = [];\n          ks = [];\n          var factor, deg;\n          factors_vec.map(function (x, idx) {\n            factor = tfactors[idx];\n            deg = degrees[idx];\n\n            for (var i = 0; i < deg; i++) {\n              factors.push(factor.clone());\n              var k = Symbol.create(v, i);\n\n              var t = _.expand(_.multiply(x, k.clone())).groupTerms(v); //make a note of the power which corresponds to the length of the array\n\n\n              var p = t.length;\n              powers.push(p);\n              dterms.push(t);\n              ks.push(k.clone());\n            }\n          }); //get the max power\n\n          max = core.Utils.arrayMax(powers); //fill the holes and create a matrix\n\n          c = new core.Matrix(core.Utils.fillHoles(nterms, max)).transpose(); //for each of the factors we do the same\n\n          M = new core.Matrix();\n\n          for (var i = 0; i < dterms.length; i++) {\n            M.elements.push(core.Utils.fillHoles(dterms[i], max));\n          } //solve the system of equations\n\n\n          var partials = _.multiply(M.transpose().invert(), c); //the results are backwards to reverse it\n          //partials.elements.reverse();\n          //convert it all back\n\n\n          var retval = as_array ? [r] : r;\n          partials.each(function (e, i) {\n            var term = _.multiply(ks[i], _.divide(e, factors[i]));\n\n            if (as_array) retval.push(term);else retval = _.add(retval, term);\n          }); //done\n\n          return retval;\n        } catch (e) {\n          //try to group symbols\n          try {\n            if (symbol.isComposite()) {\n              //group denominators\n              var denominators = {};\n              symbol.each(function (x) {\n                var d = x.getDenom();\n                var n = x.getNum();\n                var e = denominators[d];\n                denominators[d] = e ? _.add(e, n) : n;\n              });\n              var t = new Symbol(0);\n\n              for (var x in denominators) {\n                t = _.add(t, _.divide(denominators[x], _.parse(x)));\n              }\n\n              symbol = t;\n            }\n          } catch (e2) {}\n\n          ;\n        }\n\n        ;\n        return symbol;\n      }\n    },\n    degree: function degree(symbol, v, o) {\n      o = o || {\n        nd: [],\n        //numeric\n        sd: [],\n        //symbolic\n        depth: 0 //call depth\n\n      };\n\n      if (!v) {\n        var vars = variables(symbol); //The user must specify the variable for multivariate\n\n        if (vars.length > 1) throw new Error('You must specify the variable for multivariate polynomials!'); //if it's empty then we're dealing with a constant\n\n        if (vars.length === 0) return new Symbol(0); //assume the variable for univariate\n\n        v = _.parse(vars[0]);\n      } //store the group\n\n\n      var g = symbol.group; //we're going to trust the user and assume no EX. Calling isPoly \n      //would eliminate this but no sense in checking twice. \n\n      if (symbol.isComposite()) {\n        symbol = symbol.clone();\n        symbol.distributeExponent();\n        symbol.each(function (x) {\n          o.depth++; //mark a depth increase\n\n          __.degree(x, v, o);\n\n          o.depth--; //we're back\n        });\n      } else if (symbol.group === CB) {\n        symbol.each(function (x) {\n          o.depth++;\n\n          __.degree(x, v, o);\n\n          o.depth++;\n        });\n      } else if (g === EX && symbol.value === v.value) {\n        o.sd.push(symbol.power.clone());\n      } else if (g === S && symbol.value === v.value) {\n        o.nd.push(_.parse(symbol.power));\n      } else o.nd.push(new Symbol(0)); //get the max out of the array\n\n\n      var deg = o.nd.length > 0 ? core.Utils.arrayMax(o.nd) : undefined;\n\n      if (o.depth === 0 && o.sd.length > 0) {\n        if (deg !== undefined) o.sd.unshift(deg);\n        return _.symfunction('max', o.sd);\n      }\n\n      if (!core.Utils.isSymbol(deg)) deg = _.parse(deg); //return the degree\n\n      return deg;\n    },\n\n    /**\r\n     * Attempts to complete the square of a polynomial\r\n     * @param {type} symbol\r\n     * @param {type} v\r\n     * @param {type} raw\r\n     * @throws {Error} \r\n     * @returns {Object|Symbol[]}\r\n     */\n    sqComplete: function sqComplete(symbol, v, raw) {\n      if (!core.Utils.isSymbol(v)) v = _.parse(v);\n\n      var stop = function stop(msg) {\n        msg = msg || 'Stopping';\n        throw new core.exceptions.ValueLimitExceededError(msg);\n      }; //if not CP then nothing to do\n\n\n      if (!symbol.isPoly(true)) stop('Must be a polynomial!'); //declare vars\n\n      var deg, a, b, c, d, e, coeffs, sign, br, sym, sqrt_a;\n      br = core.Utils.inBrackets; //make a copy\n\n      symbol = symbol.clone();\n      deg = core.Algebra.degree(symbol, v); //get the degree of polynomial\n      //must be in form ax^2 +/- bx +/- c\n\n      if (!deg.equals(2)) stop('Cannot complete square for degree ' + deg); //get the coeffs\n\n      coeffs = core.Algebra.coeffs(symbol, v);\n      a = coeffs[2]; //store the sign\n\n      sign = coeffs[1].sign(); //divide the linear term by two and square it\n\n      b = _.divide(coeffs[1], new Symbol(2)); //add the difference to the constant\n\n      c = _.pow(b.clone(), new Symbol(2));\n      if (raw) return [a, b, d];\n      sqrt_a = math.sqrt(a);\n      e = _.divide(math.sqrt(c), sqrt_a.clone()); //calculate d which is the constant\n\n      d = _.subtract(coeffs[0], _.pow(e.clone(), new Symbol(2))); //compute the square part\n\n      sym = _.parse(br(sqrt_a.clone() + '*' + v + (sign < 0 ? '-' : '+') + e));\n      return {\n        a: sym,\n        c: d,\n        f: _.add(_.pow(sym.clone(), new Symbol(2)), d.clone())\n      };\n    },\n    Simplify: {\n      strip: function strip(symbol) {\n        var c = _.parse(symbol.multiplier);\n\n        symbol.toUnitMultiplier();\n\n        var p = _.parse(symbol.power);\n\n        symbol.toLinear();\n        return [c, p, symbol];\n      },\n      unstrip: function unstrip(cp, symbol) {\n        var c = cp[0];\n        var p = cp[1];\n        return _.multiply(c, _.pow(symbol, p));\n      },\n      complexSimp: function complexSimp(num, den) {\n        var ac, bd, bc, ad, cd, r1, r2, i1, i2;\n        r1 = num.realpart();\n        i1 = num.imagpart();\n        r2 = den.realpart();\n        i2 = den.imagpart(); //apply complex arithmatic rule\n\n        ac = _.multiply(r1.clone(), r2.clone());\n        bd = _.multiply(i1.clone(), i2.clone());\n        bc = _.multiply(r2.clone(), i1);\n        ad = _.multiply(r1, i2.clone());\n        cd = _.add(_.pow(r2, new Symbol(2)), _.pow(i2, new Symbol(2)));\n        return _.divide(_.add(_.add(ac, bd), _.multiply(_.subtract(bc, ad), Symbol.imaginary())), cd);\n      },\n      trigSimp: function trigSimp(symbol) {\n        if (symbol.containsFunction(['cos', 'sin', 'tan'])) {\n          symbol = symbol.clone(); //remove power and multiplier\n\n          var sym_array = __.Simplify.strip(symbol);\n\n          symbol = sym_array.pop(); //the default return value is the symbol\n\n          var retval = symbol.clone(); //rewrite the symbol\n\n          if (symbol.group === CP) {\n            var sym = new Symbol(0);\n            symbol.each(function (x) {\n              //rewrite the function\n              var tr = __.Simplify.trigSimp(x.fnTransform());\n\n              sym = _.add(sym, tr);\n            }, true); //put back the power and multiplier and return\n\n            retval = _.pow(_.multiply(new Symbol(symbol.multiplier), sym), new Symbol(symbol.power));\n          } else if (symbol.group === CB) {\n            var n = symbol.getNum();\n            var d = symbol.getDenom(); //try for tangent\n\n            if (n.fname === 'sin' && d.fname === 'cos' && n.args[0].equals(d.args[0]) && n.power.equals(d.power)) {\n              retval = _.parse(core.Utils.format('({0})*({1})*tan({2})^({3})', d.multiplier, n.multiplier, n.args[0], n.power));\n            }\n\n            if (retval.group === CB) {\n              var t = new Symbol(1);\n              retval.each(function (x) {\n                if (x.fname === 'tan') {\n                  x = _.parse(core.Utils.format('({0})*sin({1})^({2})/cos({1})^({2})', x.multiplier, __.Simplify.simplify(x.args[0]), x.power));\n                }\n\n                t = _.multiply(t, x);\n              });\n              retval = t;\n            }\n          }\n\n          retval = __.Simplify.unstrip(sym_array, retval).distributeMultiplier();\n          symbol = retval;\n        }\n\n        return symbol;\n      },\n      fracSimp: function fracSimp(symbol) {\n        //try a quick simplify of imaginary numbers\n        var den = symbol.getDenom();\n        var num = symbol.getNum();\n        if (num.isImaginary() && den.isImaginary()) symbol = __.Simplify.complexSimp(num, den);\n\n        if (symbol.isComposite()) {\n          if (symbol.power > 1) {\n            symbol = _.expand(symbol);\n          }\n\n          var symbols = symbol.collectSymbols(); //assumption 1.\n          //since it's a composite, it has a length of at least 1\n\n          var retval, a, b, d1, d2, n1, n2, s, x, y, c, den, num;\n          a = symbols.pop(); //grab the first symbol\n          //loop through each term and make denominator common\n\n          while (symbols.length) {\n            b = symbols.pop(); //grab the second symbol\n\n            d1 = _.parse(a.getDenom());\n            d2 = _.parse(b.getDenom());\n            n1 = a.getNum();\n            n2 = b.getNum();\n            c = _.multiply(d1.clone(), d2.clone());\n            x = _.multiply(n1, d2);\n            y = _.multiply(n2, d1);\n            s = _.add(x, y);\n            a = _.divide(s, c);\n          }\n\n          den = _.expand(a.getDenom());\n          num = _.expand(a.getNum()); //simplify imaginary\n\n          if (num.isImaginary() && den.isImaginary()) {\n            retval = __.Simplify.complexSimp(num, den);\n          } else {\n            retval = _.divide(num, den);\n          } //we've already hit the simplest form so return that\n\n\n          if (retval.equals(symbol)) {\n            return symbol;\n          } //otherwise simplify it some more\n\n\n          return __.Simplify.simplify(retval);\n        }\n\n        return symbol;\n      },\n      ratSimp: function ratSimp(symbol) {\n        if (symbol.group === CB) {\n          var den = symbol.getDenom();\n          var num = symbol.getNum().distributeMultiplier();\n\n          var d = __.Simplify.fracSimp(den);\n\n          var n = __.Simplify.fracSimp(num);\n\n          symbol = _.divide(n, d);\n        }\n\n        return symbol;\n      },\n      sqrtSimp: function sqrtSimp(symbol, sym_array) {\n        var retval;\n\n        if (symbol.isSQRT()) {\n          var factored = __.Factor.factor(symbol.args[0].clone());\n\n          var m = _.parse(factored.multiplier);\n\n          var sign = m.sign();\n\n          var retval = _.sqrt(m.abs());\n\n          var arg;\n\n          if (isInt(retval)) {\n            if (factored.group === CB) {\n              var rem = new Symbol(1);\n              factored.each(function (x) {\n                if (x.group === N) {\n                  var trial = _.sqrt(x.clone()); // Multiply back sqrt if it's an integer otherwise just put back the number\n\n\n                  if (isInt(trial)) {\n                    retval = _.multiply(retval, trial);\n                  } else {\n                    rem = _.multiply(rem, x);\n                  }\n                } else {\n                  rem = _.multiply(rem, x);\n                }\n              });\n\n              var t = _.multiply(rem, _.parse(sign));\n\n              arg = _.sqrt(t.clone()); // Expand if it's imaginary\n\n              if (arg.isImaginary) {\n                arg = _.sqrt(_.expand(t.clone()));\n              }\n            } else {\n              // Strip the multiplier\n              arg = _.sqrt(factored.clone().toUnitMultiplier());\n            }\n\n            return _.multiply(retval, arg);\n          }\n        } else if (symbol.isComposite() && symbol.isLinear()) {\n          retval = new Symbol(0);\n          symbol.each(function (x) {\n            retval = _.add(retval, __.Simplify.sqrtSimp(x));\n          }, true); // Put back the multiplier\n\n          retval = _.multiply(retval, _.parse(symbol.multiplier));\n        } else if (symbol.group === CB) {\n          retval = _.parse(symbol.multiplier);\n          symbol.each(function (x) {\n            var simp = __.Simplify.sqrtSimp(x);\n\n            retval = _.multiply(retval, simp);\n          }, true); // Put back the power\n\n          retval = _.pow(retval, _.parse(symbol.power));\n        }\n\n        return retval ? retval : _.parse(symbol);\n      },\n\n      /**\r\n       * Unused. The goal is to substitute out patterns but it currently doesn't work.\r\n       * @param {Symbol} symbol\r\n       * @return {Array} The symbol and the matched patterns\r\n       */\n      patternSub: function patternSub(symbol) {\n        var patterns = {};\n\n        var has_CP = function has_CP(symbol) {\n          var found = false;\n          symbol.each(function (x) {\n            if (x.group === CP) {\n              found = true;\n            } else if (x.symbols) {\n              found = has_CP(x);\n            }\n          });\n          return found;\n        };\n\n        var collect = function collect(sym) {\n          // We loop through each symbol looking for anything in the simplest\n          // form of ax+byz+...\n          sym.each(function (x) {\n            // Items of group N,P,S, need to apply\n            if (!x.symbols && x.group !== FN) {\n              return;\n            } // Check to see if it has any symbols of group CP\n            // Get the patterns in that symbol instead if it has anything of group CP\n\n\n            if (has_CP(x)) {\n              collect(x);\n            } else {\n              if (!patterns[x.value]) {\n                var u = core.Utils.getU(symbol); // Get a u value and mark it for subsitution\n\n                patterns[x.value] = u;\n                symbol = symbol.sub(x.value, u);\n              }\n            }\n          }, true);\n        }; // Collect a list of patterns\n\n\n        collect(symbol);\n        return [symbol, patterns];\n      },\n      simplify: function simplify(symbol) {\n        //remove the multiplier to make calculation easier;\n        var sym_array = __.Simplify.strip(symbol);\n\n        symbol = sym_array.pop(); //remove gcd from denominator\n\n        symbol = __.Simplify.fracSimp(symbol); //nothing more to do\n\n        if (symbol.isConstant() || symbol.group === core.groups.S) {\n          sym_array.push(symbol);\n\n          var ret = __.Simplify.unstrip(sym_array, symbol);\n\n          return ret;\n        } //var patterns;\n\n\n        var simplified = symbol.clone(); //make a copy\n        //[simplified, patterns] = __.Simplify.patternSub(symbol);\n        // Simplify sqrt within the symbol\n        //                simplified = __.Simplify.sqrtSimp(simplified, sym_array);\n        // Try trig simplificatons e.g. cos(x)^2+sin(x)^2\n\n        simplified = __.Simplify.trigSimp(simplified); // Simplify common denominators\n\n        simplified = __.Simplify.ratSimp(simplified); // First go for the \"cheapest\" simplification which may eliminate \n        // your problems right away. factor -> evaluate. Remember\n        // that there's no need to expand since factor already does that\n\n        simplified = __.Factor.factor(simplified); //If the simplfied is a sum then we can make a few more simplifications\n        //e.g. simplify(1/(x-1)+1/(1-x)) as per issue #431\n\n        if (simplified.group === core.groups.CP && simplified.isLinear()) {\n          var m = simplified.multiplier.clone();\n          simplified.toUnitMultiplier(); //strip the multiplier\n\n          var r = new Symbol(0); //return the sum of simplifications\n\n          simplified.each(function (x) {\n            var s = __.Simplify.simplify(x);\n\n            r = _.add(r, s);\n          });\n          simplified = r; //put back the multiplier\n\n          r.multiplier = r.multiplier.multiply(m);\n        } //place back multiplier and return\n\n\n        var retval = __.Simplify.unstrip(sym_array, simplified); // Back substitute\n\n        /*\r\n         for(var x in patterns) {\r\n         retval = retval.sub(patterns[x], x);\r\n         }\r\n         */\n\n\n        return retval;\n      }\n    },\n    Classes: {\n      Polynomial: Polynomial,\n      Factors: Factors,\n      MVTerm: MVTerm\n    }\n  }; // Add a link to simplify\n\n\n  core.Expression.prototype.simplify = function () {\n    return __.Simplify.simplify(this.symbol);\n  };\n\n  nerdamer.useAlgebraDiv = function () {\n    var divide = __.divideFn = _.divide;\n    var calls = 0; //keep track of how many calls were made\n\n    _.divide = function (a, b) {\n      calls++;\n      var ans;\n      if (calls === 1) //check if this is the first call. If it is use algebra divide\n        ans = core.Algebra.divide(a, b);else //otherwise use parser divide\n        ans = divide(a, b);\n      calls = 0; //reset the number of calls back to none\n\n      return ans;\n    };\n  };\n\n  nerdamer.useParserDiv = function () {\n    if (__.divideFn) _.divide = __.divideFn;\n    delete __.divideFn;\n  };\n\n  nerdamer.register([{\n    name: 'factor',\n    visible: true,\n    numargs: 1,\n    build: function build() {\n      return __.Factor.factor;\n    }\n  }, {\n    name: 'simplify',\n    visible: true,\n    numargs: 1,\n    build: function build() {\n      return __.Simplify.simplify;\n    }\n  }, {\n    name: 'gcd',\n    visible: true,\n    numargs: [1],\n    build: function build() {\n      return __.gcd;\n    }\n  }, {\n    name: 'lcm',\n    visible: true,\n    numargs: [1],\n    build: function build() {\n      return __.lcm;\n    }\n  }, {\n    name: 'roots',\n    visible: true,\n    numargs: -1,\n    build: function build() {\n      return __.roots;\n    }\n  }, {\n    name: 'divide',\n    visible: true,\n    numargs: 2,\n    build: function build() {\n      return __.divide;\n    }\n  }, {\n    name: 'div',\n    visible: true,\n    numargs: 2,\n    build: function build() {\n      return __.div;\n    }\n  }, {\n    name: 'partfrac',\n    visible: true,\n    numargs: [1, 2],\n    build: function build() {\n      return __.PartFrac.partfrac;\n    }\n  }, {\n    name: 'deg',\n    visible: true,\n    numargs: [1, 2],\n    build: function build() {\n      return __.degree;\n    }\n  }, {\n    name: 'coeffs',\n    visible: true,\n    numargs: [1, 2],\n    build: function build() {\n      var f = function f() {\n        var coeffs = __.coeffs.apply(__, arguments);\n\n        return new core.Vector(coeffs);\n      };\n\n      return f;\n    }\n  }, {\n    name: 'line',\n    visible: true,\n    numargs: [2, 3],\n    build: function build() {\n      return __.line;\n    }\n  }, {\n    name: 'sqcomp',\n    visible: true,\n    numargs: [1, 2],\n    build: function build() {\n      var f = function f(x, v) {\n        try {\n          v = v || variables(x)[0];\n\n          var sq = __.sqComplete(x.clone(), v);\n\n          return sq.f;\n        } catch (e) {\n          return x;\n        }\n      };\n\n      return f;\n    }\n  }]);\n  nerdamer.updateAPI();\n})();","/* global module */\n\n/*\r\n * Author : Martin Donk\r\n * Website : http://www.nerdamer.com\r\n * Email : martin.r.donk@gmail.com\r\n * Source : https://github.com/jiggzson/nerdamer\r\n */\nif (typeof module !== 'undefined' && typeof nerdamer === 'undefined') {\n  var nerdamer = require('./nerdamer.core.js');\n\n  require('./Algebra.js');\n}\n\n(function () {\n  \"use strict\";\n\n  var core = nerdamer.getCore(),\n      _ = core.PARSER,\n      Frac = core.Frac,\n      Settings = core.Settings,\n      isSymbol = core.Utils.isSymbol,\n      FN = core.groups.FN,\n      Symbol = core.Symbol,\n      text = core.Utils.text,\n      inBrackets = core.Utils.inBrackets,\n      isInt = core.Utils.isInt,\n      format = core.Utils.format,\n      even = core.Utils.even,\n      evaluate = core.Utils.evaluate,\n      N = core.groups.N,\n      S = core.groups.S,\n      FN = core.groups.FN,\n      PL = core.groups.PL,\n      CP = core.groups.CP,\n      CB = core.groups.CB,\n      EX = core.groups.EX,\n      P = core.groups.P,\n      LOG = Settings.LOG,\n      EXP = 'exp',\n      ABS = 'abs',\n      SQRT = 'sqrt',\n      SIN = 'sin',\n      COS = 'cos',\n      TAN = 'tan',\n      SEC = 'sec',\n      CSC = 'csc',\n      COT = 'cot',\n      ASIN = 'asin',\n      ACOS = 'acos',\n      ATAN = 'atan',\n      ASEC = 'asec',\n      ACSC = 'acsc',\n      ACOT = 'acot',\n      SINH = 'sinh',\n      COSH = 'cosh',\n      TANH = 'tanh',\n      CSCH = 'csch',\n      SECH = 'sech',\n      COTH = 'coth',\n      ASECH = 'asech',\n      ACSCH = 'acsch',\n      ACOTH = 'acoth'; //custom errors\n\n  function NoIntegralFound(msg) {\n    this.message = msg || \"\";\n  }\n\n  NoIntegralFound.prototype = new Error(); //Preparations\n\n  Symbol.prototype.hasIntegral = function () {\n    return this.containsFunction('integrate');\n  }; //transforms a function\n\n\n  Symbol.prototype.fnTransform = function () {\n    if (this.group !== FN) return this;\n    var retval,\n        a = this.args[0];\n    var m = new Symbol(this.multiplier);\n    var sym = this.clone().toUnitMultiplier();\n\n    if (this.isLinear()) {\n      switch (this.fname) {\n        case SINH:\n          retval = _.parse(format('(e^({0})-e^(-({0})))/2', a));\n          break;\n\n        case COSH:\n          retval = _.parse(format('(e^({0})+e^(-({0})))/2', a));\n          break;\n\n        case TANH:\n          retval = _.parse(format('(e^({0})-e^(-({0})))/(e^({0})+e^(-({0})))', a));\n          break;\n\n        case TAN:\n          retval = _.parse(format('sin({0})/cos({0})', a));\n          break;\n\n        case CSC:\n          retval = _.parse(format('1/sin({0})', a));\n          break;\n\n        case SEC:\n          retval = _.parse(format('1/cos({0})', a));\n          break;\n\n        default:\n          retval = sym;\n      }\n    } else if (this.power.equals(2)) {\n      switch (this.fname) {\n        case SIN:\n          retval = _.parse(format('1/2-cos(2*({0}))/2', a));\n          break;\n\n        case COS:\n          retval = _.parse(format('1/2+cos(2*({0}))/2', a));\n          break;\n\n        case TAN:\n          //retval = _.parse(format('(1-cos(2*({0})))/(1+cos(2*({0})))', a));\n          retval = _.parse(format('sin({0})^2/cos({0})^2', a));\n          break;\n\n        case COSH:\n          retval = _.parse(format('1/2+cosh(2*({0}))/2', a));\n          break;\n\n        case SINH:\n          retval = _.parse(format('-1/2+cosh(2*({0}))/2', a));\n          break;\n\n        case TANH:\n          retval = _.parse(format('(1+cosh(2*({0})))/(-1+cosh(2*({0})))', a));\n          break;\n\n        case SEC:\n          retval = _.parse(format('(1-cos(2*({0})))/(1+cos(2*({0})))+1', a));\n          break;\n\n        default:\n          retval = sym;\n      }\n    } else if (this.fname === SEC) {\n      retval = _.parse(format('1/cos({0})^({1})', this.args[0], this.power));\n    } else if (this.fname === CSC) {\n      retval = _.parse(format('1/sin({0})^({1})', this.args[0], this.power));\n    } else if (this.fname === TAN) {\n      if (this.power.lessThan(0)) {\n        retval = _.parse(format('cos({0})^(-({1}))/sin({0})^({1})', this.args[0], this.power.negate()));\n      } else {\n        retval = _.parse(format('sin({0})^({1})/cos({0})^({1})', this.args[0], this.power));\n      }\n    } else if (this.fname === SIN && this.power.lessThan(0)) {\n      retval = _.parse(format('csc({0})^(-({1}))', this.args[0], this.power.negate()));\n    } else if (this.fname === COS && this.power.lessThan(0)) {\n      retval = _.parse(format('sec({0})^(-({1}))', this.args[0], this.power.negate()));\n    } else if (this.fname === SIN && this.power.equals(3)) {\n      retval = _.parse(format('(3*sin({0})-sin(3*({0})))/4', this.args[0]));\n    } else if (this.fname === COS && this.power.equals(3)) {\n      retval = _.parse(format('(cos(3*({0}))+3*cos({0}))/4', this.args[0]));\n    } //cos(a*x)^(2*n) or sin(a*x)^(2*n)\n    else if ((this.fname === COS || this.fname === SIN) && even(this.power)) {\n      var n = this.power / 2; //convert to a double angle\n\n      var double_angle = _.pow(this.clone().toLinear(), _.parse(2)).fnTransform(); //raise to the n and expand\n\n\n      var transformed = _.expand(_.pow(double_angle, _.parse(n)));\n\n      retval = new Symbol(0);\n      transformed.each(function (s) {\n        var t = s.fnTransform();\n        retval = _.add(retval, t);\n      }, true);\n    } else retval = sym;\n\n    return _.multiply(retval, m);\n  };\n\n  Symbol.prototype.hasTrig = function () {\n    if (this.isConstant(true) || this.group === S) return false;\n    if (this.fname && (core.Utils.in_trig(this.fname) || core.Utils.in_inverse_trig(this.fname))) return true;\n\n    if (this.symbols) {\n      for (var x in this.symbols) {\n        if (this.symbols[x].hasTrig()) return true;\n      }\n    }\n\n    return false;\n  };\n\n  core.Expression.prototype.hasIntegral = function () {\n    return this.symbol.hasIntegral();\n  };\n  /**\r\n   * Attempts to rewrite a symbol under one common denominator\r\n   * @param {Symbol} symbol \r\n   */\n\n\n  core.Utils.toCommonDenominator = function (symbol) {\n    //transform x/a+x -> (ax+x)/a\n    if (symbol.isComposite() && symbol.isLinear()) {\n      var m = new Symbol(symbol.multiplier);\n      var denominator = new Symbol(1);\n      var numerator = new Symbol(0);\n      symbol.each(function (x) {\n        denominator = _.multiply(denominator, x.getDenom());\n      }, true); //remove the denomitor in each term\n\n      symbol.each(function (x) {\n        var num = x.getNum();\n        var den = x.getDenom();\n\n        var factor = _.multiply(num, _.divide(denominator.clone(), den));\n\n        numerator = _.add(numerator, factor);\n      });\n\n      var retval = _.multiply(m, core.Algebra.divide(_.expand(numerator), _.expand(denominator)));\n\n      return retval;\n    }\n\n    return symbol;\n  }; //A function to check if a function name is an inverse trig function\n\n\n  core.Utils.in_inverse_trig = function (x) {\n    var inv_trig_fns = [ASIN, ACOS, ATAN, ACSC, ASEC, ACOT];\n    return inv_trig_fns.indexOf(x) !== -1;\n  }; //A function to check if a function name is a trig function\n\n\n  core.Utils.in_trig = function (x) {\n    var trig_fns = [COS, SIN, TAN, SEC, CSC, COT];\n    return trig_fns.indexOf(x) !== -1;\n  };\n\n  core.Utils.in_htrig = function (x) {\n    var trig_fns = [SINH, COSH, TANH, ACSCH, ASECH, ACOTH];\n    return trig_fns.indexOf(x) !== -1;\n  }; // Matrix functions\n\n\n  core.Matrix.jacobian = function (eqns, vars) {\n    var jacobian = new core.Matrix(); //get the variables if not supplied\n\n    if (!vars) {\n      vars = core.Utils.arrayGetVariables(eqns);\n    }\n\n    vars.forEach(function (v, i) {\n      eqns.forEach(function (eq, j) {\n        var e = core.Calculus.diff(eq.clone(), v);\n        jacobian.set(j, i, e);\n      });\n    });\n    return jacobian;\n  };\n\n  core.Matrix.prototype.max = function () {\n    var max = new Symbol(0);\n    this.each(function (x) {\n      var e = x.abs();\n      if (e.gt(max)) max = e;\n    });\n    return max;\n  };\n\n  core.Matrix.cMatrix = function (value, vars) {\n    var m = new core.Matrix(); //make an initial guess\n\n    vars.forEach(function (v, i) {\n      m.set(i, 0, _.parse(value));\n    });\n    return m;\n  };\n\n  var all_functions = core.Utils.all_functions = function (arr) {\n    for (var i = 0, l = arr.length; i < l; i++) {\n      if (arr[i].group !== FN) return false;\n    }\n\n    return true;\n  },\n      cosAsinBtransform = core.Utils.cosAsinBtranform = function (symbol1, symbol2) {\n    var a, b;\n    a = symbol1.args[0];\n    b = symbol2.args[0];\n    return _.parse(format('(sin(({0})+({1}))-sin(({0})-({1})))/2', a, b));\n  },\n      cosAsinAtransform = core.Utils.cosAsinAtranform = function (symbol1, symbol2) {\n    //TODO: temporary fix for integrate(e^x*sin(x)*cos(x)^2).\n    //we technically know how to do this transform but more is needed for correct output\n    if (Number(symbol2.power) !== 1) return _.multiply(symbol1, symbol2);\n    var a;\n    a = symbol1.args[0];\n    return _.parse(format('(sin(2*({0})))/2', a));\n  },\n      sinAsinBtransform = core.Utils.cosAsinBtranform = function (symbol1, symbol2) {\n    var a, b;\n    a = symbol1.args[0];\n    b = symbol2.args[0];\n    return _.parse(format('(cos(({0})+({1}))-cos(({0})-({1})))/2', a, b));\n  },\n      trigTransform = core.Utils.trigTransform = function (arr) {\n    var map = {},\n        symbol,\n        t,\n        retval = new Symbol(1);\n\n    for (var i = 0, l = arr.length; i < l; i++) {\n      symbol = arr[i];\n\n      if (symbol.group === FN) {\n        var fname = symbol.fname;\n\n        if (fname === COS && map[SIN]) {\n          if (map[SIN].args[0].toString() !== symbol.args[0].toString()) {\n            t = cosAsinBtransform(symbol, map[SIN]);\n          } else {\n            t = cosAsinAtransform(symbol, map[SIN]);\n          }\n\n          delete map[SIN];\n          retval = _.multiply(retval, t);\n        } else if (fname === SIN && map[COS]) {\n          if (map[COS].args[0].toString() !== symbol.args[0].toString()) {\n            t = cosAsinBtransform(symbol, map[COS]);\n          } else {\n            t = cosAsinAtransform(symbol, map[COS]);\n          }\n\n          delete map[COS];\n          retval = _.multiply(retval, t);\n        } else if (fname === SIN && map[SIN]) {\n          if (map[SIN].args[0].toString() !== symbol.args[0].toString()) {\n            t = sinAsinBtransform(symbol, map[SIN]);\n            delete map[SIN];\n          } else {\n            //This should actually be redundant code but let's put just in case\n            t = _.multiply(symbol, map[SIN]);\n            delete map[SIN];\n          }\n\n          retval = t;\n        } else {\n          map[fname] = symbol;\n        }\n      } else retval = _.multiply(retval, symbol);\n    } //put back the remaining functions\n\n\n    for (var x in map) {\n      retval = _.multiply(retval, map[x]);\n    }\n\n    return retval;\n  };\n\n  core.Settings.integration_depth = 10;\n  core.Settings.max_lim_depth = 10;\n\n  var __ = core.Calculus = {\n    version: '1.4.6',\n    sum: function sum(fn, index, start, end) {\n      if (!(index.group === core.groups.S)) throw new core.exceptions.NerdamerTypeError('Index must be symbol. ' + text(index) + ' provided');\n      index = index.value;\n      var retval;\n\n      if (core.Utils.isNumericSymbol(start) && core.Utils.isNumericSymbol(end)) {\n        var modifier = end - start < 200 ? '' : 'PARSE2NUMBER';\n        start = Number(start);\n        end = Number(end);\n        retval = core.Utils.block(modifier, function () {\n          var f = fn.text(),\n              subs = {\n            '~': true\n          },\n              //lock subs. Is this even being used?\n          retval = new core.Symbol(0);\n\n          for (var i = start; i <= end; i++) {\n            subs[index] = new Symbol(i);\n\n            var ans = _.parse(f, subs);\n\n            retval = _.add(retval, ans);\n          }\n\n          return retval;\n        });\n      } else {\n        retval = _.symfunction('sum', arguments);\n      }\n\n      return retval;\n    },\n    product: function product(fn, index, start, end) {\n      if (!(index.group === core.groups.S)) throw new core.exceptions.NerdamerTypeError('Index must be symbol. ' + text(index) + ' provided');\n      index = index.value;\n      var retval;\n\n      if (core.Utils.isNumericSymbol(start) && core.Utils.isNumericSymbol(end)) {\n        var modifier = end - start < 200 ? '' : 'PARSE2NUMBER';\n        retval = core.Utils.block(modifier, function () {\n          start = Number(start);\n          end = Number(end.multiplier);\n          var f = fn.text(),\n              subs = {},\n              retval = new core.Symbol(1);\n\n          for (var i = start; i <= end; i++) {\n            subs[index] = new Symbol(i);\n            retval = _.multiply(retval, _.parse(f, subs));\n          }\n\n          return retval;\n        });\n      } else {\n        retval = _.symfunction('product', arguments);\n      }\n\n      return retval;\n    },\n    diff: function diff(symbol, wrt, nth) {\n      if (core.Utils.isVector(symbol)) {\n        var vector = new core.Vector([]);\n        symbol.each(function (x) {\n          vector.elements.push(__.diff(x, wrt, nth));\n        });\n        return vector;\n      } else if (core.Utils.isMatrix(symbol)) {\n        var matrix = new core.Matrix();\n        symbol.each(function (x, i, j) {\n          matrix.set(i, j, __.diff(x, wrt, nth));\n        });\n        return matrix;\n      }\n\n      var d = isSymbol(wrt) ? wrt.text() : wrt; //the nth derivative\n\n      nth = isSymbol(nth) ? nth.multiplier : nth || 1;\n      if (d === undefined) d = core.Utils.variables(symbol)[0]; //unwrap sqrt\n\n      if (symbol.group === FN && symbol.fname === SQRT) {\n        var s = symbol.args[0],\n            sp = symbol.power.clone(); //these groups go to zero anyway so why waste time?\n\n        if (s.group !== N || s.group !== P) {\n          s.power = isSymbol(s.power) ? _.multiply(s.power, _.multiply(new Symbol(1 / 2)), sp) : s.power.multiply(new Frac(0.5)).multiply(sp);\n          s.multiplier = s.multiplier.multiply(symbol.multiplier);\n        }\n\n        symbol = s;\n      }\n\n      if (symbol.group === FN && !isSymbol(symbol.power)) {\n        var a = derive(_.parse(symbol));\n\n        var b = __.diff(symbol.args[0].clone(), d);\n\n        symbol = _.multiply(a, b); //chain rule\n      } else {\n        symbol = derive(symbol);\n      }\n\n      if (nth > 1) {\n        nth--;\n        symbol = __.diff(symbol, wrt, nth);\n      }\n\n      return symbol; // Equivalent to \"derivative of the outside\".\n\n      function polydiff(symbol) {\n        if (symbol.value === d || symbol.contains(d, true)) {\n          symbol.multiplier = symbol.multiplier.multiply(symbol.power);\n          symbol.power = symbol.power.subtract(new Frac(1));\n\n          if (symbol.power.equals(0)) {\n            symbol = Symbol(symbol.multiplier);\n          }\n        }\n\n        return symbol;\n      }\n\n      function derive(symbol) {\n        var g = symbol.group,\n            a,\n            b,\n            cp;\n\n        if (g === N || g === S && symbol.value !== d || g === P) {\n          symbol = Symbol(0);\n        } else if (g === S) {\n          symbol = polydiff(symbol);\n        } else if (g === CB) {\n          var m = symbol.multiplier.clone();\n          symbol.toUnitMultiplier();\n\n          var retval = _.multiply(product_rule(symbol), polydiff(symbol));\n\n          retval.multiplier = retval.multiplier.multiply(m);\n          return retval;\n        } else if (g === FN && symbol.power.equals(1)) {\n          // Table of known derivatives\n          switch (symbol.fname) {\n            case LOG:\n              cp = symbol.clone();\n              symbol = symbol.args[0].clone(); //get the arguments\n\n              symbol.power = symbol.power.negate();\n              symbol.multiplier = cp.multiplier.divide(symbol.multiplier);\n              break;\n\n            case COS:\n              //cos -> -sin\n              symbol.fname = SIN;\n              symbol.multiplier.negate();\n              break;\n\n            case SIN:\n              //sin -> cos\n              symbol.fname = COS;\n              break;\n\n            case TAN:\n              //tan -> sec^2\n              symbol.fname = SEC;\n              symbol.power = new Frac(2);\n              break;\n\n            case SEC:\n              // Use a clone if this gives errors\n              symbol = qdiff(symbol, TAN);\n              break;\n\n            case CSC:\n              symbol = qdiff(symbol, '-cot');\n              break;\n\n            case COT:\n              symbol.fname = CSC;\n              symbol.multiplier.negate();\n              symbol.power = new Frac(2);\n              break;\n\n            case ASIN:\n              symbol = _.parse('(sqrt(1-(' + text(symbol.args[0]) + ')^2))^(-1)');\n              break;\n\n            case ACOS:\n              symbol = _.parse('-(sqrt(1-(' + text(symbol.args[0]) + ')^2))^(-1)');\n              break;\n\n            case ATAN:\n              symbol = _.parse('(1+(' + text(symbol.args[0]) + ')^2)^(-1)');\n              break;\n\n            case ABS:\n              m = symbol.multiplier.clone();\n              symbol.toUnitMultiplier(); //depending on the complexity of the symbol it's easier to just parse it into a new symbol\n              //this should really be readdressed soon\n\n              b = symbol.args[0].clone();\n              b.toUnitMultiplier();\n              symbol = _.parse(inBrackets(text(symbol.args[0])) + '/abs' + inBrackets(text(b)));\n              symbol.multiplier = m;\n              break;\n\n            case 'parens':\n              //see product rule: f'.g goes to zero since f' will return zero. This way we only get back\n              //1*g'\n              symbol = Symbol(1);\n              break;\n\n            case 'cosh':\n              //cosh -> -sinh\n              symbol.fname = 'sinh';\n              break;\n\n            case 'sinh':\n              //sinh -> cosh\n              symbol.fname = 'cosh';\n              break;\n\n            case TANH:\n              //tanh -> sech^2\n              symbol.fname = SECH;\n              symbol.power = new Frac(2);\n              break;\n\n            case SECH:\n              // Use a clone if this gives errors\n              symbol = qdiff(symbol, '-tanh');\n              break;\n\n            case CSCH:\n              var arg = String(symbol.args[0]);\n              return _.parse('-coth(' + arg + ')*csch(' + arg + ')');\n              break;\n\n            case COTH:\n              var arg = String(symbol.args[0]);\n              return _.parse('-csch(' + arg + ')^2');\n              break;\n\n            case 'asinh':\n              symbol = _.parse('(sqrt(1+(' + text(symbol.args[0]) + ')^2))^(-1)');\n              break;\n\n            case 'acosh':\n              symbol = _.parse('(sqrt(-1+(' + text(symbol.args[0]) + ')^2))^(-1)');\n              break;\n\n            case 'atanh':\n              symbol = _.parse('(1-(' + text(symbol.args[0]) + ')^2)^(-1)');\n              break;\n\n            case ASECH:\n              var arg = String(symbol.args[0]);\n              symbol = _.parse('-1/(sqrt(1/(' + arg + ')^2-1)*(' + arg + ')^2)');\n              break;\n\n            case ACOTH:\n              symbol = _.parse('-1/((' + symbol.args[0] + ')^2-1)');\n              break;\n\n            case ACSCH:\n              var arg = String(symbol.args[0]);\n              symbol = _.parse('-1/(sqrt(1/(' + arg + ')^2+1)*(' + arg + ')^2)');\n              break;\n\n            case ASEC:\n              var arg = String(symbol.args[0]);\n              symbol = _.parse('1/(sqrt(1-1/(' + arg + ')^2)*(' + arg + ')^2)');\n              break;\n\n            case ACSC:\n              var arg = String(symbol.args[0]);\n              symbol = _.parse('-1/(sqrt(1-1/(' + arg + ')^2)*(' + arg + ')^2)');\n              break;\n\n            case ACOT:\n              symbol = _.parse('-1/((' + symbol.args[0] + ')^2+1)');\n              break;\n\n            case 'S':\n              var arg = String(symbol.args[0]);\n              symbol = _.parse('sin((pi*(' + arg + ')^2)/2)');\n              break;\n\n            case 'C':\n              var arg = String(symbol.args[0]);\n              symbol = _.parse('cos((pi*(' + arg + ')^2)/2)');\n              break;\n\n            case 'Si':\n              var arg = symbol.args[0];\n              symbol = _.parse('sin(' + arg + ')/(' + arg + ')');\n              break;\n\n            case 'Shi':\n              var arg = symbol.args[0];\n              symbol = _.parse('sinh(' + arg + ')/(' + arg + ')');\n              break;\n\n            case 'Ci':\n              var arg = symbol.args[0];\n              symbol = _.parse('cos(' + arg + ')/(' + arg + ')');\n              break;\n\n            case 'Chi':\n              var arg = symbol.args[0];\n              symbol = _.parse('cosh(' + arg + ')/(' + arg + ')');\n              break;\n\n            case 'Ei':\n              var arg = symbol.args[0];\n              symbol = _.parse('e^(' + arg + ')/(' + arg + ')');\n              break;\n\n            case 'Li':\n              var arg = symbol.args[0];\n              symbol = _.parse('1/' + Settings.LOG + '(' + arg + ')');\n              break;\n\n            case 'erf':\n              symbol = _.parse('(2*e^(-(' + symbol.args[0] + ')^2))/sqrt(pi)');\n              break;\n\n            case 'atan2':\n              var x_ = String(symbol.args[0]),\n                  y_ = String(symbol.args[1]);\n              symbol = _.parse('(' + y_ + ')/((' + y_ + ')^2+(' + x_ + ')^2)');\n              break;\n\n            case 'sign':\n              symbol = new Symbol(0);\n              break;\n\n            case 'sinc':\n              symbol = _.parse(format('(({0})*cos({0})-sin({0}))*({0})^(-2)', symbol.args[0]));\n              break;\n\n            case Settings.LOG10:\n              symbol = _.parse('1/((' + symbol.args[0] + ')*' + Settings.LOG + '(10))');\n              break;\n\n            default:\n              symbol = _.symfunction('diff', [symbol, wrt]);\n          }\n        } else if (g === EX || g === FN && isSymbol(symbol.power)) {\n          var value;\n\n          if (g === EX) {\n            value = symbol.value;\n          } else if (g === FN && symbol.contains(d)) {\n            value = symbol.fname + inBrackets(text(symbol.args[0]));\n          } else {\n            value = symbol.value + inBrackets(text(symbol.args[0]));\n          }\n\n          a = _.multiply(_.parse(LOG + inBrackets(value)), symbol.power.clone());\n          b = __.diff(_.multiply(_.parse(LOG + inBrackets(value)), symbol.power.clone()), d);\n          symbol = _.multiply(symbol, b);\n        } else if (g === FN && !symbol.power.equals(1)) {\n          b = symbol.clone();\n          b.toLinear();\n          b.toUnitMultiplier();\n          symbol = _.multiply(polydiff(symbol.clone()), derive(b));\n        } else if (g === CP || g === PL) {\n          // Note: Do not use `parse` since this puts back the sqrt and causes a bug as in #610. Use clone.\n          var c = symbol.clone();\n          var result = new Symbol(0);\n\n          for (var x in symbol.symbols) {\n            result = _.add(result, __.diff(symbol.symbols[x].clone(), d));\n          }\n\n          symbol = _.multiply(polydiff(c), result);\n        }\n\n        symbol.updateHash();\n        return symbol;\n      }\n\n      ;\n\n      function qdiff(symbol, val, altVal) {\n        return _.multiply(symbol, _.parse(val + inBrackets(altVal || text(symbol.args[0]))));\n      }\n\n      ;\n\n      function product_rule(symbol) {\n        //grab all the symbols within the CB symbol\n        var symbols = symbol.collectSymbols(),\n            result = new Symbol(0),\n            l = symbols.length; //loop over all the symbols\n\n        for (var i = 0; i < l; i++) {\n          var df = __.diff(symbols[i].clone(), d);\n\n          for (var j = 0; j < l; j++) {\n            //skip the symbol of which we just pulled the derivative\n            if (i !== j) {\n              //multiply out the remaining symbols\n              df = _.multiply(df, symbols[j].clone());\n            }\n          } //add the derivative to the result\n\n\n          result = _.add(result, df);\n        }\n\n        return result; //done\n      }\n\n      ;\n    },\n    integration: {\n      u_substitution: function u_substitution(symbols, dx) {\n        function try_combo(a, b, f) {\n          var d = __.diff(b, dx);\n\n          var q = f ? f(a, b) : _.divide(a.clone(), d);\n          if (!q.contains(dx, true)) return q;\n          return null;\n        }\n\n        function do_fn_sub(fname, arg) {\n          var subbed = __.integrate(_.symfunction(fname, [new Symbol(u)]), u, 0);\n\n          subbed = subbed.sub(new Symbol(u), arg);\n          subbed.updateHash();\n          return subbed;\n        }\n\n        var a = symbols[0].clone(),\n            b = symbols[1].clone(),\n            g1 = a.group,\n            g2 = b.group,\n            //may cause problems if person is using this already. Will need\n        //to find algorithm for detecting conflict\n        u = '__u__',\n            Q;\n\n        if (g1 === FN && g2 !== FN) {\n          //e.g. 2*x*cos(x^2)\n          var arg = a.args[0];\n          Q = try_combo(b, arg.clone());\n          if (Q) return _.multiply(Q, do_fn_sub(a.fname, arg));\n          Q = try_combo(b, a);\n\n          if (Q) {\n            return __.integration.poly_integrate(a);\n          }\n        } else if (g2 === FN && g1 !== FN) {\n          //e.g. 2*(x+1)*cos((x+1)^2\n          var arg = b.args[0];\n          Q = try_combo(a, arg.clone());\n          if (Q) return _.multiply(Q, do_fn_sub(b.fname, arg));\n        } else if (g1 === FN && g2 === FN) {\n          Q = try_combo(a.clone(), b.clone());\n          if (Q) return _.multiply(__.integration.poly_integrate(b), Q);\n          Q = try_combo(b.clone(), a.clone());\n          if (Q) return _.multiply(__.integration.poly_integrate(b), Q);\n        } else if (g1 === EX && g2 !== EX) {\n          var p = a.power;\n          Q = try_combo(b, p.clone());\n\n          if (!Q) {\n            //one more try\n            var dc = __.integration.decompose_arg(p.clone(), dx); //consider the possibility of a^x^(n-1)*x^n dx\n\n\n            var xp = __.diff(dc[2].clone(), dx);\n\n            var dc2 = __.integration.decompose_arg(xp.clone(), dx); //if their powers equal, so if dx*p == b\n\n\n            if (_.multiply(dc[1], dc2[1]).power.equals(b.power)) {\n              var m = _.divide(dc[0].clone(), dc2[0].clone());\n\n              var new_val = _.multiply(m.clone(), _.pow(new Symbol(a.value), _.multiply(dc[0], new Symbol(u))));\n\n              new_val = _.multiply(new_val, new Symbol(u));\n              return __.integration.by_parts(new_val, u, 0, {}).sub(u, dc[1].clone());\n            }\n          }\n\n          var integrated = __.integrate(a.sub(p.clone(), new Symbol(u)), u, 0),\n              retval = _.multiply(integrated.sub(new Symbol(u), p), Q);\n\n          return retval;\n        } else if (g2 === EX && g1 !== EX) {\n          var p = b.power;\n          Q = try_combo(a, p.clone());\n\n          var integrated = __.integrate(b.sub(p, new Symbol(u)), u, 0);\n\n          return _.multiply(integrated.sub(new Symbol(u), p), Q);\n        } else if (a.isComposite() || b.isComposite()) {\n          var f = function f(a, b) {\n            var d = __.diff(b, dx);\n\n            var A = core.Algebra.Factor.factor(a),\n                B = core.Algebra.Factor.factor(d);\n\n            var q = _.divide(A, B);\n\n            return q;\n          };\n\n          var f1 = a.isComposite() ? a.clone().toLinear() : a.clone(),\n              f2 = b.isComposite() ? b.clone().toLinear() : b.clone();\n          Q = try_combo(f1.clone(), f2.clone(), f);\n          if (Q) return _.multiply(__.integration.poly_integrate(b), Q);\n          Q = try_combo(f2.clone(), f1.clone(), f);\n          if (Q) return _.multiply(__.integration.poly_integrate(a), Q);\n        }\n      },\n      //simple integration of a single polynomial x^(n+1)/(n+1)\n      poly_integrate: function poly_integrate(x) {\n        var p = x.power.toString(),\n            m = x.multiplier.toDecimal(),\n            s = x.toUnitMultiplier().toLinear();\n\n        if (Number(p) === -1) {\n          return _.multiply(new Symbol(m), _.symfunction(LOG, [s]));\n        }\n\n        return _.parse(format('({0})*({1})^(({2})+1)/(({2})+1)', m, s, p));\n      },\n      //If we're just spinning wheels we want to stop. This is why we \n      //wrap integration in a try catch block and call this to stop.\n      stop: function stop(msg) {\n        msg = msg || 'Unable to compute integral!';\n        core.Utils.warn(msg);\n        throw new NoIntegralFound(msg);\n      },\n      partial_fraction: function partial_fraction(input, dx, depth, opt) {\n        //TODO: This whole thing needs to be rolled into one but for now I'll leave it as two separate parts\n        if (!isSymbol(dx)) dx = _.parse(dx);\n        var result, partial_fractions;\n        result = new Symbol(0);\n        partial_fractions = core.Algebra.PartFrac.partfrac(input, dx);\n\n        if (partial_fractions.group === CB && partial_fractions.isLinear()) {\n          //perform a quick check to make sure that all partial fractions are linear\n          partial_fractions.each(function (x) {\n            if (!x.isLinear()) __.integration.stop();\n          });\n          partial_fractions.each(function (x) {\n            result = _.add(result, __.integrate(x, dx, depth, opt));\n          });\n        } else {\n          result = _.add(result, __.integrate(partial_fractions, dx, depth, opt));\n        }\n\n        return result;\n      },\n      get_udv: function get_udv(symbol) {\n        var parts = [[\n          /*L*/\n        ], [\n          /*I*/\n        ], [\n          /*A*/\n        ], [\n          /*T*/\n        ], [\n          /*E*/\n        ]]; //first we sort them \n\n        var setSymbol = function setSymbol(x) {\n          var g = x.group;\n\n          if (g === FN) {\n            var fname = x.fname;\n            if (core.Utils.in_trig(fname) || core.Utils.in_htrig(fname)) parts[3].push(x);else if (core.Utils.in_inverse_trig(fname)) parts[1].push(x);else if (fname === LOG) parts[0].push(x);else {\n              __.integration.stop();\n            }\n          } else if (g === S || x.isComposite() && x.isLinear() || g === CB && x.isLinear()) {\n            parts[2].push(x);\n          } else if (g === EX || x.isComposite() && !x.isLinear()) parts[4].push(x);else __.integration.stop();\n        };\n\n        if (symbol.group === CB) symbol.each(function (x) {\n          setSymbol(Symbol.unwrapSQRT(x, true));\n        });else setSymbol(symbol);\n        var u,\n            dv = new Symbol(1); //compile u and dv\n\n        for (var i = 0; i < 5; i++) {\n          var part = parts[i],\n              t,\n              l = part.length;\n\n          if (l > 0) {\n            if (l > 1) {\n              t = new Symbol(1);\n\n              for (var j = 0; j < l; j++) {\n                t = _.multiply(t, part[j].clone());\n              }\n            } else t = part[0].clone();\n\n            if (!u) {\n              u = t; //the first u encountered gets chosen\n\n              u.multiplier = u.multiplier.multiply(symbol.multiplier); //the first one gets the mutliplier\n            } else dv = _.multiply(dv, t); //everything else belongs to dv\n\n          }\n        }\n\n        return [u, dv];\n      },\n      trig_sub: function trig_sub(symbol, dx, depth, opt, parts, symbols) {\n        parts = parts || __.integration.decompose_arg(symbol.clone().toLinear(), dx);\n        var b = parts[3],\n            ax = parts[2],\n            a = parts[0],\n            x = parts[1];\n\n        if (x.power.equals(2) && a.greaterThan(0)) {\n          //use tan(x)\n          var t = core.Utils.getU(symbol),\n              //get an appropriate u\n          u = _.parse(TAN + inBrackets(t)),\n              //u\n          du = _.parse(SEC + inBrackets(t) + '^2'),\n              //du\n          f = _.multiply(symbol.sub(x, u), du);\n\n          var integral = __.integrate(f, t, depth, opt).sub(u, x);\n\n          core.Utils.clearU(u);\n          return integral;\n        }\n      },\n      by_parts: function by_parts(symbol, dx, depth, o) {\n        o.previous = o.previous || [];\n        var udv, u, dv, du, v, vdu, uv, retval, integral_vdu, m, c, vdu_s; //first LIATE\n\n        udv = __.integration.get_udv(symbol);\n        u = udv[0];\n        dv = udv[1];\n        du = Symbol.unwrapSQRT(_.expand(__.diff(u.clone(), dx)), true);\n        c = du.clone().stripVar(dx); //strip any coefficients\n\n        du = _.divide(du, c.clone());\n        v = __.integrate(dv.clone(), dx, depth || 0);\n        vdu = _.multiply(v.clone(), du);\n        vdu_s = vdu.toString(); //currently only supports e^x*(some trig)\n\n        if (o.previous.indexOf(vdu_s) !== -1 && core.Utils.in_trig(u.fname) && dv.isE()) {\n          //We're going to exploit the fact that vdu can never be constant\n          //to work out way out of this cycle. We'll return the length of\n          //the this.previous array until we're back at level one\n          o.is_cyclic = true; //return the integral. \n\n          return new Symbol(1);\n        } else o.previous.push(vdu_s);\n\n        uv = _.multiply(u, v); //clear the multiplier so we're dealing with a bare integral\n\n        m = vdu.multiplier.clone();\n        vdu.toUnitMultiplier();\n        integral_vdu = _.multiply(__.integrate(vdu.clone(), dx, depth, o), c);\n        integral_vdu.multiplier = integral_vdu.multiplier.multiply(m);\n        retval = _.subtract(uv, integral_vdu); //we know that there cannot be constants so they're a holdover from a cyclic integral\n\n        if (o.is_cyclic) {\n          //start popping the previous stack so we know how deep in we are\n          o.previous.pop();\n\n          if (o.previous.length === 0) {\n            retval = _.expand(retval);\n            var rem = new Symbol(0);\n            retval.each(function (x) {\n              if (!x.contains(dx)) rem = _.add(rem, x.clone());\n            }); //get the actual uv\n\n            retval = _.divide(_.subtract(retval, rem.clone()), _.subtract(new Symbol(1), rem));\n          }\n        }\n\n        return retval;\n      },\n\n      /*\r\n       * dependents: [Solve, integrate]\r\n       */\n      decompose_arg: core.Utils.decompose_fn\n    },\n    //TODO: nerdamer.integrate('-e^(-a*t)*sin(t)', 't') -> gives incorrect output\n    integrate: function integrate(original_symbol, dt, depth, opt) {\n      //assume integration wrt independent variable if expression only has one variable\n      if (!dt) {\n        var vars = core.Utils.variables(original_symbol);\n        if (vars.length === 1) dt = vars[0]; //defaults to x\n\n        dt = dt || 'x';\n      } //add support for integrating vectors\n\n\n      if (core.Utils.isVector(original_symbol)) {\n        var vector = new core.Vector([]);\n        original_symbol.each(function (x) {\n          vector.elements.push(__.integrate(x, dt));\n        });\n        return vector;\n      }\n\n      if (!isNaN(dt)) _.error('variable expected but received ' + dt); //get rid of constants right away\n\n      if (original_symbol.isConstant(true)) return _.multiply(original_symbol.clone(), _.parse(dt)); //configurations options for integral. This is needed for tracking extra options\n      //e.g. cyclic integrals or additional settings\n\n      opt = opt || {};\n      return core.Utils.block('PARSE2NUMBER', function () {\n        //make a note of the original symbol. Set only if undefined\n        depth = depth || 0;\n        var dx = isSymbol(dt) ? dt.toString() : dt,\n            //we don't want the symbol in sqrt form. x^(1/2) is prefererred\n        symbol = Symbol.unwrapSQRT(original_symbol.clone(), true),\n            g = symbol.group,\n            retval;\n\n        try {\n          //We stop integration after x amount of recursive calls\n          if (++depth > core.Settings.integration_depth) __.integration.stop('Maximum depth reached. Exiting!'); //constants. We first eliminate anything that doesn't have dx. Everything after this has \n          //to have dx or else it would have been taken care of below\n\n          if (!symbol.contains(dx, true)) {\n            retval = _.multiply(symbol.clone(), _.parse(dx));\n          } //e.g. 2*x\n          else if (g === S) {\n            retval = __.integration.poly_integrate(symbol, dx, depth);\n          } else if (g === EX) {\n            if (symbol.previousGroup === FN && !(symbol.fname === 'sqrt' || symbol.fname === Settings.PARENTHESIS)) __.integration.stop(); //check the base\n\n            if (symbol.contains(dx) && symbol.previousGroup !== FN) {\n              //if the symbol also contains dx then we stop since we currently \n              //don't know what to do with it e.g. x^x\n              if (symbol.power.contains(dx)) __.integration.stop();else {\n                var t = __.diff(symbol.clone().toLinear(), dx);\n\n                if (t.contains(dx)) __.integration.stop(); //since at this point it's the base only then we do standard single poly integration\n                //e.g. x^y\n\n                retval = __.integration.poly_integrate(symbol, dx, depth);\n              }\n            } //e.g. a^x or 9^x\n            else {\n              var a = __.diff(symbol.power.clone(), dx);\n\n              if (a.contains(dx)) {\n                var aa = a.stripVar(dx),\n                    x = _.divide(a.clone(), aa.clone());\n\n                if (x.group === S && x.isLinear()) {\n                  aa.multiplier = aa.multiplier.divide(new Frac(2));\n                  return _.parse(format('({2})*(sqrt(pi)*erf(sqrt(-{0})*{1}))/(2*sqrt(-{0}))', aa, dx, symbol.multiplier));\n                } else __.integration.stop();\n              }\n\n              if (symbol.isE()) {\n                if (a.isLinear()) retval = symbol;else {\n                  if (a.isE() && a.power.group === S && a.power.power.equals(1)) retval = _.multiply(_.symfunction('Ei', [symbol.power.clone()]), symbol.power);else __.integration.stop();\n                }\n              } else {\n                var d = _.symfunction(LOG, [_.parse(symbol.value)]);\n\n                retval = _.divide(symbol, d);\n              }\n\n              retval = _.divide(retval, a);\n            }\n          } else if (symbol.isComposite() && symbol.isLinear()) {\n            var m = _.parse(symbol.multiplier);\n\n            symbol.toUnitMultiplier();\n            retval = new Symbol(0);\n            symbol.each(function (x) {\n              retval = _.add(retval, __.integrate(x, dx, depth));\n            });\n            retval = _.multiply(m, retval);\n          } else if (g === CP) {\n            if (symbol.power.greaterThan(1)) symbol = _.expand(symbol);\n\n            if (symbol.power.equals(1)) {\n              retval = new Symbol(0);\n              symbol.each(function (x) {\n                retval = _.add(retval, __.integrate(x, dx, depth));\n              }, true);\n            } else {\n              var p = Number(symbol.power),\n                  m = symbol.multiplier.clone(); //temporarily remove the multiplier\n\n              symbol.toUnitMultiplier();\n\n              var //below we consider the form ax+b\n              fn = symbol.clone().toLinear(),\n                  //get just the pure function without the power\n              decomp = __.integration.decompose_arg(fn, dx),\n                  //I have no idea why I used bx+a and not ax+b. TODO change this to something that makes sense\n              b = decomp[3],\n                  ax = decomp[2],\n                  a = decomp[0],\n                  x = decomp[1];\n\n              if (p === -1 && x.group !== PL && x.power.equals(2)) {\n                var b_is_positive = isInt(b) ? b > 0 : true; //we can now check for atan\n\n                if (x.group === S && x.power.equals(2) && b_is_positive) {\n                  ////then we have atan\n                  //abs is redundants since the sign appears in both denom and num.\n                  var unwrapAbs = function unwrapAbs(s) {\n                    var result = new Symbol(1);\n                    s.each(function (x) {\n                      result = _.multiply(result, x.fname === 'abs' ? x.args[0] : x);\n                    });\n                    return result;\n                  };\n\n                  var A = a.clone(),\n                      B = b.clone();\n                  A = _.pow(A, new Symbol(1 / 2));\n                  B = _.pow(B, new Symbol(1 / 2)); //unwrap abs\n\n                  var d = _.multiply(unwrapAbs(B), unwrapAbs(A)),\n                      f = _.symfunction(ATAN, [_.divide(_.multiply(a, x.toLinear()), d.clone())]);\n\n                  retval = _.divide(f, d);\n                } else if (x.group === S && x.isLinear()) {\n                  retval = _.divide(__.integration.poly_integrate(symbol), a);\n                } else {\n                  //1/(x^4+1)\n                  if (x.power.equals(4)) {\n                    //https://www.freemathhelp.com/forum/threads/55678-difficult-integration-int-1-(1-x-4)-dx\n                    var A, B, C, D, E, F, f1, f2, f3, f4, L1, L2;\n                    var br = inBrackets; //apply rule: ax^4+b = (√ax^2+√2∜a∜bx+√b)(√ax^2-√2∜a∜bx+√b)\n                    //get quadratic factors\n\n                    A = _.parse(SQRT + br(a) + '*' + dx + '^2');\n                    B = _.parse(SQRT + br(2) + '*' + br(a) + '^' + br('1/4') + '*' + br(b) + '^' + br('1/4') + '*' + dx);\n                    C = _.parse(SQRT + br(b));\n                    f1 = _.add(_.add(A.clone(), B.clone()), C.clone());\n                    f2 = _.add(_.subtract(A, B), C); //calculate numerators: [D+E, D-E] -> [√2*b^(3/4)+√b∜ax, √2*b^(3/4)-√b∜ax]\n\n                    D = _.parse(SQRT + br(2) + '*' + br(b) + '^' + br('3/4'));\n                    E = _.parse(SQRT + br(b) + '*' + br(b) + '^' + br('1/4') + '*' + dx); //let F = 2b√2∜b\n\n                    F = _.parse(2 + '*' + br(b) + '*' + SQRT + br(2) + '*' + br(b) + '^' + br('1/4')); //calculate the factors\n\n                    L1 = _.divide(_.subtract(D.clone(), E.clone()), _.multiply(F.clone(), f2));\n                    L2 = _.divide(_.add(D, E), _.multiply(F, f1.clone()));\n                    retval = _.add(__.integrate(L1, dx, depth, opt), __.integrate(L2, dx, depth, opt));\n                  } else //let's try partial fractions\n                    retval = __.integration.partial_fraction(symbol, dx, depth);\n                }\n              } else if (p === -1 / 2) {\n                //detect asin and atan\n                if (x.group === S && x.power.equals(2)) {\n                  if (ax.multiplier.lessThan(0) && !b.multiplier.lessThan(0)) {\n                    a.negate(); //it's asin\n\n                    if (b.isConstant() && a.isConstant()) {\n                      var d = _.symfunction(SQRT, [a.clone()]),\n                          d2 = _.symfunction(SQRT, [_.multiply(a.clone(), b)]);\n\n                      retval = _.divide(_.symfunction(ASIN, [_.divide(ax.toLinear(), d2)]), d);\n                    } //I'm not sure about this one. I'm trusting Wolfram Alpha here\n                    else {\n                      var sqrt_a = _.symfunction(SQRT, [a]),\n                          sqrt_ax = _.multiply(sqrt_a.clone(), x.clone().toLinear());\n\n                      retval = _.divide(_.symfunction(ATAN, [_.divide(sqrt_ax, _.symfunction(SQRT, [fn.clone()]))]), sqrt_a);\n                    }\n                  } else {\n                    /*WHAT HAPPENS HERE???? e.g. integrate(3/sqrt(-a+b*x^2),x) or integrate(3/sqrt(a+b*x^2),x)*/\n                    __.integration.stop();\n                  }\n                } else {\n                  //This would be a case like 1/(sqrt(1-x^3) or 1/(1-(x+1)^2)\n                  __.integration.stop();\n                }\n              } else if (p === 1 / 2 && x.power.equals(2) && a.greaterThan(0)) {\n                // TODO: Revisit\n                __.integration.stop();\n              } else {\n                if (x.isLinear() && x.group !== PL) retval = _.divide(__.integration.poly_integrate(symbol), a);else if (x.power.equals(2) && a.greaterThan(0)) {\n                  var sqa, sqb, aob, bsqi, n, integral, u, v, uv; //1/(a*x^2+b^2)^n\n                  //strip the value of b so b = 1\n\n                  sqa = _.parse(SQRT + inBrackets(a)); //strip a so b = 1\n\n                  sqb = _.parse(SQRT + inBrackets(b));\n                  aob = _.multiply(sqa.clone(), sqb.clone()).invert();\n                  bsqi = _.pow(b, new Symbol(symbol.power));\n                  uv = core.Utils.getU(symbol);\n                  u = _.multiply(aob, x.clone().toLinear());\n                  v = _.parse(ATAN + inBrackets(u)); //the conversion will be 1+tan(x)^2 -> sec(x)^2\n                  //since the denominator is now (sec(x)^2)^n and the numerator is sec(x)^2 \n                  //then the remaining sec will be (n-1)*2;\n\n                  var n = (Math.abs(symbol.power) - 1) * 2; //1/sec(x)^n can now be converted to cos(x)^n and we can pull the integral of that\n\n                  var integral = __.integrate(_.parse(COS + inBrackets(uv) + '^' + n));\n\n                  core.Utils.clearU(uv);\n                  return _.multiply(integral.sub(uv, v), bsqi);\n                } else {\n                  if (symbol.group !== CB && !symbol.power.lessThan(0)) {\n                    retval = __.integration.by_parts(symbol, dx, depth, opt);\n                  } else {\n                    var f = symbol.clone().toLinear();\n                    var factored = core.Algebra.Factor.factor(f);\n                    var was_factored = factored.toString() !== f.toString();\n\n                    if (core.Algebra.degree(f, _.parse(dx)).equals(2) && !was_factored) {\n                      try {\n                        var f1, fx, u, sq;\n                        sq = core.Algebra.sqComplete(f, dx);\n                        u = core.Utils.getU(f);\n                        f1 = sq.f.sub(sq.a, u);\n                        fx = _.pow(f1, _.parse(symbol.power));\n                        retval = __.integrate(fx, u).sub(u, sq.a);\n                      } catch (e) {\n                        __.integration.stop();\n                      }\n                    } else retval = __.integration.partial_fraction(symbol, dx, depth, opt);\n                  }\n                }\n              }\n\n              retval.multiplier = retval.multiplier.multiply(m);\n            }\n          } else if (g === FN) {\n            var arg = symbol.args[0],\n                m = symbol.multiplier.clone();\n            symbol.toUnitMultiplier();\n\n            var decomp = __.integration.decompose_arg(arg, dx); //easies way I can think of to get the coefficient and to make sure\n            //that the symbol is linear wrt dx. I'm not actually trying to get the \n            //derivative\n\n\n            var a = decomp[0],\n                x = decomp[1],\n                fname = symbol.fname; //log is a special case that can be handled with integration by parts\n\n            if (fname === LOG || fname === ASIN || fname === ACOS || fname === ATAN && x.isLinear()) {\n              /*integration by parts */\n              var p = symbol.power.toString();\n              if (isInt(p)) depth = depth - p; //it needs more room to find the integral\n\n              if (!arg.isComposite()) retval = _.multiply(_.parse(m), __.integration.by_parts(symbol, dx, depth, opt));else {\n                //integral u du\n                var u = core.Utils.getU(symbol);\n\n                var f = _.pow(_.parse(LOG + inBrackets(u)), new Symbol(p));\n\n                var du = __.diff(arg, dx);\n\n                var u_du = _.multiply(f, du);\n\n                var integral = __.integrate(u_du, u, depth, opt);\n\n                retval = _.multiply(_.parse(m), integral.sub(u, arg));\n              }\n            } else if (fname === TAN && symbol.power.lessThan(0)) {\n              //convert to cotangent\n              var sym = symbol.clone();\n              sym.power.negate();\n              sym.fname = COT;\n              return _.multiply(_.parse(m), __.integrate(sym, dx, depth));\n            } else {\n              if (!a.contains(dx, true) && symbol.isLinear()) {\n                //perform a deep search for safety\n                //first handle the special cases \n                if (fname === ABS) {\n                  //REVISIT **TODO**\n                  var x = _.divide(arg.clone(), a.clone());\n\n                  if (x.group === S && !x.power.lessThan(0)) {\n                    if (core.Utils.even(x.power)) {\n                      retval = __.integrate(arg, dx, depth);\n                    } else {\n                      var integrated = __.integrate(x, dx, depth);\n\n                      integrated.power = integrated.power.subtract(new Frac(1));\n                      retval = _.multiply(_.multiply(_.symfunction(ABS, [x.toLinear()]), integrated), a);\n                    }\n                  } else __.integration.stop();\n                } else {\n                  var ag = symbol.args[0].group,\n                      decomposed = __.integration.decompose_arg(arg, dx);\n\n                  if (!(ag === CP || ag === S || ag === CB) || !decomposed[1].power.equals(1) || arg.hasFunc()) __.integration.stop();\n                  /**TODO**/\n                  //ASIN, ACOS, ATAN\n\n                  switch (fname) {\n                    case COS:\n                      retval = _.symfunction(SIN, [arg]);\n                      break;\n\n                    case SIN:\n                      retval = _.symfunction(COS, [arg]);\n                      retval.negate();\n                      break;\n\n                    case TAN:\n                      retval = _.parse(format(Settings.LOG + '(sec({0}))', arg));\n                      break;\n\n                    case SEC:\n                      retval = _.parse(format(Settings.LOG + '(tan({0})+sec({0}))', arg));\n                      break;\n\n                    case CSC:\n                      retval = _.parse(format('-' + Settings.LOG + '(csc({0})+cot({0}))', arg));\n                      break;\n\n                    case COT:\n                      retval = _.parse(format(Settings.LOG + '(sin({0}))', arg));\n                      break;\n\n                    case SINH:\n                      retval = _.symfunction(COSH, [arg]);\n                      break;\n\n                    case COSH:\n                      retval = _.symfunction(SINH, [arg]);\n                      break;\n\n                    case TANH:\n                      retval = _.parse(format(Settings.LOG + '(cosh({0}))', arg));\n                      break;\n\n                    case ASEC:\n                      retval = __.integration.by_parts(symbol, dx, depth, opt);\n                      break;\n\n                    case ACSC:\n                      retval = __.integration.by_parts(symbol, dx, depth, opt);\n                      break;\n\n                    case ACOT:\n                      retval = __.integration.by_parts(symbol, dx, depth, opt);\n                      break;\n                    //inverse htrig\n\n                    case ASECH:\n                      retval = __.integration.by_parts(symbol, dx, depth, opt);\n                      break;\n\n                    case ACSCH:\n                      retval = __.integration.by_parts(symbol, dx, depth, opt);\n                      break;\n\n                    case ACOTH:\n                      retval = __.integration.by_parts(symbol, dx, depth, opt);\n                      break;\n                    //end inverse htrig\n                    //htrigh\n\n                    case SECH:\n                      retval = _.parse(format('atan(sinh({0}))', arg));\n                      break;\n\n                    case CSCH:\n                      retval = _.parse(format(Settings.LOG + '(tanh(({0})/2))', arg));\n                      break;\n\n                    case COTH:\n                      retval = _.parse(format(Settings.LOG + '(sinh({0}))', arg));\n                      break;\n                    //end htrig\n\n                    case EXP:\n                      retval = __.integrate(_.parse(format('e^({0})', arg)), dx, depth);\n                      break;\n\n                    case 'S':\n                      var arg = symbol.args[0].clone(),\n                          dc = __.integration.decompose_arg(arg, dx),\n                          x_ = dc[1],\n                          a_ = dc[0];\n\n                      var b_ = dc[3];\n                      retval = _.parse(format('(cos((1/2)*pi*(({1})+({0})*({2}))^2)+pi*(({1})+({0})*({2}))*S(({1})+({0})*({2})))/(({0})*pi)', a_, b_, x));\n                      break;\n\n                    case 'C':\n                      var arg = symbol.args[0].clone(),\n                          dc = __.integration.decompose_arg(arg, dx),\n                          x_ = dc[1],\n                          a_ = dc[0];\n\n                      var b_ = dc[3];\n                      retval = _.parse(format('(pi*(({1})+({0})*({2}))*C(({1})+({0})*({2}))-sin((1/2)*pi*(({1})+({0})*({2}))^2))/(({0})*pi)', a_, b_, x_));\n                      break;\n\n                    case 'erf':\n                      var arg = symbol.args[0].clone(),\n                          dc = __.integration.decompose_arg(arg, dx),\n                          x_ = dc[1],\n                          a_ = dc[0];\n\n                      retval = _.parse(format('e^(-(({2}))^2)/(({0})*sqrt(pi))+(1/({0})+({1}))*erf(({2}))', a_, x_, arg));\n                      break;\n\n                    case 'sign':\n                      retval = _.multiply(symbol.clone(), arg.clone());\n                      break;\n\n                    default:\n                      __.integration.stop();\n\n                  }\n\n                  retval = _.divide(retval, a);\n                }\n              } else if (x.isLinear()) {\n                if (fname === COS || fname === SIN) {\n                  var p = Number(symbol.power); //check to see if it's negative and then just transform it to sec or csc\n\n                  if (p < 0) {\n                    symbol.fname = fname === SIN ? CSC : SEC;\n                    symbol.invert().updateHash();\n                    retval = __.integrate(symbol, dx, depth);\n                  } else {\n                    var arg = symbol.args[0],\n                        rd = symbol.clone(),\n                        //cos^(n-1)\n                    rd2 = symbol.clone(),\n                        //cos^(n-2)\n                    q = new Symbol((p - 1) / p),\n                        //\n                    na = _.multiply(a.clone(), new Symbol(p)).invert(); //1/(n*a)\n\n\n                    rd.power = rd.power.subtract(new Frac(1));\n                    rd2.power = rd2.power.subtract(new Frac(2));\n\n                    var t = _.symfunction(fname === COS ? SIN : COS, [arg.clone()]);\n\n                    if (fname === SIN) t.negate();\n                    retval = _.add(_.multiply(_.multiply(na, rd), t), _.multiply(q, __.integrate(_.parse(rd2), dx, depth)));\n                  }\n                } //tan(x)^n or cot(x)^n\n                else if (fname === TAN || fname === COT) {\n                  //http://www.sosmath.com/calculus/integration/moretrigpower/moretrigpower.html\n                  if (symbol.args[0].isLinear(dx)) {\n                    var n = symbol.power.subtract(new Frac(1)).toString(),\n                        r = symbol.clone().toUnitMultiplier(),\n                        w = _.parse(format((fname === COT ? '-' : '') + '1/({2}*{0})*{3}({1})^({0})', n, arg, a, fname));\n\n                    r.power = r.power.subtract(new Frac(2));\n                    if (r.power.equals(0)) r = _.parse(r);\n                    retval = _.subtract(w, __.integrate(r, dx, depth));\n                  }\n                } //sec(x)^n or csc(x)^n\n                else if (fname === SEC || fname === CSC) {\n                  //http://www.sosmath.com/calculus/integration/moretrigpower/moretrigpower.html\n                  var n1 = symbol.power.subtract(new Frac(1)).toString(),\n                      n2 = symbol.power.subtract(new Frac(2)).toString(),\n                      f2 = fname === SEC ? TAN : COT,\n                      r = symbol.clone().toUnitMultiplier(),\n                      parse_str = format((fname === CSC ? '-' : '') + '1/({0}*{1})*{4}({3})^({2})*{5}({3})', a, n1, n2, arg, fname, f2),\n                      w = _.parse(parse_str);\n\n                  r.power = r.power.subtract(new Frac(2));\n                  if (r.power.equals(0)) r = _.parse(r);\n                  retval = _.add(w, _.multiply(new Symbol(n2 / n1), __.integrate(r, dx, depth)));\n                } else if ((fname === COSH || fname === SINH) && symbol.power.equals(2)) {\n                  retval = __.integrate(symbol.fnTransform(), dx, depth);\n                } else __.integration.stop();\n              } else __.integration.stop();\n\n              retval.multiplier = retval.multiplier.multiply(m);\n            }\n          } else if (g === PL) {\n            retval = __.integration.partial_fraction(symbol, dx, depth);\n          } else if (g === CB) {\n            var den = symbol.getDenom();\n            if (den.group === S) symbol = _.expand(symbol); //separate the coefficient since all we care about are symbols containing dx\n\n            var coeff = symbol.stripVar(dx); //now get only those that apply\n\n            var cfsymbol = _.divide(symbol.clone(), coeff.clone()); //a coeff free symbol\n            //peform a correction for stripVar. This is a serious TODO!\n\n\n            if (coeff.contains(dx)) {\n              cfsymbol = _.multiply(cfsymbol, coeff);\n              coeff = new Symbol(1);\n            } //if we only have one symbol left then let's not waste time. Just pull the integral\n            //and let the chips fall where they may\n\n\n            if (cfsymbol.group !== CB) {\n              if (cfsymbol.equals(1)) {\n                return __.integrate(_.expand(symbol), dx, depth);\n              } //only factor for multivariate which are polynomials\n\n\n              if (cfsymbol.clone().toLinear().isPoly(true) && core.Utils.variables(cfsymbol).length > 1) {\n                cfsymbol = core.Algebra.Factor.factor(cfsymbol);\n              }\n\n              retval = __.integrate(cfsymbol, dx, depth);\n            } else {\n              //we collect the symbols and sort them descending group, descending power, descending alpabethically\n              var symbols = cfsymbol.collectSymbols().sort(function (a, b) {\n                if (a.group === b.group) {\n                  if (Number(a.power) === Number(b.power)) if (a < b) return 1; //I want sin first\n                  else return -1;\n                  return b.power - a.power; //descending power\n                }\n\n                return b.group - a.group; //descending groups\n              }).map(function (x) {\n                var unwrapped = Symbol.unwrapSQRT(x, true);\n\n                if (unwrapped.fname === EXP) {\n                  return _.parse(format('({1})*e^({0})', unwrapped.args[0], unwrapped.multiplier));\n                }\n\n                return unwrapped;\n              });\n              var l = symbols.length;\n\n              if (symbol.power < 0) {\n                if (l === 2) {\n                  return __.integrate(_.expand(symbol), dx, depth, opt);\n                }\n              } //otherwise the denominator is one lumped together symbol \n              else {\n                //generate an image for \n                if (l === 2) {\n                  //try u substitution\n                  try {\n                    retval = __.integration.u_substitution(symbols, dx);\n                  } catch (e) {\n                    /* failed :`(*/\n                    ;\n                  }\n\n                  if (!retval) {\n                    //no success with u substitution so let's try known combinations\n                    //are they two functions\n                    var g1 = symbols[0].group,\n                        g2 = symbols[1].group,\n                        sym1 = symbols[0],\n                        sym2 = symbols[1],\n                        fn1 = sym1.fname,\n                        fn2 = sym2.fname; //reset the symbol minus the coeff\n\n                    symbol = _.multiply(sym1.clone(), sym2.clone());\n\n                    if (g1 === FN && g2 === FN) {\n                      if (fn1 === LOG || fn2 === LOG) {\n                        retval = __.integration.by_parts(symbol.clone(), dx, depth, opt);\n                      } else {\n                        symbols.sort(function (a, b) {\n                          return b.fname > a.fname;\n                        });\n                        var arg1 = sym1.args[0]; //make sure the arguments are suitable. We don't know how to integrate non-linear arguments\n\n                        if (!arg1.isLinear() || !(arg1.group === CP || arg1.group === CB || arg1.group === S)) __.integration.stop();\n\n                        var decomp = __.integration.decompose_arg(arg1, dx);\n\n                        x = decomp[1], a = decomp[0];\n                        if (!x.isLinear()) //again... linear arguments only wrt x\n                          __.integration.stop(); //they have to have the same arguments and then we have cleared all the check to \n                        //make sure we can integrate FN & FN\n\n                        var arg2 = sym2.args[0]; //make sure that their argument matches\n\n                        if (arg1.equals(arg2)) {\n                          if (fn1 === SIN && fn2 === COS || fn1 === COS && fn2 === SIN) {\n                            if (sym1.power.lessThan(0)) __.integration.stop(); //we don't know how to handle, sin(x)^n/cos(x)^m where m > n,  yet\n                            //if it's in the form sin(x)^n*cos(x)^n then we can just return tan(x)^n which we know how to integrate\n\n                            if (fn1 === SIN && sym1.power.add(sym2.power).equals(0)) {\n                              sym1.fname = TAN;\n                              sym1.updateHash();\n                              retval = __.integrate(sym1, dx, depth);\n                            } else {\n                              if (even(sym1.power) && fn2 === COS && sym2.power.lessThan(0)) {\n                                //transform sin^(2*n) to (1-cos^2)^n\n                                var n = Number(sym1.power) / 2,\n                                    new_sym = _.parse(format('(1-cos({0})^2)^({1})', sym1.args[0], n));\n\n                                retval = __.integrate(_.expand(_.multiply(new_sym, sym2.clone())), dx, depth, opt);\n                              } else if (even(sym1.power) && fn2 === SIN && sym2.power.lessThan(0)) {\n                                //transform cos^(2*n) to (1-sin^2)^n\n                                var n = Number(sym1.power) / 2,\n                                    new_sym = _.parse(format('(1-sin({0})^2)^({1})', sym1.args[0], n));\n\n                                retval = __.integrate(_.expand(_.multiply(new_sym, sym2.clone())), dx, depth, opt);\n                              } else {\n                                var p1_even = core.Utils.even(sym1.power),\n                                    p2_even = core.Utils.even(sym2.power);\n                                retval = new Symbol(0);\n\n                                if (!p1_even || !p2_even) {\n                                  var u, r, trans; //since cos(x) is odd it carries du. If sin was odd then it would be the other way around\n                                  //know that p1 satifies the odd portion in this case. If p2 did than it would contain r\n\n                                  if (!p1_even) {\n                                    //u = sin(x)\n                                    u = sym2;\n                                    r = sym1;\n                                  } else {\n                                    u = sym1;\n                                    r = sym2;\n                                  } //get the sign of du. In this case r carries du as stated before and D(cos(x),x) = -sin(x)\n\n\n                                  var sign = u.fname === COS ? -1 : 1,\n                                      n = r.power,\n                                      //remove the du e.g. cos(x)^2*sin(x)^3 dx -> cos(x)^2*sin(x)^2*sin(x). We're left with two \n                                  //even powers afterwards which can be transformed\n                                  k = (n - 1) / 2,\n                                      //make the transformation cos(x)^2 = 1 - sin(x)^2\n                                  trans = _.parse('(1-' + u.fname + core.Utils.inBrackets(arg1) + '^2)^' + k),\n                                      sym = _.expand(_.multiply(new Symbol(sign), _.multiply(u.clone(), trans))); //we can now just loop through and integrate each since it's now just a polynomial with functions\n\n\n                                  sym.each(function (x) {\n                                    retval = _.add(retval, __.integration.poly_integrate(x.clone()));\n                                  });\n                                } else {\n                                  //performs double angle transformation\n                                  var double_angle = function double_angle(symbol) {\n                                    var p = symbol.power,\n                                        k = p / 2,\n                                        e;\n                                    if (symbol.fname === COS) e = '((1/2)+(cos(2*(' + symbol.args[0] + '))/2))^' + k;else e = '((1/2)-(cos(2*(' + symbol.args[0] + '))/2))^' + k;\n                                    return _.parse(e);\n                                  }; //they're both even so transform both using double angle identities and we'll just\n                                  //be able to integrate by the sum of integrals\n\n\n                                  var a = double_angle(sym1),\n                                      b = double_angle(sym2),\n                                      t = _.multiply(a, b);\n\n                                  var sym = _.expand(t);\n\n                                  sym.each(function (x) {\n                                    retval = _.add(retval, __.integrate(x, dx, depth));\n                                  });\n                                  return _.multiply(retval, coeff);\n                                }\n                              }\n                            }\n                          } //tan(x)*sec(x)^n \n                          else if (fn1 === SEC && fn2 === TAN && x.isLinear() && sym2.isLinear()) {\n                            retval = _.parse(format('sec({0})^({1})/({1})', sym1.args[0], sym1.power));\n                          } else if (fn1 === TAN && fn2 === SEC && x.isLinear()) {\n                            //remaining: tan(x)^3*sec(x)^6\n                            if (sym1.isLinear() && sym2.isLinear()) {\n                              retval = _.divide(_.symfunction(SEC, [arg1.clone()]), a);\n                            } else if (even(sym1.power)) {\n                              var p = Number(sym1.power) / 2; //transform tangent\n\n                              var t = _.parse(format('(sec({0})^2-1)^({1})', sym1.args[0], p));\n\n                              retval = __.integrate(_.expand(_.multiply(t, sym2)), dx, depth);\n                            } else __.integration.stop();\n                          } else if (fn1 === SEC && fn2 === COS) {\n                            sym1.fname = COS;\n                            sym1.invert().updateHash();\n                            retval = __.integrate(_.multiply(sym1, sym2), dx, depth);\n                          } else if (fn1 === SIN && fn2 === CSC) {\n                            sym2.fname = SIN;\n                            sym2.invert().updateHash();\n                            retval = __.integrate(_.multiply(sym1, sym2), dx, depth);\n                          } //tan/cos\n                          else if (fn1 === TAN && (fn2 === COS || fn2 === SIN) && sym2.power.lessThan(0)) {\n                            var t = _.multiply(sym1.fnTransform(), sym2);\n\n                            retval = __.integrate(_.expand(t), dx, depth);\n                          } else {\n                            var t = _.multiply(sym1.fnTransform(), sym2.fnTransform());\n\n                            retval = __.integrate(_.expand(t), dx, depth);\n                          }\n                        } //TODO: In progress\n                        else if ((fn1 === SIN || fn1 === COS) && (fn2 === SIN || fn2 === COS)) {\n                          if (sym1.isLinear() && sym2.isLinear()) {\n                            //if in the form cos(a*x)*sin(b*x)\n                            if (sym1.args[0].isLinear() && sym2.args[0].isLinear()) {\n                              //use identity (sin(b*x+a*x)+sin(b*x-a*x))/2\n                              var ax, bx;\n\n                              if (fn2 === SIN) {\n                                ax = sym1.args[0];\n                                bx = sym2.args[0];\n                              } else {\n                                bx = sym1.args[0];\n                                ax = sym2.args[0];\n                              } //make the transformation\n\n\n                              f = _.parse(format('(sin(({1})+({0}))+sin(({1})-({0})))/2', ax.toString(), bx.toString())); //integrate it\n\n                              retval = __.integrate(f, dx, depth);\n                            } else {\n                              var transformed = trigTransform(symbols);\n                              retval = __.integrate(_.expand(transformed), dx, depth);\n                            }\n                          } else {\n                            var transformed = new Symbol(1);\n                            symbols.map(function (sym) {\n                              var s = sym.fnTransform();\n                              transformed = _.multiply(transformed, s);\n                            });\n\n                            var t = _.expand(transformed);\n\n                            retval = __.integrate(t, dx, depth);\n\n                            if (retval.hasIntegral()) {\n                              retval = __.integrate(trigTransform(transformed.collectSymbols()), dx, depth);\n                            }\n                          }\n                        } else {\n                          __.integration.stop();\n                        }\n                      }\n                    } else if (g1 === FN && g2 === S) {\n                      var sym1_is_linear = sym1.isLinear();\n                      if (sym1.fname === COS && sym1_is_linear && sym2.power.equals(-1)) retval = _.symfunction('Ci', [sym1.args[0]]);else if (sym1.fname === COS && sym2.power.equals(-1)) {\n                        retval = __.integrate(_.multiply(sym1.fnTransform(), sym2.clone()), dx, depth);\n                      } else if (sym1.fname === COSH && sym1_is_linear && sym2.power.equals(-1)) retval = _.symfunction('Chi', [sym1.args[0]]);else if (sym1.fname === COSH && sym2.power.equals(-1)) {\n                        retval = __.integrate(_.multiply(sym1.fnTransform(), sym2.clone()), dx, depth);\n                      } else if (sym1.fname === SIN && sym1_is_linear && sym2.power.equals(-1)) retval = _.symfunction('Si', [sym1.args[0]]);else if (sym1.fname === SIN && sym2.power.equals(-1)) {\n                        retval = __.integrate(_.multiply(sym1.fnTransform(), sym2.clone()), dx, depth);\n                      } else if (sym1.fname === SINH && sym1_is_linear && sym2.power.equals(-1)) retval = _.symfunction('Shi', [sym1.args[0]]);else if (sym1.fname === SINH && sym2.power.equals(-1)) {\n                        retval = __.integrate(_.multiply(sym1.fnTransform(), sym2.clone()), dx, depth);\n                      } else if (sym1.fname === LOG && sym2.power.equals(-1)) {\n                        //log(x)^n/x = log(x)^(n+1)/(n+1)\n                        retval = __.integration.poly_integrate(sym1, dx, depth);\n                      } else if (sym1.fname === 'erf') {\n                        if (sym2.power.equals(1)) {\n                          var dc = __.integration.decompose_arg(sym1.args[0], dx),\n                              a_ = dc[0],\n                              x_ = dc[1],\n                              arg = sym1.args[0].toString();\n\n                          retval = _.parse(format('(e^(-(({2}))^2)*(sqrt(pi)*e^((({2}))^2)*(2*({0})^2*({1})^2-3)*erf(({2}))+2*({0})*({1})-2))/(4*sqrt(pi)*({0})^2)', a_, x_, arg));\n                        }\n                      } else {\n                        //since group S is guaranteed convergence we need not worry about tracking depth of integration\n                        retval = __.integration.by_parts(symbol, dx, depth, opt);\n                      }\n                    } else if (g1 === EX && g2 === S) {\n                      var x = fn1 === LOG ? __.integration.decompose_arg(sym1.args[0], dx)[1] : null;\n\n                      if (sym1.isE() && (sym1.power.group === S || sym1.power.group === CB) && sym2.power.equals(-1)) {\n                        retval = _.symfunction('Ei', [sym1.power.clone()]);\n                      } else if (fn1 === LOG && x.value === sym2.value) {\n                        retval = __.integration.poly_integrate(sym1, dx, depth);\n                      } else retval = __.integration.by_parts(symbol, dx, depth, opt);\n                    } else if (g1 === PL && g2 === S) {\n                      //first try to reduce the top\n                      if (sym2.value === sym1.value && sym1.power.equals(-1)) {\n                        //find the lowest power in the denominator\n                        var pd = Math.min.apply(null, core.Utils.keys(sym1.symbols)); //get the lowest common value between denominator and numerator\n\n                        var pc = Math.min(pd, sym2.power); //reduce both denominator and numerator by that factor\n\n                        var factor = sym2.clone();\n                        factor.power = new Frac(pc);\n                        sym2 = _.divide(sym2, factor.clone()); //reduce the denominator\n\n                        var t = new Symbol(0);\n                        sym1.each(function (x) {\n                          t = _.add(t, _.divide(x.clone(), factor.clone()));\n                        });\n                        t.multiplier = sym1.multiplier;\n                        symbol = _.divide(sym2, t);\n                      } else {\n                        symbol = _.expand(symbol);\n                      }\n\n                      retval = __.integration.partial_fraction(symbol, dx, depth);\n                    } else if (g1 === CP && g2 === S) {\n                      var f = sym1.clone().toLinear(),\n                          f_is_linear = core.Algebra.degree(f, _.parse(dx)).equals(1); //handle cases x^(2*n)/sqrt(1-x^2)\n\n                      if (sym1.power.equals(-1 / 2)) {\n                        var decomp = __.integration.decompose_arg(sym1.clone().toLinear(), dx);\n\n                        var a = decomp[0].negate(),\n                            x = decomp[1],\n                            b = decomp[3],\n                            p1 = Number(sym1.power),\n                            p2 = Number(sym2.power);\n\n                        if (isInt(p2) && core.Utils.even(p2) && x.power.equals(2)) {\n                          //if the substitution \n                          var c = _.divide(_.multiply(_.pow(b.clone(), new Symbol(2)), _.symfunction(SQRT, [_.divide(b.clone(), a.clone())])), _.pow(a.clone(), new Symbol(2)));\n\n                          c = _.multiply(c, _.symfunction(SQRT, [b]).invert());\n\n                          var dummy = _.parse('sin(u)');\n\n                          dummy.power = dummy.power.multiply(sym2.power);\n\n                          var integral = __.integrate(dummy, 'u', depth);\n\n                          var bksub = _.parse(ASIN + '(' + SQRT + '(' + a + '/' + b + ')*' + dx + ')');\n\n                          retval = _.multiply(c, integral.sub(new Symbol('u'), bksub));\n                        } else if (p1 === -1 / 2) {\n                          var u_transform = function u_transform(f, u) {\n                            var integral = _.parse(__.integrate(f, dx, depth, opt).sub(dx, format(u, dx)));\n\n                            if (!integral.hasIntegral()) return integral;\n                          };\n\n                          if (p2 === -1) {\n                            retval = u_transform(_.expand(_.expand(_.pow(_.multiply(sym1.invert(), sym2.invert()), new Symbol(2)))).invert(), 'sqrt(1-1/({0})^2)');\n                          } else if (p2 === -2) {\n                            //apply transformation to see if it matches asin(x)\n                            retval = u_transform(_.sqrt(_.expand(_.divide(_.pow(symbol, new Symbol(2)).invert(), _.pow(new Symbol(dx), new Symbol(2))).negate())).invert(), 'sqrt(1-1/({0})^2)');\n                          }\n                        }\n                      } else if (sym1.power.equals(-1) && sym2.isLinear() && f_is_linear) {\n                        retval = __.integration.partial_fraction(symbol, dx, depth);\n                      } else if (!sym1.power.lessThan(0) && isInt(sym1.power)) {\n                        //sum of integrals\n                        var expanded = _.expand(sym1);\n\n                        retval = new Symbol(0);\n                        expanded.each(function (x) {\n                          if (x.group === PL) {\n                            x.each(function (y) {\n                              retval = _.add(retval, __.integrate(_.multiply(sym2.clone(), y), dx, depth));\n                            });\n                          } else retval = _.add(retval, __.integrate(_.multiply(sym2.clone(), x), dx, depth));\n                        });\n                      } else if (sym1.power.lessThan(-2)) {\n                        retval = __.integration.by_parts(symbol, dx, depth, opt);\n                      } else if (sym1.power.lessThan(0) && sym2.power.greaterThan(1)) {\n                        var decomp = __.integration.decompose_arg(sym1.clone().toLinear(), dx),\n                            a = decomp[0].negate(),\n                            x = decomp[1],\n                            b = decomp[3],\n                            fn = sym1.clone().toLinear();\n\n                        if (x.group !== PL && x.isLinear()) {\n                          var p = Number(sym2.power),\n                              du = '_u_',\n                              u = new Symbol(du),\n                              //pull the integral with the subsitution\n                          U = _.expand(_.divide(_.pow(_.subtract(u.clone(), b.clone()), new Symbol(p)), u.clone())),\n                              scope = {}; //generate a scope for resubbing the symbol\n\n\n                          scope[du] = fn;\n\n                          var U2 = _.parse(U, scope);\n\n                          retval = __.integrate(U2, dx, 0);\n                        } else if (sym2.power.greaterThan(x.power) || sym2.power.equals(x.power)) {\n                          //factor out coefficients\n                          var factors = new core.Algebra.Classes.Factors();\n                          sym1 = core.Algebra.Factor.coeffFactor(sym1.invert(), factors);\n                          var div = core.Algebra.divide(sym2, sym1); //it assumed that the result will be of group CB\n\n                          if (div.group !== CB) {\n                            retval = new Symbol(0);\n                            div.each(function (t) {\n                              retval = _.add(retval, __.integrate(t, dx, depth));\n                            }); //put back the factors\n\n                            factors.each(function (factor) {\n                              retval = _.divide(retval, factor);\n                            });\n                            retval = _.expand(retval);\n                          } else {\n                            //try something else\n                            retval = __.integration.by_parts(symbol, dx, depth, opt);\n                          }\n                        } else retval = __.integration.partial_fraction(symbol, dx, depth);\n                      } else {\n                        //handle cases such as (1-x^2)^(n/2)*x^(m) where n is odd ___ cracking knuckles... This can get a little hairy \n                        if (sym1.power.den.equals(2)) {\n                          //assume the function is in the form (a^2-b*x^n)^(m/2)\n                          var dc = __.integration.decompose_arg(sym1.clone().toLinear(), dx),\n                              //using the above definition\n                          a = dc[3],\n                              x = dc[1],\n                              b = dc[0],\n                              bx = dc[2];\n\n                          if (x.power.equals(2) && b.lessThan(0)) {\n                            //if n is even && b is negative\n                            //make a equal 1 so we can do a trig sub\n                            if (!a.equals(1)) {\n                              //divide a out of everything\n                              //move a to the coeff\n                              coeff = _.multiply(coeff, _.pow(a, new Symbol(2)));\n                            }\n\n                            var u = dx;\n\n                            var c = _.divide(_.pow(b.clone().negate(), new Symbol(1 / 2)), _.pow(a, new Symbol(1 / 2))),\n                                du = _.symfunction(COS, [new Symbol(u)]),\n                                cosn = _.pow(_.symfunction(COS, [new Symbol(u)]), new Symbol(sym1.power.num)),\n                                X = _.pow(_.symfunction(SIN, [new Symbol(u)]), new Symbol(sym2.power)),\n                                val = _.multiply(_.multiply(cosn, du), X),\n                                integral = __.integrate(val, u, depth); //but remember that u = asin(sqrt(b)*a*x)\n\n\n                            retval = integral.sub(u, _.symfunction(ASIN, [_.multiply(new Symbol(dx), c)]));\n                          } else {\n                            retval = __.integration.partial_fraction(symbol, dx, depth, opt);\n                          }\n                        } else if (f_is_linear) {\n                          retval = __.integration.partial_fraction(symbol, dx, depth);\n                        }\n                      }\n                    } else if (sym1.isComposite() && sym2.isComposite()) {\n                      //sum of integrals\n                      retval = new Symbol(0);\n\n                      if (sym1.power.greaterThan(0) && sym2.power.greaterThan(0)) {\n                        //combine and pull the integral of each\n                        var sym = _.expand(symbol);\n\n                        sym.each(function (x) {\n                          retval = _.add(retval, __.integrate(x, dx, depth));\n                        }, true);\n                      } else {\n                        var p1 = Number(sym1.power),\n                            p2 = Number(sym2.power);\n\n                        if (p1 < 0 && p2 > 0) {\n                          //swap\n                          var t = sym1;\n                          sym1 = sym2;\n                          sym2 = t;\n                        }\n\n                        if (p1 === -1 && p2 === -1) {\n                          retval = __.integration.partial_fraction(symbol, dx);\n                        } else {\n                          sym1.each(function (x) {\n                            var k = _.multiply(x, sym2.clone());\n\n                            var integral = __.integrate(k, dx, depth);\n\n                            retval = _.add(retval, integral);\n                          });\n                        }\n                      }\n                    } else if (g1 === CP && symbols[0].power.greaterThan(0)) {\n                      sym1 = _.expand(sym1);\n                      retval = new Symbol(0);\n                      sym1.each(function (x) {\n                        retval = _.add(retval, __.integrate(_.multiply(x, sym2.clone()), dx, depth));\n                      }, true);\n                    } else if (g1 === FN && g2 === EX && core.Utils.in_htrig(sym1.fname)) {\n                      sym1 = sym1.fnTransform();\n                      retval = __.integrate(_.expand(_.multiply(sym1, sym2)), dx, depth);\n                    } else if (g1 === FN && g2 === CP || g2 === FN && g1 === CP) {\n                      if (g2 === FN && g1 === CP) {\n                        var t = sym1;\n                        sym1 = sym2;\n                        sym2 = t; //swap\n                      }\n\n                      var du, sym2_clone, p, q, sa, sb;\n                      du = Symbol.unwrapSQRT(__.diff(sym1.clone(), dx), true);\n                      sym2_clone = Symbol.unwrapSQRT(sym2, true);\n\n                      if (du.power.equals(sym2_clone.power)) {\n                        p = new Symbol(sym2.power);\n                        sa = du.clone().toLinear();\n                        sb = sym2.clone().toLinear();\n                        q = core.Algebra.divide(sa.toLinear(), sb);\n\n                        if (q.isConstant()) {\n                          var nq = _.pow(q, p.negate());\n\n                          retval = _.multiply(nq, __.integration.poly_integrate(sym1.clone()));\n                        }\n                      } else {\n                        retval = __.integration.by_parts(symbol, dx, depth, opt);\n                      }\n                    } else {\n                      var syma = sym1.clone().toLinear();\n                      var symb = sym2.clone().toLinear();\n\n                      if (g1 === EX && g2 === EX && sym1.power.contains(dx) && sym2.power.contains(dx) && !syma.contains(dx) && !symb.contains(dx)) {\n                        retval = _.parse(format('(({0})^(({2})*({4}))*({1})^(({3})*({4})))/(log(({0})^({2}))+log(({1})^({3})))', syma.toString(), symb.toString(), sym1.power.multiplier.toString(), sym2.power.multiplier.toString(), dx));\n                      } else retval = __.integration.by_parts(symbol, dx, depth, opt);\n                    }\n                  }\n                } else if (l === 3 && (symbols[2].group === S && symbols[2].power.lessThan(2) || symbols[0].group === CP)) {\n                  var first = symbols[0];\n\n                  if (first.group === CP) {\n                    //TODO {support higher powers of x in the future}\n                    if (first.power.greaterThan(1)) first = _.expand(first);\n\n                    var r = _.multiply(symbols[1], symbols[2]);\n\n                    retval = new Symbol(0);\n                    first.each(function (x) {\n                      var t = _.multiply(x, r.clone());\n\n                      var intg = __.integrate(t, dx, depth);\n\n                      retval = _.add(retval, intg);\n                    }, true);\n                  } else {\n                    //try integration by parts although technically it will never work\n                    retval = __.integration.by_parts(symbol, dx, depth, opt);\n                  }\n                } else if (all_functions(symbols)) {\n                  var t = new Symbol(1);\n\n                  for (var i = 0, l = symbols.length; i < l; i++) {\n                    t = _.multiply(t, symbols[i].fnTransform());\n                  }\n\n                  t = _.expand(t);\n                  retval = __.integrate(t, dx, depth);\n                } else {\n                  //one more go\n                  var transformed = trigTransform(symbols);\n                  retval = __.integrate(_.expand(transformed), dx, depth);\n                }\n              }\n            }\n\n            retval = _.multiply(retval, coeff);\n          } //if an integral was found then we return it\n\n\n          if (retval) return retval;\n        } catch (error) {\n          //do nothing if it's a NoIntegralFound error otherwise let it bubble\n          if (!(error instanceof NoIntegralFound || error instanceof core.exceptions.DivisionByZero)) throw error;\n        } //no symbol found so we return the integral again\n\n\n        return _.symfunction('integrate', [original_symbol, dt]);\n      }, false);\n    },\n    defint: function defint(symbol, from, to, dx) {\n      dx = dx || 'x'; //make x the default variable of integration\n\n      var get_value = function get_value(integral, vars, point) {\n        try {\n          return _.parse(integral, vars);\n        } catch (e) {\n          //it failed for some reason so return the limit\n          var lim = __.Limit.limit(integral, dx, point);\n\n          return lim;\n        }\n      };\n\n      var vars = core.Utils.variables(symbol),\n          hasTrig = symbol.hasTrig();\n      var retval, integral; // Fix #593 - Only assume the first variable if dx is not defined.\n\n      if (vars.length === 1 && !dx) dx = vars[0];\n\n      if (!hasTrig) {\n        integral = __.integrate(symbol, dx);\n      }\n\n      if (!hasTrig && !integral.hasIntegral()) {\n        var upper = {},\n            lower = {},\n            a,\n            b;\n        upper[dx] = to;\n        lower[dx] = from;\n        a = get_value(integral, upper, to, dx);\n        b = get_value(integral, lower, from, dx);\n        retval = _.subtract(a, b);\n      } else if (vars.length === 1 && from.isConstant() && to.isConstant()) {\n        var f = core.Utils.build(symbol);\n        retval = new Symbol(core.Math2.num_integrate(f, Number(from), Number(to)));\n      } else retval = _.symfunction('defint', [symbol, from, to, dx]);\n\n      return retval;\n    },\n    Limit: {\n      interval: function interval(start, end) {\n        return _.parse(format('[{0}, {1}]', start, end));\n      },\n      diverges: function diverges() {\n        return __.Limit.interval('-Infinity', 'Infinity');\n      },\n      divide: function divide(f, g, x, lim, depth) {\n        if (depth++ > Settings.max_lim_depth) {\n          return;\n        }\n\n        var fin = f.clone(),\n            gin = g.clone(); //But first a little \"cheating\". x/|x| ends up in an infinite loop since the d/dx |x| -> x/|x|\n        //To break this loop we simply provide the answer. Keep in mind that currently limit only provides\n        //the two-sided limit.\n        //Known limit\n\n        if (g.fname === ABS) {\n          var sign = f.sign();\n          var lim_sign = lim.sign();\n          if (lim.isInfinity) return _.multiply(new Symbol(sign), new Symbol(lim_sign));else if (lim.equals(0)) {\n            var fm = _.parse(f.multiplier);\n\n            var gm = _.parse(g.multiplier);\n\n            return _.divide(_.multiply(fm, __.Limit.interval('-1', '1')), gm);\n          } else {\n            //TODO: Support more limits\n            __.Limit.diverges();\n          }\n        }\n\n        var isInfinity = function isInfinity(L) {\n          if (core.Utils.isVector(L)) {\n            for (var i = 0; i < L.elements.length; i++) {\n              if (!L.elements[i].isInfinity) return false;\n            }\n\n            return true;\n          }\n\n          return L.isInfinity;\n        };\n\n        var equals = function equals(L, v) {\n          if (core.Utils.isVector(L)) {\n            return false;\n          }\n\n          return L.equals(v);\n        };\n\n        var retval;\n\n        do {\n          var lim1 = evaluate(__.Limit.limit(f.clone(), x, lim, depth));\n          var lim2 = evaluate(__.Limit.limit(g.clone(), x, lim, depth)); //if it's in indeterminate form apply L'Hospital's rule\n\n          var indeterminate = isInfinity(lim1) && isInfinity(lim2) || equals(lim1, 0) && equals(lim2, 0); //pull the derivatives\n\n          if (indeterminate) {\n            var ft = __.diff(f.clone(), x);\n\n            var gt = __.diff(g.clone(), x);\n\n            var t_symbol = _.expand(_.divide(ft, gt));\n\n            f = t_symbol.getNum();\n            g = t_symbol.getDenom();\n          }\n        } while (indeterminate); //REMEMBER: \n        //- 1/cos(x)\n        //n/0 is still possible since we only checked for 0/0\n\n\n        var den_is_zero = lim2.equals(0);\n        var p = Number(gin.power);\n\n        if (lim.isConstant(true) && den_is_zero) {\n          retval = Symbol.infinity(core.Utils.even(p) && lim1.lessThan(0) ? -1 : undefined);\n        } else if (den_is_zero) {\n          retval = __.Limit.diverges();\n        } else {\n          retval = _.divide(lim1, lim2);\n        }\n\n        return retval;\n      },\n      rewriteToLog: function rewriteToLog(symbol) {\n        var p = symbol.power.clone();\n        symbol.toLinear();\n        return _.pow(new Symbol('e'), _.multiply(p, _.symfunction(Settings.LOG + '', [symbol])));\n      },\n      getSubbed: function getSubbed(f, x, lim) {\n        var retval; //1. rewrite EX with base e\n\n        if (f.group === EX) {\n          f = __.rewriteToLog(f);\n        } //2. try simple substitution\n\n\n        try {\n          retval = f.sub(x, lim);\n        } catch (e) {\n          //Nope. No go, so just return the unsubbed function so we can test the limit instead.\n          retval = f;\n        }\n\n        return retval;\n      },\n      isInterval: function isInterval(limit) {\n        return core.Utils.isVector(limit);\n      },\n      isConvergent: function isConvergent(limit) {\n        //it's not convergent if it lies on the interval -Infinity to Infinity\n        if ( //It lies on the interval -Infinity to Infinity\n        __.Limit.isInterval(limit) && limit.elements[0].isInfinity && limit.elements[1].isInfinity || //We weren't able to calculate the limit\n        limit.containsFunction('limit')) {\n          return false; //Then no\n        }\n\n        return true; //It is\n      },\n      limit: function limit(symbol, x, lim, depth) {\n        //Simplify the symbol\n        if (symbol.isLinear() && symbol.isComposite()) {\n          //Apply sum of limits\n          var limit = new Symbol(0);\n          symbol.each(function (s) {\n            limit = _.add(limit, __.Limit.limit(s, x, lim, depth));\n          }, true);\n          return limit;\n        }\n\n        ;\n        symbol = core.Algebra.Simplify.simplify(symbol);\n        depth = depth || 1;\n\n        if (depth++ > Settings.max_lim_depth) {\n          return;\n        } //store the multiplier\n\n\n        var m = _.parse(symbol.multiplier); //strip the multiplier\n\n\n        symbol.toUnitMultiplier();\n\n        try {\n          //https://en.wikipedia.org/wiki/List_of_limits\n          var retval; //we try the simplest option first where c is some limit\n          //lim a as x->c = a where c \n\n          if (symbol.isConstant(true)) {\n            retval = symbol;\n          } else {\n            var point = {};\n            point[x] = lim; //lim x as x->c = c where c\n\n            try {\n              //evaluate the function at the given limit\n              var t = _.parse(symbol.sub(x, lim), point); //a constant or infinity is known so we're done\n\n\n              if (t.isConstant(true) || t.isInfinity) retval = t;\n            } catch (e) {\n              /*Nothing. Maybe we tried to divide by zero.*/\n            }\n\n            ;\n\n            if (!retval) {\n              //split the symbol in the numerator and the denominator\n              var num = symbol.getNum();\n              var den = symbol.getDenom();\n\n              if (den.isConstant(true)) {\n                //We still don't have a limit so we generate tests.\n                if (symbol.group === EX) {\n                  //https://en.wikipedia.org/wiki/List_of_limits\n                  //Speed boost for exponentials by detecting patterns\n                  var f = symbol.clone().toLinear();\n                  var p = symbol.power.clone();\n\n                  var _num = f.getNum();\n\n                  var _den = f.getDenom();\n\n                  var fn = core.Utils.decompose_fn(_den, x, true); //start detection of pattern (x/(x+1))^x\n\n                  if (_num.group === S && _num.multiplier.isOne() && fn.ax.group === S && fn.b.isConstant(true) && fn.a.isOne() && fn.b.isConstant(true)) {\n                    retval = _.parse(format('(1/e^({0}))', fn.b));\n                  } else {\n                    var symbol_ = __.Limit.rewriteToLog(symbol.clone()); //get the base\n\n\n                    var pow = symbol_.power.clone();\n                    var base = symbol_.clone().toLinear();\n\n                    var lim_base = __.Limit.limit(base, x, lim, depth);\n\n                    var lim_pow = __.Limit.limit(pow, x, lim, depth);\n\n                    retval = _.pow(lim_base, lim_pow);\n                  }\n                } else if (symbol.group === FN && symbol.args.length === 1) {\n                  var evaluates; //Squeeze theorem lim f(g(x)) = lim f(lim g))\n\n                  var arg = __.Limit.limit(symbol.args[0], x, lim, depth);\n\n                  if (core.Utils.isVector(arg)) {\n                    //get the limit over that interval\n                    retval = arg.map(function (e) {\n                      var clone = symbol.clone();\n                      clone.args[0] = e;\n                      return __.Limit.limit(_.symfunction(symbol.fname, [e]), x, lim, depth);\n                    });\n                    return _.multiply(m, retval);\n                  } //if the argument is constant then we're done\n                  else if (arg.isConstant(true)) {\n                    //double check that it evaluates\n                    var trial = _.symfunction(symbol.fname, [arg]); //trial evaluation\n\n\n                    try {\n                      evaluate(trial);\n                      evaluates = true;\n                    } catch (e) {\n                      evaluates = false;\n                    }\n                  }\n\n                  if (evaluates) {\n                    retval = trial;\n                  } else {\n                    //if the limit converges. We'll deal with non-convergent ones later\n                    if (__.Limit.isConvergent(arg)) {\n                      if (symbol.fname === LOG) {\n                        switch (arg.toString()) {\n                          //lim -> 0\n                          case '0':\n                            retval = Symbol.infinity().negate();\n                            break;\n\n                          case 'Infinity':\n                            retval = Symbol.infinity();\n                            break;\n\n                          case '-Infinity':\n                            retval = Symbol.infinity();\n                            break;\n                        }\n                      } else if ((symbol.fname === COS || symbol.fname === SIN) && lim.isInfinity) {\n                        retval = __.Limit.interval(-1, 1);\n                      } else if (symbol.fname === TAN) {\n                        var s_arg = symbol.args[0];\n                        var n = s_arg.getNum();\n                        var d = s_arg.getDenom();\n                        var pi = n.toUnitMultiplier();\n\n                        if (lim.isInfinity || pi.equals('pi') && d.equals(2)) {\n                          retval = divergent();\n                        }\n                      } else if (symbol.fname === Settings.FACTORIAL) {\n                        if (arg.isInfinity) return Symbol.infinity();\n                      }\n                    }\n                  }\n                } else if (symbol.group === S) {\n                  if (symbol.power > 0) //these functions always converge to the limit\n                    return _.parse(symbol, point);else {\n                    //we're dealing with 1/x^n but remember that infinity has already been dealt\n                    //with by substitution\n                    if (core.Utils.even(symbol.power)) {\n                      //even powers converge to infinity\n                      retval = Symbol.infinity();\n                    } else {\n                      //odd ones don't\n                      retval = __.Limit.diverges();\n                    }\n                  }\n                } else if (symbol.group === CB) {\n                  var lim1, lim2; //loop through all the symbols\n                  //thus => lim f*g*h = lim (f*g)*h = (lim f*g)*(lim h)\n                  //symbols of lower groups are generally easier to differentiatee so get them to the right by first sorting\n\n                  var symbols = symbol.collectSymbols().sort(function (a, b) {\n                    return a.group - b.group;\n                  });\n                  var f = symbols.pop(); //calculate the first limit so we can keep going down the list\n\n                  lim1 = evaluate(__.Limit.limit(f, x, lim, depth)); //reduces all the limits one at a time\n\n                  while (symbols.length) {\n                    //get the second limit\n                    var g = symbols.pop(); //get the limit of g\n\n                    lim2 = evaluate(__.Limit.limit(g, x, lim, depth)); //if the limit is in indeterminate form aplly L'Hospital by inverting g and then f/(1/g)\n\n                    if (lim1.isInfinity || !__.Limit.isConvergent(lim1) && lim2.equals(0) || lim1.equals(0) && __.Limit.isConvergent(lim2)) {\n                      if (g.containsFunction(LOG)) {\n                        //swap them\n                        g = [f, f = g][0];\n                      } //invert the symbol\n\n\n                      g.invert(); // Product of infinities\n\n                      if (lim1.isInfinity && lim2.isInfinity) {\n                        lim1 = Symbol.infinity();\n                      } else {\n                        lim1 = __.Limit.divide(f, g, x, lim, depth);\n                      }\n                    } else {\n                      //lim f*g = (lim f)*(lim g)\n                      lim1 = _.multiply(lim1, lim2); //let f*g equal f and h equal g \n\n                      f = _.multiply(f, g);\n                    }\n                  } //Done, lim1 is the limit we're looking for     \n\n\n                  retval = lim1;\n                } else if (symbol.isComposite()) {\n                  var _lim;\n\n                  if (!symbol.isLinear()) symbol = _.expand(symbol); //Apply lim f+g = (lim f)+(lim g)\n\n                  retval = new Symbol(0);\n                  var symbols = symbol.collectSymbols().sort(function (a, b) {\n                    return b.group - a.group;\n                  });\n                  var _symbols = []; //Analyze the functions first\n\n                  var fns = new Symbol(0);\n\n                  for (var i = 0, l = symbols.length; i < l; i++) {\n                    var sym = symbols[i].clone();\n\n                    if (sym.group === FN || sym.group === CB && sym.hasFunc()) {\n                      fns = _.add(fns, sym);\n                    } else _symbols.push(sym);\n                  }\n\n                  _symbols.unshift(fns); //make sure that we didn't just repackage the exact same symbol\n\n\n                  if (_symbols.length !== 1) {\n                    symbols = _symbols;\n                  }\n\n                  for (var i = 0, l = symbols.length; i < l; i++) {\n                    var sym = symbols[i]; //If the addition of the limits is undefined then the limit diverges so return -infinity to infinity\n\n                    try {\n                      _lim = __.Limit.limit(sym, x, lim, depth);\n                    } catch (e) {\n                      _lim = __.Limit.diverges();\n                    }\n\n                    try {\n                      retval = _.add(retval, _lim);\n                    } catch (e) {\n                      if (depth++ > Settings.max_lim_depth) {\n                        return;\n                      }\n\n                      ;\n                      retval = __.Limit.limit(__.diff(symbol, x), x, lim, depth);\n                    }\n                  }\n                }\n              } else {\n                retval = __.Limit.divide(num, den, x, lim, depth);\n              }\n            }\n          } //if we still don't have a solution\n\n\n          if (!retval) //return it symbolically\n            retval = _.symfunction('limit', [symbol, x, lim]);\n        } catch (e) {\n          //if all else fails return the symbolic function\n          retval = _.symfunction('limit', [symbol, x, lim]);\n        }\n\n        return _.multiply(m, retval);\n      }\n    },\n    Fresnel: {\n      S: function S(x) {\n        if (x.isConstant(true)) {\n          return __.defint(_.parse('sin(pi*x^2/2)'), Symbol(0), x, 'x');\n        }\n\n        return _.symfunction('S', arguments);\n      },\n      C: function C(x) {\n        if (x.isConstant(true)) {\n          return __.defint(_.parse('cos(pi*x^2/2)'), Symbol(0), x, 'x');\n        }\n\n        return _.symfunction('C', arguments);\n      }\n    }\n  };\n\n  nerdamer.register([{\n    name: 'diff',\n    visible: true,\n    numargs: [1, 3],\n    build: function build() {\n      return __.diff;\n    }\n  }, {\n    name: 'sum',\n    visible: true,\n    numargs: 4,\n    build: function build() {\n      return __.sum;\n    }\n  }, {\n    name: 'product',\n    visible: true,\n    numargs: 4,\n    build: function build() {\n      return __.product;\n    }\n  }, {\n    name: 'integrate',\n    visible: true,\n    numargs: [1, 2],\n    build: function build() {\n      return __.integrate;\n    }\n  }, {\n    name: 'defint',\n    visible: true,\n    numargs: [3, 4],\n    build: function build() {\n      return __.defint;\n    }\n  }, {\n    name: 'S',\n    visible: true,\n    numargs: 1,\n    build: function build() {\n      return __.Fresnel.S;\n    }\n  }, {\n    name: 'C',\n    visible: true,\n    numargs: 1,\n    build: function build() {\n      return __.Fresnel.C;\n    }\n  }, {\n    name: 'limit',\n    visible: true,\n    numargs: [3, 4],\n    build: function build() {\n      return __.Limit.limit;\n    }\n  }]); //link registered functions externally\n\n  nerdamer.updateAPI();\n})();","/*\r\n * Author : Martin Donk\r\n * Website : http://www.nerdamer.com\r\n * Email : martin.r.donk@gmail.com\r\n * License : MIT\r\n * Source : https://github.com/jiggzson/nerdamer\r\n */\n\n/* global module */\nif (typeof module !== 'undefined') {\n  var nerdamer = require('./nerdamer.core.js');\n\n  require('./Calculus');\n\n  require('./Algebra');\n}\n\n(function () {\n  \"use strict\";\n\n  var core = nerdamer.getCore(),\n      _ = core.PARSER,\n      Symbol = core.Symbol,\n      format = core.Utils.format,\n      isVector = core.Utils.isVector,\n      isArray = core.Utils.isArray,\n      Vector = core.Vector,\n      S = core.groups.S,\n      EX = core.groups.EX,\n      CP = core.groups.CP,\n      CB = core.groups.CB,\n      FN = core.groups.FN;\n  core.Settings.Laplace_integration_depth = 40;\n\n  Symbol.prototype.findFunction = function (fname) {\n    //this is what we're looking for\n    if (this.group === FN && this.fname === fname) return this.clone();\n    var found;\n    if (this.symbols) for (var x in this.symbols) {\n      found = this.symbols[x].findFunction(fname);\n      if (found) break;\n    }\n    return found;\n  };\n\n  var __ = core.Extra = {\n    version: '1.4.2',\n    //http://integral-table.com/downloads/LaplaceTable.pdf\n    //Laplace assumes all coefficients to be positive\n    LaPlace: {\n      //Using: integral_0^oo f(t)*e^(-s*t) dt\n      transform: function transform(symbol, t, s) {\n        symbol = symbol.clone();\n        t = t.toString(); //First try a lookup for a speed boost\n\n        symbol = Symbol.unwrapSQRT(symbol, true);\n        var retval,\n            coeff = symbol.stripVar(t),\n            g = symbol.group;\n        symbol = _.divide(symbol, coeff.clone());\n\n        if (symbol.isConstant() || !symbol.contains(t, true)) {\n          retval = _.parse(format('({0})/({1})', symbol, s));\n        } else if (g === S && core.Utils.isInt(symbol.power)) {\n          var n = String(symbol.power);\n          retval = _.parse(format('factorial({0})/({1})^({0}+1)', n, s));\n        } else if (symbol.group === S && symbol.power.equals(1 / 2)) {\n          retval = _.parse(format('sqrt(pi)/(2*({0})^(3/2))', s));\n        } else if (symbol.isComposite()) {\n          retval = new Symbol(0);\n          symbol.each(function (x) {\n            retval = _.add(retval, __.LaPlace.transform(x, t, s));\n          }, true);\n        } else if (symbol.isE() && (symbol.power.group === S || symbol.power.group === CB)) {\n          var a = symbol.power.stripVar(t);\n          retval = _.parse(format('1/(({1})-({0}))', a, s));\n        } else {\n          var fns = ['sin', 'cos', 'sinh', 'cosh']; //support for symbols in fns with arguments in the form a*t or n*t where a = symbolic and n = Number\n\n          if (symbol.group === FN && fns.indexOf(symbol.fname) !== -1 && (symbol.args[0].group === S || symbol.args[0].group === CB)) {\n            var a = symbol.args[0].stripVar(t);\n\n            switch (symbol.fname) {\n              case 'sin':\n                retval = _.parse(format('({0})/(({1})^2+({0})^2)', a, s));\n                break;\n\n              case 'cos':\n                retval = _.parse(format('({1})/(({1})^2+({0})^2)', a, s));\n                break;\n\n              case 'sinh':\n                retval = _.parse(format('({0})/(({1})^2-({0})^2)', a, s));\n                break;\n\n              case 'cosh':\n                retval = _.parse(format('({1})/(({1})^2-({0})^2)', a, s));\n                break;\n            }\n          } else {\n            //Try to integrate for a solution\n            //we need at least the Laplace integration depth\n            var depth_is_lower = core.Settings.integration_depth < core.Settings.Laplace_integration_depth;\n\n            if (depth_is_lower) {\n              var integration_depth = core.Settings.integration_depth; //save the depth\n\n              core.Settings.integration_depth = core.Settings.Laplace_integration_depth; //transforms need a little more room\n            }\n\n            core.Utils.block('PARSE2NUMBER', function () {\n              var u = t;\n              var sym = symbol.sub(t, u);\n\n              var integration_expr = _.parse('e^(-' + s + '*' + u + ')*' + sym);\n\n              retval = core.Calculus.integrate(integration_expr, u);\n              if (retval.hasIntegral()) return _.symfunction('laplace', arguments); //                                _.error('Unable to compute transform');\n\n              retval = retval.sub(t, 0);\n              retval = _.expand(_.multiply(retval, new Symbol(-1)));\n              retval = retval.sub(u, t);\n            }, false);\n            retval = core.Utils.block('PARSE2NUMBER', function () {\n              return _.parse(retval);\n            }, true);\n            if (depth_is_lower) //put the integration depth as it was\n              core.Settings.integration_depth = integration_depth;\n          }\n        }\n\n        return _.multiply(retval, coeff);\n      },\n      inverse: function inverse(symbol, s_, t) {\n        var input_symbol = symbol.clone();\n        return core.Utils.block('POSITIVE_MULTIPLIERS', function () {\n          //expand and get partial fractions\n          if (symbol.group === CB) {\n            symbol = core.Algebra.PartFrac.partfrac(_.expand(symbol), s_);\n          }\n\n          if (symbol.group === S || symbol.group === CB || symbol.isComposite()) {\n            var finalize = function finalize() {\n              //put back the numerator\n              retval = _.multiply(retval, num);\n              retval.multiplier = retval.multiplier.multiply(symbol.multiplier); //put back a\n\n              retval = _.divide(retval, f.a);\n            };\n\n            var num, den, s, retval, f, p, m, den_p, fe; //remove the multiplier\n\n            m = symbol.multiplier.clone();\n            symbol.toUnitMultiplier(); //get the numerator and denominator\n\n            num = symbol.getNum();\n            den = symbol.getDenom().toUnitMultiplier(); //TODO: Make it so factor doesn't destroy pi\n            //num = core.Algebra.Factor.factor(symbol.getNum());\n            //den = core.Algebra.Factor.factor(symbol.getDenom().invert(null, true));\n\n            if (den.group === CP) {\n              den_p = den.power.clone();\n              den.toLinear();\n            } else {\n              den_p = new core.Frac(1);\n            } //convert s to a string\n\n\n            s = s_.toString(); //split up the denominator if in the form ax+b\n\n            f = core.Utils.decompose_fn(den, s, true); //move the multiplier to the numerator\n\n            fe = core.Utils.decompose_fn(_.expand(num.clone()), s, true);\n            num.multiplier = num.multiplier.multiply(m); //store the parts in variables for easy recognition \n            //check if in the form t^n where n = integer\n\n            if ((den.group === S || den.group === CB) && f.x.value === s && f.b.equals(0) && core.Utils.isInt(f.x.power)) {\n              var fact, p;\n              p = f.x.power - 1;\n              fact = core.Math2.factorial(p); //  n!/s^(n-1)\n\n              retval = _.divide(_.pow(t, new Symbol(p)), new Symbol(fact)); //wrap it up\n\n              finalize();\n            } else if (den.group === CP && den_p.equals(1)) {\n              if (f.x.group === core.groups.PL && core.Algebra.degree(den).equals(2)) {\n                // Possibly in the form 1/(s^2+2*s+1)\n                // Try factoring to get it in a more familiar form{\n                // Apply inverse of F(s-a)\n                var completed = core.Algebra.sqComplete(den, s);\n                var u = core.Utils.getU(den); // Get a for the function above\n\n                var a = core.Utils.decompose_fn(completed.a, s, true).b;\n\n                var tf = __.LaPlace.inverse(_.parse(\"1/((\".concat(u, \")^2+(\").concat(completed.c, \"))\")), u, t);\n\n                retval = _.multiply(tf, _.parse(\"(\".concat(m, \")*e^(-(\").concat(a, \")*(\").concat(t, \"))\")));\n              } else {\n                // a/(b*s-c) -> ae^(-bt)\n                if (f.x.isLinear() && !num.contains(s)) {\n                  t = _.divide(t, f.a.clone()); // Don't add factorial of one or zero\n\n                  var p = den_p - 1;\n                  var fact = p === 0 || p === 1 ? '1' : \"(\".concat(den_p, \"-1)!\");\n                  retval = _.parse(format('(({0})^({3}-1)*e^(-(({2})*({0}))/({1})))/(({4})*({1})^({3}))', t, f.a, f.b, den_p, fact)); //wrap it up\n\n                  finalize();\n                } else {\n                  if (f.x.group === S && f.x.power.equals(2)) {\n                    if (!num.contains(s)) {\n                      retval = _.parse(format('(({1})*sin((sqrt(({2})*({3}))*({0}))/({2})))/sqrt(({2})*({3}))', t, num, f.a, f.b));\n                    } // a*s/(b*s^2+c^2)\n                    else {\n                      var a = new Symbol(1);\n\n                      if (num.group === CB) {\n                        var new_num = new Symbol(1);\n                        num.each(function (x) {\n                          if (x.contains(s)) new_num = _.multiply(new_num, x);else a = _.multiply(a, x);\n                        });\n                        num = new_num;\n                      } //we need more information about the denominator to decide\n\n\n                      var f2 = core.Utils.decompose_fn(num, s, true);\n                      var fn1, fn2, a_has_sin, b_has_cos, a_has_cos, b_has_sin;\n                      fn1 = f2.a;\n                      fn2 = f2.b;\n                      a_has_sin = fn1.containsFunction('sin');\n                      a_has_cos = fn1.containsFunction('cos');\n                      b_has_cos = fn2.containsFunction('cos');\n                      b_has_sin = fn2.containsFunction('sin');\n\n                      if (f2.x.value === s && f2.x.isLinear() && !(a_has_sin && b_has_cos || a_has_cos || b_has_sin)) {\n                        retval = _.parse(format('(({1})*cos((sqrt(({2})*({3}))*({0}))/({2})))/({2})', t, f2.a, f.a, f.b));\n                      } else {\n                        if (a_has_sin && b_has_cos) {\n                          var sin, cos;\n                          sin = fn1.findFunction('sin');\n                          cos = fn2.findFunction('cos'); //who has the s?\n\n                          if (sin.args[0].equals(cos.args[0]) && !sin.args[0].contains(s)) {\n                            var b, c, d, e;\n                            b = _.divide(fn2, cos.toUnitMultiplier()).toString();\n                            c = sin.args[0].toString();\n                            d = f.b;\n                            e = _.divide(fn1, sin.toUnitMultiplier());\n                            exp = '(({1})*({2})*cos({3})*sin(sqrt({4})*({0})))/sqrt({4})+({1})*sin({3})*({5})*cos(sqrt({4})*({0}))';\n                            retval = _.parse(format(exp, t, a, b, c, d, e));\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            } else if (f.x.power.num && f.x.power.num.equals(3) && f.x.power.den.equals(2) && num.contains('sqrt(pi)') && !num.contains(s) && num.isLinear()) {\n              var b = _.divide(num.clone(), _.parse('sqrt(pi)'));\n\n              retval = _.parse(format('(2*({2})*sqrt({0}))/({1})', t, f.a, b, num));\n            } else if (den_p.equals(2) && f.x.power.equals(2)) {\n              var a, d, exp;\n\n              if (!num.contains(s)) {\n                a = _.divide(num, new Symbol(2));\n                exp = '(({1})*sin((sqrt(({2})*({3}))*({0}))/({2})))/(({3})*sqrt(({2})*({3})))-(({1})*({0})*cos((sqrt(({2})*({3}))*({0}))/({2})))/(({2})*({3}))';\n                retval = _.parse(format(exp, t, a, f.a, f.b));\n              } else {\n                // Decompose the numerator to check value of s\n                f2 = core.Utils.decompose_fn(_.expand(num.clone()), s, true);\n\n                if (f2.x.isComposite()) {\n                  var s_terms = []; //first collect the factors e.g. (a)(bx)(cx^2+d)\n\n                  var symbols = num.collectSymbols(function (x) {\n                    x = Symbol.unwrapPARENS(x);\n                    var t = core.Utils.decompose_fn(x, s, true);\n                    t.symbol = x;\n                    return t;\n                  }). //then sort them by power hightest to lowest\n                  sort(function (a, b) {\n                    var p1, p2;\n                    p1 = a.x.value !== s ? 0 : a.x.power;\n                    p2 = b.x.value !== s ? 0 : b.x.power;\n                    return p2 - p1;\n                  });\n                  a = new Symbol(-1); // Grab only the ones which have s\n\n                  for (var i = 0; i < symbols.length; i++) {\n                    var fc = symbols[i];\n                    if (fc.x.value === s) s_terms.push(fc);else a = _.multiply(a, fc.symbol);\n                  } // The following 2 assumptions are made\n                  // 1. since the numerator was factored above then each s_term has a unique power\n                  // 2. because the terms are sorted by descending powers then the first item \n                  //    has the highest power\n                  // We can now check for the next type s(s^2-a^2)/(s^2+a^2)^2\n\n\n                  if (s_terms[0].x.power.equals(2) && s_terms[1].x.power.equals(1) && s_terms[1].b.equals(0) && !s_terms[0].b.equals(0)) {\n                    b = s_terms[0].a.negate();\n                    exp = '-(({1})*({2})*({5})*({0})*sin((sqrt(({4})*({5}))*({0}))/({4})))/' + '(2*({4})^2*sqrt(({4})*({5})))-(({1})*({3})*({0})*sin((sqrt(({4})*({5}))*({0}))/({4})))' + '/(2*({4})*sqrt(({4})*({5})))+(({1})*({2})*cos((sqrt(({4})*({5}))*({0}))/({4})))/({4})^2';\n                    retval = _.parse(format(exp, t, a, b, s_terms[0].b, f.a, f.b));\n                  }\n                } else {\n                  if (f2.x.isLinear()) {\n                    a = _.divide(f2.a, new Symbol(2));\n                    exp = '(({1})*({0})*sin((sqrt(({2})*({3}))*({0}))/({2})))/(({2})*sqrt(({2})*({3})))';\n                    retval = _.parse(format(exp, t, a, f.a, f.b));\n                  } else if (f2.x.power.equals(2)) {\n                    if (f2.b.equals(0)) {\n                      a = _.divide(f2.a, new Symbol(2));\n                      exp = '(({1})*sin((sqrt(({2})*({3}))*({0}))/({2})))/(({2})*sqrt(({2})*({3})))+(({1})*({0})*cos((sqrt(({2})*({3}))*({0}))/({2})))/({2})^2';\n                      retval = _.parse(format(exp, t, a, f.a, f.b));\n                    } else {\n                      a = _.divide(f2.a, new Symbol(2));\n                      d = f2.b.negate();\n                      exp = '-((({2})*({4})-2*({1})*({3}))*sin((sqrt(({2})*({3}))*({0}))/({2})))/(2*({2})*({3})*sqrt(({2})*({3})))+' + '(({4})*({0})*cos((sqrt(({2})*({3}))*({0}))/({2})))/(2*({2})*({3}))+(({1})*({0})*cos((sqrt(({2})*({3}))*({0}))/({2})))/({2})^2';\n                      retval = _.parse(format(exp, t, a, f.a, f.b, d));\n                    }\n                  }\n                }\n              }\n            } else if (symbol.isComposite()) {\n              // 1/(s+1)^2\n              if (den_p.equals(2) && f.x.group === S) {\n                retval = _.parse(\"(\".concat(m, \")*(\").concat(t, \")*e^(-(\").concat(f.b, \")*(\").concat(t, \"))\"));\n              } else {\n                retval = new Symbol(0);\n                symbol.each(function (x) {\n                  retval = _.add(retval, __.LaPlace.inverse(x, s_, t));\n                }, true);\n              }\n            }\n          }\n\n          if (!retval) {\n            retval = _.symfunction('ilt', [input_symbol, s_, t]);\n          }\n\n          return retval;\n        }, true);\n      }\n    },\n    Statistics: {\n      frequencyMap: function frequencyMap(arr) {\n        var map = {}; //get the frequency map\n\n        for (var i = 0, l = arr.length; i < l; i++) {\n          var e = arr[i],\n              key = e.toString();\n          if (!map[key]) //default it to zero\n            map[key] = 0;\n          map[key]++; //increment\n        }\n\n        return map;\n      },\n      sort: function sort(arr) {\n        return arr.sort(function (a, b) {\n          if (!a.isConstant() || !b.isConstant()) _.error('Unable to sort! All values must be numeric');\n          return a.multiplier.subtract(b.multiplier);\n        });\n      },\n      count: function count(arr) {\n        return new Symbol(arr.length);\n      },\n      sum: function sum(arr, x_) {\n        var sum = new Symbol(0);\n\n        for (var i = 0, l = arr.length; i < l; i++) {\n          var xi = arr[i].clone();\n\n          if (x_) {\n            sum = _.add(_.pow(_.subtract(xi, x_.clone()), new Symbol(2)), sum);\n          } else sum = _.add(xi, sum);\n        }\n\n        return sum;\n      },\n      mean: function mean() {\n        var args = [].slice.call(arguments); //handle arrays\n\n        if (isVector(args[0])) return __.Statistics.mean.apply(this, args[0].elements);\n        return _.divide(__.Statistics.sum(args), __.Statistics.count(args));\n      },\n      median: function median() {\n        var args = [].slice.call(arguments),\n            retval; //handle arrays\n\n        if (isVector(args[0])) return __.Statistics.median.apply(this, args[0].elements);\n\n        try {\n          var sorted = __.Statistics.sort(args);\n\n          var l = args.length;\n\n          if (core.Utils.even(l)) {\n            var mid = l / 2;\n            retval = __.Statistics.mean(sorted[mid - 1], sorted[mid]);\n          } else retval = sorted[Math.floor(l / 2)];\n        } catch (e) {\n          retval = _.symfunction('median', args);\n        }\n\n        return retval;\n      },\n      mode: function mode() {\n        var args = [].slice.call(arguments),\n            retval; //handle arrays\n\n        if (isVector(args[0])) return __.Statistics.mode.apply(this, args[0].elements);\n\n        var map = __.Statistics.frequencyMap(args); //the mode of 1 item is that item as per issue #310 (verified by Happypig375). \n\n\n        if (core.Utils.keys(map).length === 1) retval = args[0];else {\n          //invert by arraning them according to their frequency\n          var inverse = {};\n\n          for (var x in map) {\n            var freq = map[x]; //check if it's in the inverse already\n\n            if (!(freq in inverse)) inverse[freq] = x;else {\n              var e = inverse[freq]; //if it's already an array then just add it\n\n              if (isArray(e)) e.push(x); //convert it to and array\n              else inverse[freq] = [x, inverse[freq]];\n            }\n          } //the keys now represent the maxes. We want the max of those keys\n\n\n          var max = inverse[Math.max.apply(null, core.Utils.keys(inverse))]; //check it's an array. If it is then map over the results and convert \n          //them to Symbol\n\n          if (isArray(max)) {\n            retval = _.symfunction('mode', max.sort());\n          } else retval = _.parse(max);\n        }\n        return retval;\n      },\n      gVariance: function gVariance(k, args) {\n        var x_ = __.Statistics.mean.apply(__.Statistics, args),\n            sum = __.Statistics.sum(args, x_);\n\n        return _.multiply(k, sum);\n      },\n      variance: function variance() {\n        var args = [].slice.call(arguments); //handle arrays\n\n        if (isVector(args[0])) return __.Statistics.variance.apply(this, args[0].elements);\n\n        var k = _.divide(new Symbol(1), __.Statistics.count(args));\n\n        return __.Statistics.gVariance(k, args);\n      },\n      sampleVariance: function sampleVariance() {\n        var args = [].slice.call(arguments); //handle arrays\n\n        if (isVector(args[0])) return __.Statistics.sampleVariance.apply(this, args[0].elements);\n\n        var k = _.divide(new Symbol(1), _.subtract(__.Statistics.count(args), new Symbol(1)));\n\n        return __.Statistics.gVariance(k, args);\n      },\n      standardDeviation: function standardDeviation() {\n        var args = [].slice.call(arguments); //handle arrays\n\n        if (isVector(args[0])) return __.Statistics.standardDeviation.apply(this, args[0].elements);\n        return _.pow(__.Statistics.variance.apply(__.Statistics, args), new Symbol(1 / 2));\n      },\n      sampleStandardDeviation: function sampleStandardDeviation() {\n        var args = [].slice.call(arguments); //handle arrays\n\n        if (isVector(args[0])) return __.Statistics.sampleStandardDeviation.apply(this, args[0].elements);\n        return _.pow(__.Statistics.sampleVariance.apply(__.Statistics, args), new Symbol(1 / 2));\n      },\n      zScore: function zScore(x, mean, stdev) {\n        return _.divide(_.subtract(x, mean), stdev);\n      }\n    },\n    Units: {\n      table: {\n        foot: '12 inch',\n        meter: '100 cm',\n        decimeter: '10 cm'\n      }\n    }\n  };\n\n  nerdamer.register([{\n    name: 'laplace',\n    visible: true,\n    numargs: 3,\n    build: function build() {\n      return __.LaPlace.transform;\n    }\n  }, {\n    name: 'ilt',\n    visible: true,\n    numargs: 3,\n    build: function build() {\n      return __.LaPlace.inverse;\n    }\n  }, //statistical\n  {\n    name: 'mean',\n    visible: true,\n    numargs: -1,\n    build: function build() {\n      return __.Statistics.mean;\n    }\n  }, {\n    name: 'median',\n    visible: true,\n    numargs: -1,\n    build: function build() {\n      return __.Statistics.median;\n    }\n  }, {\n    name: 'mode',\n    visible: true,\n    numargs: -1,\n    build: function build() {\n      return __.Statistics.mode;\n    }\n  }, {\n    name: 'smpvar',\n    visible: true,\n    numargs: -1,\n    build: function build() {\n      return __.Statistics.sampleVariance;\n    }\n  }, {\n    name: 'variance',\n    visible: true,\n    numargs: -1,\n    build: function build() {\n      return __.Statistics.variance;\n    }\n  }, {\n    name: 'smpstdev',\n    visible: true,\n    numargs: -1,\n    build: function build() {\n      return __.Statistics.sampleStandardDeviation;\n    }\n  }, {\n    name: 'stdev',\n    visible: true,\n    numargs: -1,\n    build: function build() {\n      return __.Statistics.standardDeviation;\n    }\n  }, {\n    name: 'zscore',\n    visible: true,\n    numargs: 3,\n    build: function build() {\n      return __.Statistics.zScore;\n    }\n  }]); //link registered functions externally\n\n  nerdamer.updateAPI();\n})(); // Added for all.min.js\n\n\nif (typeof module !== 'undefined') {\n  module.exports = nerdamer;\n}\n\n;","/*\r\n * Author : Martin Donk\r\n * Website : http://www.nerdamer.com\r\n * Email : martin.r.donk@gmail.com\r\n * Source : https://github.com/jiggzson/nerdamer\r\n */\n\n/* global module */\nif (typeof module !== 'undefined') {\n  var nerdamer = require('./nerdamer.core.js');\n\n  require('./Calculus.js');\n\n  require('./Algebra.js');\n}\n\n(function () {\n  //handle imports\n  var core = nerdamer.getCore(),\n      _ = core.PARSER,\n      _A = core.Algebra,\n      _C = core.Calculus,\n      explode = _C.integration.decompose_arg,\n      evaluate = core.Utils.evaluate,\n      remove = core.Utils.remove,\n      format = core.Utils.format,\n      build = core.Utils.build,\n      knownVariable = core.Utils.knownVariable,\n      Symbol = core.Symbol,\n      isSymbol = core.Utils.isSymbol,\n      variables = core.Utils.variables,\n      S = core.groups.S,\n      PL = core.groups.PL,\n      CB = core.groups.CB,\n      CP = core.groups.CP,\n      FN = core.groups.FN,\n      Settings = core.Settings,\n      range = core.Utils.range,\n      isArray = core.Utils.isArray; // The search radius for the roots\n\n  core.Settings.SOLVE_RADIUS = 1000; // The maximum number to fish for on each side of the zero\n\n  core.Settings.ROOTS_PER_SIDE = 10; // Covert the number to multiples of pi if possible\n\n  core.Settings.make_pi_conversions = false; // The step size\n\n  core.Settings.STEP_SIZE = 0.1; // The epsilon size\n\n  core.Settings.EPSILON = 1e-13; //the maximum iterations for Newton's method\n\n  core.Settings.MAX_NEWTON_ITERATIONS = 200; //the maximum number of time non-linear solve tries another jump point\n\n  core.Settings.MAX_NON_LINEAR_TRIES = 12; //the amount of iterations the function will start to jump at\n\n  core.Settings.NON_LINEAR_JUMP_AT = 50; //the size of the jump\n\n  core.Settings.NON_LINEAR_JUMP_SIZE = 100; //the original starting point for nonlinear solving\n\n  core.Settings.NON_LINEAR_START = 0.01; //When points are generated as starting points for Newton's method, they are sliced into small\n  //slices to make sure that we have convergence on the right point. This defines the \n  //size of the slice\n\n  core.Settings.NEWTON_SLICES = 200; //The epsilon used in Newton's iteration\n\n  core.Settings.NEWTON_EPSILON = Number.EPSILON * 2; //The distance in which two solutions are deemed the same\n\n  core.Settings.SOLUTION_PROXIMITY = 1e-14; //Indicate wheter to filter the solutions are not\n\n  core.Settings.FILTER_SOLUTIONS = true; //the maximum number of recursive calls\n\n  core.Settings.MAX_SOLVE_DEPTH = 10; // The tolerance that's considered close enough to zero\n\n  core.Settings.ZERO_EPSILON = 1e-9; // The maximum iteration for the bisection method incase of some JS strangeness\n\n  core.Settings.MAX_BISECTION_ITER = 2000; // The tolerance for the bisection method\n\n  core.Settings.BI_SECTION_EPSILON = 1e-12;\n\n  core.Symbol.prototype.hasTrig = function () {\n    return this.containsFunction(['cos', 'sin', 'tan', 'cot', 'csc', 'sec']);\n  };\n\n  core.Symbol.prototype.hasNegativeTerms = function () {\n    if (this.isComposite()) {\n      for (var x in this.symbols) {\n        var sym = this.symbols[x];\n        if (sym.group === PL && sym.hasNegativeTerms() || this.symbols[x].power.lessThan(0)) return true;\n      }\n    }\n\n    return false;\n  };\n  /* nerdamer version 0.7.x and up allows us to make better use of operator overloading\r\n   * As such we can have this data type be supported completely outside of the core.\r\n   * This is an equation that has a left hand side and a right hand side\r\n   */\n\n\n  function Equation(lhs, rhs) {\n    if (rhs.isConstant() && lhs.isConstant() && !lhs.equals(rhs) || lhs.equals(core.Settings.IMAGINARY) && rhs.isConstant(true) || rhs.equals(core.Settings.IMAGINARY) && lhs.isConstant(true)) throw new core.exceptions.NerdamerValueError(lhs.toString() + ' does not equal ' + rhs.toString());\n    this.LHS = lhs; //left hand side\n\n    this.RHS = rhs; //right and side\n  }\n\n  ; //UTILS ##!!\n\n  Equation.prototype = {\n    toString: function toString() {\n      return this.LHS.toString() + '=' + this.RHS.toString();\n    },\n    text: function text(option) {\n      return this.LHS.text(option) + '=' + this.RHS.text(option);\n    },\n    toLHS: function toLHS(expand) {\n      expand = typeof expand === 'undefined' ? true : false;\n      var eqn;\n\n      if (!expand) {\n        eqn = this.clone();\n      } else {\n        eqn = this.removeDenom();\n      }\n\n      var a = eqn.LHS;\n      var b = eqn.RHS;\n\n      if (a.isConstant(true) && !b.isConstant(true)) {\n        // Swap them to avoid confusing parser and cause an infinite loop\n        var _ref = [b, a];\n        a = _ref[0];\n        b = _ref[1];\n      }\n\n      var _t = _.subtract(a, b);\n\n      var retval = expand ? _.expand(_t) : _t; // Quick workaround for issue #636\n      // This basically borrows the removeDenom method from the Equation class. \n      // TODO: Make this function a stand-alone function\n\n      retval = new Equation(retval, new Symbol(0)).removeDenom().LHS;\n      return retval;\n    },\n    removeDenom: function removeDenom() {\n      var a = this.LHS.clone();\n      var b = this.RHS.clone(); //remove the denominator on both sides\n\n      var den = _.multiply(a.getDenom(), b.getDenom());\n\n      a = _.expand(_.multiply(a, den.clone()));\n      b = _.expand(_.multiply(b, den)); //swap the groups\n\n      if (b.group === CP && b.group !== CP) {\n        var t = a;\n        a = b;\n        b = t; //swap\n      } //scan to eliminate denominators\n\n\n      if (a.group === CB) {\n        var t = new Symbol(a.multiplier),\n            newRHS = b.clone();\n        a.each(function (y) {\n          if (y.power.lessThan(0)) newRHS = _.divide(newRHS, y);else t = _.multiply(t, y);\n        });\n        a = t;\n        b = newRHS;\n      } else if (a.group === CP) {\n        //the logic: loop through each and if it has a denominator then multiply it out on both ends\n        //and then start over\n        for (var x in a.symbols) {\n          var sym = a.symbols[x];\n\n          if (sym.group === CB) {\n            for (var y in sym.symbols) {\n              var sym2 = sym.symbols[y];\n\n              if (sym2.power.lessThan(0)) {\n                return new Equation(_.expand(_.multiply(sym2.clone().toLinear(), a)), _.expand(_.multiply(sym2.clone().toLinear(), b)));\n              }\n            }\n          }\n        }\n      }\n\n      return new Equation(a, b);\n    },\n    clone: function clone() {\n      return new Equation(this.LHS.clone(), this.RHS.clone());\n    },\n    sub: function sub(x, y) {\n      var clone = this.clone();\n      clone.LHS = clone.LHS.sub(x.clone(), y.clone());\n      clone.RHS = clone.RHS.sub(x.clone(), y.clone());\n      return clone;\n    },\n    isZero: function isZero() {\n      return core.Utils.evaluate(this.toLHS()).equals(0);\n    },\n    latex: function latex(option) {\n      return [this.LHS.latex(option), this.RHS.latex(option)].join('=');\n    }\n  }; //overwrite the equals function\n\n  _.equals = function (a, b) {\n    return new Equation(a, b);\n  }; // Extend simplify\n\n\n  (function () {\n    var simplify = _.functions.simplify[0];\n\n    _.functions.simplify[0] = function (symbol) {\n      if (symbol instanceof Equation) {\n        symbol.LHS = simplify(symbol.LHS);\n        symbol.RHS = simplify(symbol.RHS);\n        return symbol;\n      } // Just call the original simplify\n\n\n      return simplify(symbol);\n    };\n  })();\n  /**\r\n   * Sets two expressions equal\r\n   * @param {Symbol} symbol\r\n   * @returns {Expression}\r\n   */\n\n\n  core.Expression.prototype.equals = function (symbol) {\n    if (symbol instanceof core.Expression) symbol = symbol.symbol; //grab the symbol if it's an expression\n\n    var eq = new Equation(this.symbol, symbol);\n    return eq;\n  };\n\n  core.Expression.prototype.solveFor = function (x) {\n    var symbol;\n\n    if (this.symbol instanceof Equation) {\n      //exit right away if we already have the answer\n      //check the LHS\n      if (this.symbol.LHS.isConstant() && this.symbol.RHS.equals(x)) return new core.Expression(this.symbol.LHS); //check the RHS\n\n      if (this.symbol.RHS.isConstant() && this.symbol.LHS.equals(x)) return new core.Expression(this.symbol.RHS); //otherwise just bring it to LHS\n\n      symbol = this.symbol.toLHS();\n    } else {\n      symbol = this.symbol;\n    }\n\n    return _solve(symbol, x).map(function (x) {\n      return new core.Expression(x);\n    });\n  };\n\n  core.Expression.prototype.expand = function () {\n    if (this.symbol instanceof Equation) {\n      var clone = this.symbol.clone();\n      clone.RHS = _.expand(clone.RHS);\n      clone.LHS = _.expand(clone.LHS);\n      return new core.Expression(clone);\n    }\n\n    return new core.Expression(_.expand(this.symbol));\n  };\n\n  core.Expression.prototype.variables = function () {\n    if (this.symbol instanceof Equation) return core.Utils.arrayUnique(variables(this.symbol.LHS).concat(variables(this.symbol.RHS)));\n    return variables(this.symbol);\n  };\n\n  var setEq = function setEq(a, b) {\n    return _.equals(a, b);\n  }; //link the Equation class back to the core\n\n\n  core.Equation = Equation; //Loops through an array and attempts to fails a test. Stops if manages to fail.\n\n  var checkAll = core.Utils.checkAll = function (args, test) {\n    for (var i = 0; i < args.length; i++) {\n      if (test(args[i])) return false;\n    }\n\n    return true;\n  }; //version solve\n\n\n  var __ = core.Solve = {\n    version: '2.0.3',\n    solutions: [],\n    solve: function solve(eq, variable) {\n      var solution = _solve(eq, String(variable));\n\n      return new core.Vector(solution); //return new core.Vector(solve(eq.toString(), variable ? variable.toString() : variable));\n    },\n\n    /**\r\n     * Brings the equation to LHS. A string can be supplied which will be converted to an Equation\r\n     * @param {Equation|String} eqn\r\n     * @returns {Symbol}\r\n     */\n    toLHS: function toLHS(eqn, expand) {\n      if (isSymbol(eqn)) return eqn; //If it's an equation then call its toLHS function instead\n\n      if (!(eqn instanceof Equation)) {\n        var es = eqn.split('='); //convert falsey values to zero\n\n        es[1] = es[1] || '0';\n        eqn = new Equation(_.parse(es[0]), _.parse(es[1]));\n      }\n\n      return eqn.toLHS(expand);\n    },\n    //        getSystemVariables: function(eqns) {\n    //            vars = variables(eqns[0], null, null, true);\n    //\n    //            //get all variables\n    //            for (var i = 1, l=eqns.length; i < l; i++)\n    //                vars = vars.concat(variables(eqns[i]));\n    //            //remove duplicates\n    //            vars = core.Utils.arrayUnique(vars).sort();\n    //            \n    //            //done\n    //            return vars;\n    //        },\n\n    /**\r\n     * Solve a set of circle equations. \r\n     * @param {Symbol[]} eqns\r\n     * @returns {Array}\r\n     */\n    solveCircle: function solveCircle(eqns, vars) {\n      // Convert the variables to symbols\n      var svars = vars.map(function (x) {\n        return _.parse(x);\n      });\n      var deg = [];\n      var solutions = []; // Get the degree for the equations\n\n      for (var i = 0; i < eqns.length; i++) {\n        var d = [];\n\n        for (var j = 0; j < svars.length; j++) {\n          d.push(Number(core.Algebra.degree(eqns[i], svars[j])));\n        } // Store the total degree\n\n\n        d.push(core.Utils.arraySum(d, true));\n        deg.push(d);\n      }\n\n      var a = eqns[0];\n      var b = eqns[1];\n\n      if (deg[0][2] > deg[1][2]) {\n        var _ref2 = [a, b];\n        b = _ref2[0];\n        a = _ref2[1];\n        var _ref3 = [deg[0], deg[1]];\n        deg[1] = _ref3[0];\n        deg[0] = _ref3[1];\n      } // Only solve it's truly a circle\n\n\n      if (deg[0][0] === 1 && deg[0][2] === 2 && deg[1][0] === 2 && deg[1][2] === 4) {\n        // For clarity we'll refer to the variables as x and y\n        var x = vars[0];\n        var y = vars[1]; // We can now get the two points for y\n\n        var y_points = _solve(_.parse(b, knownVariable(x, _solve(_.parse(a), x)[0])), y).map(function (x) {\n          return x.toString();\n        }); // Since we now know y we can get the two x points from the first equation\n\n\n        var x_points = [_solve(_.parse(a, knownVariable(y, y_points[0])))[0].toString()];\n\n        if (y_points[1]) {\n          x_points.push(_solve(_.parse(a, knownVariable(y, y_points[1])))[0].toString());\n        }\n\n        if (Settings.SOLUTIONS_AS_OBJECT) {\n          var solutions = {};\n          solutions[x] = x_points;\n          solutions[y] = y_points;\n        } else {\n          y_points.unshift(y);\n          x_points.unshift(x);\n          solutions = [x_points, y_points];\n        }\n      }\n\n      return solutions;\n    },\n\n    /**\r\n     * Solve a system of nonlinear equations\r\n     * @param {Symbol[]} eqns The array of equations\r\n     * @param {number} tries The maximum number of tries\r\n     * @param {number} start The starting point where to start looking for solutions\r\n     * @returns {Array}\r\n     */\n    solveNonLinearSystem: function solveNonLinearSystem(eqns, tries, start) {\n      if (tries < 0) {\n        return []; //can't find a solution\n      }\n\n      start = typeof start === 'undefined' ? core.Settings.NON_LINEAR_START : start; //the maximum number of times to jump\n\n      var max_tries = core.Settings.MAX_NON_LINEAR_TRIES; //halfway through the tries\n\n      var halfway = Math.floor(max_tries / 2); //initialize the number of tries to 10 if not specified\n\n      tries = typeof tries === 'undefined' ? max_tries : tries; //a point at which we check to see if we're converging. By inspection it seems that we can\n      //use around 20 iterations to see if we're converging. If not then we retry a jump of x\n\n      var jump_at = core.Settings.NON_LINEAR_JUMP_AT; //we jump by this many points at each pivot point\n\n      var jump = core.Settings.NON_LINEAR_JUMP_SIZE; //used to check if we actually found a solution or if we gave up. Assume we will find a solution.\n\n      var found = true;\n\n      var create_subs = function create_subs(vars, matrix) {\n        return vars.map(function (x, i) {\n          return Number(matrix.get(i, 0));\n        });\n      };\n\n      var vars = core.Utils.arrayGetVariables(eqns);\n      var jacobian = core.Matrix.jacobian(eqns, vars, function (x) {\n        return build(x, vars);\n      }, true);\n      var max_iter = core.Settings.MAX_NEWTON_ITERATIONS;\n      var o, y, iters, xn1, norm, lnorm, xn, d;\n      var f_eqns = eqns.map(function (eq) {\n        return build(eq, vars);\n      });\n      var J = jacobian.map(function (e) {\n        return build(e, vars);\n      }, true); //initial values\n\n      xn1 = core.Matrix.cMatrix(0, vars); //initialize the c matrix with something close to 0. \n\n      var c = core.Matrix.cMatrix(start, vars);\n      iters = 0; //start of algorithm\n\n      do {\n        //if we've reached the max iterations then exit\n        if (iters > max_iter) {\n          break;\n          found = false;\n        } //set the substitution object\n\n\n        o = create_subs(vars, c); //set xn\n\n        xn = c.clone(); //make all the substitutions for each of the equations\n\n        f_eqns.forEach(function (f, i) {\n          c.set(i, 0, f.apply(null, o));\n        });\n        var m = new core.Matrix();\n        J.each(function (fn, i, j) {\n          var ans = fn.apply(null, o);\n          m.set(i, j, ans);\n        });\n        m = m.invert(); //preform the elimination\n\n        y = _.multiply(m, c).negate(); //the callback is to avoid overflow in the coeffient denonimator\n        //it converts it to a decimal and then back to a fraction. Some precision\n        //is lost be it's better than overflow. \n\n        d = y.subtract(xn1, function (x) {\n          return _.parse(Number(x));\n        });\n        xn1 = xn.add(y, function (x) {\n          return _.parse(Number(x));\n        }); //move c is now xn1\n\n        c = xn1; //get the norm\n        //the expectation is that we're converging to some answer as this point regardless of where we start\n        //this may have to be adjusted at some point because of erroneous assumptions\n\n        if (iters >= jump_at) {\n          //check the norm. If the norm is greater than one then it's time to try another point\n          if (norm > 1) {\n            //reset the start point at halway\n            if (tries === halfway) start = 0;\n            var sign = tries > halfway ? 1 : -1; //which side are we incrementing\n            //we increment +n at one side and -n at the other. \n\n            n = tries % Math.floor(halfway) + 1; //adjust the start point\n\n            start += sign * n * jump; //call restart\n\n            return __.solveNonLinearSystem(eqns, --tries, start);\n          }\n        }\n\n        lnorm = norm;\n        iters++;\n        norm = d.max(); //exit early. Revisit if we get bugs\n\n        if (Number(norm) === Number(lnorm)) {\n          break;\n        }\n      } while (Number(norm) >= Number.EPSILON); //return a blank set if nothing was found;\n\n\n      if (!found) return []; //return c since that's the answer\n\n      return __.systemSolutions(c, vars, true, function (x) {\n        return core.Utils.round(Number(x), 14);\n      });\n    },\n    systemSolutions: function systemSolutions(result, vars, expand_result, callback) {\n      var solutions = core.Settings.SOLUTIONS_AS_OBJECT ? {} : [];\n      result.each(function (e, idx) {\n        var solution = (expand_result ? _.expand(e) : e).valueOf();\n        if (callback) solution = callback.call(e, solution);\n        var variable = vars[idx];\n\n        if (core.Settings.SOLUTIONS_AS_OBJECT) {\n          solutions[variable] = solution;\n        } else solutions.push([variable, solution]);\n        /*NO*/\n\n      }); //done\n\n      return solutions;\n    },\n\n    /**\r\n     * Solves a system of equations by substitution. This is useful when\r\n     * no distinct solution exists. e.g. a line, plane, etc.\r\n     * @param {Array} eqns\r\n     * @returns {Array}\r\n     */\n    solveSystemBySubstitution: function solveSystemBySubstitution(eqns) {\n      // Assume at least 2 equations. The function variables will just return an empty array if undefined is provided\n      var vars_a = variables(eqns[0]);\n      var vars_b = variables(eqns[1]); // Check if it's a circle equation\n\n      if (eqns.length === 2 && vars_a.length === 2 && core.Utils.arrayEqual(vars_a, vars_b)) {\n        return __.solveCircle(eqns, vars_a);\n      }\n\n      return []; // return an empty set\n    },\n    //https://www.lakeheadu.ca/sites/default/files/uploads/77/docs/RemaniFinal.pdf\n\n    /**\r\n     * Solves a systems of equations\r\n     * @param {Array} eqns An array of equations\r\n     * @param {Array} var_array An array of variables\r\n     * @returns {Array|object}\r\n     */\n    solveSystem: function solveSystem(eqns, var_array) {\n      //check if a var_array was specified\n      //nerdamer.clearVars();// this deleted ALL variables: not what we want\n      //parse all the equations to LHS. Remember that they come in as strings\n      for (var i = 0; i < eqns.length; i++) {\n        eqns[i] = __.toLHS(eqns[i]);\n      }\n\n      var l = eqns.length,\n          m = new core.Matrix(),\n          c = new core.Matrix(),\n          expand_result = false,\n          vars;\n\n      if (typeof var_array === 'undefined') {\n        //check to make sure that all the equations are linear\n        if (!_A.allLinear(eqns)) {\n          try {\n            return __.solveNonLinearSystem(eqns);\n          } catch (e) {\n            if (e instanceof core.exceptions.DivisionByZero) {\n              return __.solveSystemBySubstitution(eqns);\n            }\n          }\n        }\n\n        vars = core.Utils.arrayGetVariables(eqns); // If the system only has one variable then we solve for the first one and \n        // then test the remaining equations with that solution. If any of the remaining\n        // equation fails then the system has no solution\n\n        if (vars.length === 1) {\n          var n = 0,\n              sol,\n              e;\n\n          do {\n            var e = eqns[n].clone();\n\n            if (n > 0) {\n              e = e.sub(vars[0], sol[0]);\n            }\n\n            sol = _solve(e, vars[0]); // Skip the first one\n\n            if (n === 0) continue;\n          } while (++n < eqns.length); // Format the output\n\n\n          var solutions;\n\n          if (Settings.SOLUTIONS_AS_OBJECT) {\n            solutions = {};\n            solutions[vars[0]] = sol;\n          } else if (sol.length === 0) {\n            solutions = sol; // No solutions\n          } else {\n            solutions = [vars[0], sol];\n          }\n\n          return solutions;\n        } // Deal with redundant equations as expressed in #562\n        // The fix is to remove all but the number of equations equal to the number\n        // of variables. We then solve those and then evaluate the remaining equations\n        // with those solutions. If the all equal true then those are just redundant\n        // equations and we can return the solution set.\n\n\n        if (vars.length < eqns.length) {\n          var reduced = [];\n          var n = eqns.length;\n\n          for (var i = 0; i < n - 1; i++) {\n            reduced.push(_.parse(eqns[i]));\n          }\n\n          var knowns = {};\n\n          var solutions = __.solveSystem(reduced, vars); // The solutions may have come back as an array\n\n\n          if (Array.isArray(solutions)) {\n            solutions.forEach(function (sol) {\n              knowns[sol[0]] = sol[1];\n            });\n          } else {\n            knowns = solutions;\n          } // Start by assuming they will all evaluate to zero. If even one fails\n          // then all zero will be false\n\n\n          var all_zero = true; // Check if the last solution evalutes to zero given these solutions\n\n          for (var i = n - 1; i < n; i++) {\n            if (!_.parse(eqns[i], knowns).equals(0)) {\n              all_zero = false;\n            }\n          }\n\n          if (all_zero) {\n            return solutions;\n          }\n        } // deletes only the variables of the linear equations in the nerdamer namespace\n\n\n        for (var i = 0; i < vars.length; i++) {\n          nerdamer.setVar(vars[i], \"delete\");\n        } // TODO: move this to cMatrix or something similar\n        // populate the matrix\n\n\n        for (var i = 0; i < l; i++) {\n          var e = eqns[i]; //store the expression\n          // Iterate over the columns\n\n          for (var j = 0; j < vars.length; j++) {\n            var v = vars[j];\n            var coeffs = [];\n            e.each(function (x) {\n              if (x.contains(v)) {\n                coeffs = coeffs.concat(x.coeffs());\n              }\n            });\n            var cf = core.Utils.arraySum(coeffs);\n            m.set(i, j, cf);\n          } //strip the variables from the symbol so we're left with only the zeroth coefficient\n          //start with the symbol and remove each variable and its coefficient\n\n\n          var num = e.clone();\n          vars.map(function (e) {\n            num = num.stripVar(e, true);\n          });\n          c.set(i, 0, num.negate());\n        }\n      } else {\n        /**\r\n         * The idea is that we loop through each equation and then expand it. Afterwards we loop\r\n         * through each term and see if and check to see if it matches one of the variables.\r\n         * When a match is found we mark it. No other match should be found for that term. If it\r\n         * is we stop since it's not linear.\r\n         */\n        vars = var_array;\n        expand_result = true;\n\n        for (i = 0; i < l; i++) {\n          //prefill\n          c.set(i, 0, new Symbol(0));\n\n          var e = _.expand(eqns[i]).collectSymbols(); //expand and store\n          //go trough each of the variables\n\n\n          for (var j = 0; j < var_array.length; j++) {\n            m.set(i, j, new Symbol(0));\n            var v = var_array[j]; //go through the terms and sort the variables\n\n            for (var k = 0; k < e.length; k++) {\n              var term = e[k],\n                  check = false;\n\n              for (var z = 0; z < var_array.length; z++) {\n                //check to see if terms contain multiple variables\n                if (term.contains(var_array[z])) {\n                  if (check) core.err('Multiple variables found for term ' + term);\n                  check = true;\n                }\n              } //we made sure that every term contains one variable so it's safe to assume that if the\n              //variable is found then the remainder is the coefficient.\n\n\n              if (term.contains(v)) {\n                var tparts = explode(remove(e, k), v);\n                m.set(i, j, _.add(m.get(i, j), tparts[0]));\n              }\n            }\n          } //all the remaining terms go to the c matrix\n\n\n          for (k = 0; k < e.length; k++) {\n            c.set(i, 0, _.add(c.get(i, 0), e[k]));\n          }\n        } //consider case (a+b)*I+u\n\n      } //check if the system has a distinct solution\n\n\n      if (vars.length !== eqns.length || m.determinant().equals(0)) {\n        // solve the system by hand\n        //return __.solveSystemBySubstitution(eqns, vars, m, c);\n        throw new core.exceptions.SolveError('System does not have a distinct solution');\n      } // Use M^-1*c to solve system\n\n\n      m = m.invert();\n      var result = m.multiply(c); //correct the sign as per issue #410\n\n      if (core.Utils.isArray(var_array)) result.each(function (x) {\n        return x.negate();\n      });\n      return __.systemSolutions(result, vars, expand_result);\n    },\n\n    /**\r\n     * The quadratic function but only one side.\r\n     * @param {Symbol} c\r\n     * @param {Symbol} b\r\n     * @param {Symbol} a\r\n     * @returns {Symbol}\r\n     */\n    quad: function quad(c, b, a) {\n      var discriminant = _.subtract(_.pow(b.clone(), Symbol(2)), _.multiply(_.multiply(a.clone(), c.clone()), Symbol(4)))\n      /*b^2 - 4ac*/\n      ; // Fix for #608\n\n\n      discriminant = _.expand(discriminant);\n\n      var det = _.pow(discriminant, Symbol(0.5));\n\n      var den = _.parse(_.multiply(new Symbol(2), a.clone()));\n\n      var retval = [_.parse(format('(-({0})+({1}))/({2})', b, det, den)), _.parse(format('(-({0})-({1}))/({2})', b, det, den))];\n      return retval;\n    },\n\n    /**\r\n     * The cubic equation\r\n     * http://math.stackexchange.com/questions/61725/is-there-a-systematic-way-of-solving-cubic-equations\r\n     * @param {Symbol} d_o\r\n     * @param {Symbol} c_o\r\n     * @param {Symbol} b_o\r\n     * @param {Symbol} a_o\r\n     * @returns {Array}\r\n     */\n    cubic: function cubic(d_o, c_o, b_o, a_o) {\n      //convert everything to text\n      var a = a_o.text(),\n          b = b_o.text(),\n          c = c_o.text(),\n          d = d_o.text();\n      var t = \"(-(\".concat(b, \")^3/(27*(\").concat(a, \")^3)+(\").concat(b, \")*(\").concat(c, \")/(6*(\").concat(a, \")^2)-(\").concat(d, \")/(2*(\").concat(a, \")))\");\n      var u = \"((\".concat(c, \")/(3*(\").concat(a, \"))-(\").concat(b, \")^2/(9*(\").concat(a, \")^2))\");\n      var v = \"(\".concat(b, \")/(3*(\").concat(a, \"))\");\n      var x = \"((\".concat(t, \")+sqrt((\").concat(t, \")^2+(\").concat(u, \")^3))^(1/3)+((\").concat(t, \")-sqrt((\").concat(t, \")^2+(\").concat(u, \")^3))^(1/3)-(\").concat(v, \")\"); // Convert a to one\n\n      var w = '1/2+sqrt(3)/2*i'; // Cube root of unity\n\n      return [_.parse(x), _.parse(\"(\".concat(x, \")(\").concat(w, \")\")), _.parse(\"(\".concat(x, \")(\").concat(w, \")^2\"))];\n    },\n\n    /**\r\n     * The quartic equation\r\n     * @param {Symbol} e\r\n     * @param {Symbol} d\r\n     * @param {Symbol} c\r\n     * @param {Symbol} b\r\n     * @param {Symbol} a\r\n     * @returns {Array}\r\n     */\n    quartic: function quartic(e, d, c, b, a) {\n      var scope = {};\n      core.Utils.arrayUnique(variables(a).concat(variables(b)).concat(variables(c)).concat(variables(d)).concat(variables(e))).map(function (x) {\n        scope[x] = 1;\n      });\n      a = a.toString();\n      b = b.toString();\n      c = c.toString();\n      d = d.toString();\n      e = e.toString();\n      var p, q, D, D0, D1, Q, x1, x2, x3, x4;\n      /*var D = core.Utils.block('PARSE2NUMBER', function() {\r\n       return _.parse(format(\"256*({0})^3*({4})^3-192*({0})^2*({1})*({3})*({4})^2-128*({0})^2*({2})^2*({4})^2+144*({0})^2*({2})*({3})^2*({4})\"+\r\n       \"-27*({0})^2*({3})^4+144*({0})*({1})^2*({2})*({4})^2-6*({0})*({1})^2*({3})^2*({4})-80*({0})*({1})*({2})^2*({3})*({4})+18*({0})*({1})*({2})*({3})^3\"+\r\n       \"+16*({0})*({2})^4*({4})-4*({0})*({2})^3*({3})^2-27*({1})^4*({4})^2+18*({1})^3*({2})*({3})*({4})-4*({1})^3*({3})^3-4*({1})^2*({2})^3*({4})+({1})^2*({2})^2*({3})^2\", \r\n       a, b, c, d, e), scope);\r\n       });*/\n\n      p = _.parse(format(\"(8*({0})*({2})-3*({1})^2)/(8*({0})^2)\", a, b, c)).toString(); //a, b, c\n\n      q = _.parse(format(\"(({1})^3-4*({0})*({1})*({2})+8*({0})^2*({3}))/(8*({0})^3)\", a, b, c, d)).toString(); //a, b, c, d, e\n\n      D0 = _.parse(format(\"12*({0})*({4})-3*({1})*({3})+({2})^2\", a, b, c, d, e)).toString(); //a, b, c, d, e\n\n      D1 = _.parse(format(\"2*({2})^3-9*({1})*({2})*({3})+27*({1})^2*({4})+27*({0})*({3})^2-72*({0})*({2})*({4})\", a, b, c, d, e)).toString(); //a, b, c, d, e\n\n      Q = _.parse(format(\"((({1})+(({1})^2-4*({0})^3)^(1/2))/2)^(1/3)\", D0, D1)).toString(); //D0, D1\n\n      S = _.parse(format(\"(1/2)*(-(2/3)*({1})+(1/(3*({0}))*(({2})+(({3})/({2})))))^(1/2)\", a, p, Q, D0)).toString(); //a, p, Q, D0\n\n      x1 = _.parse(format(\"-(({1})/(4*({0})))-({4})+(1/2)*sqrt(-4*({4})^2-2*({2})+(({3})/({4})))\", a, b, p, q, S)); //a, b, p, q, S\n\n      x2 = _.parse(format(\"-(({1})/(4*({0})))-({4})-(1/2)*sqrt(-4*({4})^2-2*({2})+(({3})/({4})))\", a, b, p, q, S)); //a, b, p, q, S\n\n      x3 = _.parse(format(\"-(({1})/(4*({0})))+({4})+(1/2)*sqrt(-4*({4})^2-2*({2})-(({3})/({4})))\", a, b, p, q, S)); //a, b, p, q, S\n\n      x4 = _.parse(format(\"-(({1})/(4*({0})))+({4})-(1/2)*sqrt(-4*({4})^2-2*({2})-(({3})/({4})))\", a, b, p, q, S)); //a, b, p, q, S\n\n      return [x1, x2, x3, x4];\n    },\n\n    /**\r\n     * Breaks the equation up in its factors and tries to solve the smaller parts\r\n     * @param {Symbol} symbol\r\n     * @param {String} solve_for\r\n     * @returns {Array}\r\n     */\n    divideAndConquer: function divideAndConquer(symbol, solve_for) {\n      var sols = []; //see if we can solve the factors\n\n      var factors = core.Algebra.Factor.factor(symbol);\n\n      if (factors.group === CB) {\n        factors.each(function (x) {\n          x = Symbol.unwrapPARENS(x);\n          sols = sols.concat(_solve(x, solve_for));\n        });\n      }\n\n      return sols;\n    },\n\n    /**\r\n     * Attempts to solve the equation assuming it's a polynomial with numeric coefficients\r\n     * @param {Symbol} eq\r\n     * @param {String} solve_for\r\n     * @returns {Array}\r\n     */\n    csolve: function csolve(eq, solve_for) {\n      return core.Utils.block('IGNORE_E', function () {\n        var f, p, pn, n, pf, r, theta, sr, sp, roots;\n        roots = [];\n        f = core.Utils.decompose_fn(eq, solve_for, true);\n\n        if (f.x.group === S) {\n          p = _.parse(f.x.power);\n          pn = Number(p);\n          n = _.pow(_.divide(f.b.negate(), f.a), p.invert());\n          pf = Symbol.toPolarFormArray(n);\n          r = pf[0];\n          theta = pf[1];\n          sr = r.toString();\n          sp = p.toString();\n          var k, root, str;\n\n          for (var i = 0; i < pn; i++) {\n            k = i;\n            str = format('({0})*e^(2*{1}*pi*{2}*{3})', sr, k, p, core.Settings.IMAGINARY);\n            root = _.parse(str);\n            roots.push(root);\n          }\n        }\n\n        return roots;\n      }, true);\n    },\n\n    /**\r\n     * Generates starting points for the Newton solver given an expression at zero.\r\n     * It beings by check if zero is a good point and starts expanding by a provided step size. \r\n     * Builds on the fact that if the sign changes over an interval then a zero\r\n     * must exist on that interval\r\n     * @param {Symbol} symbol\r\n     * @param {Number} step\r\n     * @param {Array} points\r\n     * @returns {Array}\r\n     */\n    getPoints: function getPoints(symbol, step, points) {\n      step = step || 0.01;\n      points = points || [];\n      var f = build(symbol);\n      var x0 = 0;\n      var start = Math.round(x0),\n          last = f(start),\n          last_sign = last / Math.abs(last),\n          rside = core.Settings.ROOTS_PER_SIDE,\n          // the max number of roots on right side\n      lside = rside; // the max number of roots on left side\n      // check around the starting point\n\n      points.push(Math.floor(start / 2)); //half way from zero might be a good start\n\n      points.push(Math.abs(start)); //|f(0)| could be a good start\n\n      points.push(start); //|f(0)| could be a good start\n      //adjust for log. A good starting point to include for log is 0.1\n\n      symbol.each(function (x) {\n        if (x.containsFunction(core.Settings.LOG)) points.push(0.1);\n      });\n      var left = range(-core.Settings.SOLVE_RADIUS, start, step),\n          right = range(start, core.Settings.SOLVE_RADIUS, step);\n\n      var test_side = function test_side(side, num_roots) {\n        var xi, val, sign;\n        var hits = [];\n\n        for (var i = 0, l = side.length; i < l; i++) {\n          xi = side[i]; //the point being evaluated\n\n          val = f(xi);\n          sign = val / Math.abs(val); //Don't add non-numeric values\n\n          if (isNaN(val) || !isFinite(val) || hits.length > num_roots) {\n            continue;\n          } //compare the signs. The have to be different if they cross a zero\n\n\n          if (sign !== last_sign) {\n            hits.push(xi); //take note of the possible zero location\n          }\n\n          last_sign = sign;\n        }\n\n        points = points.concat(hits);\n      };\n\n      test_side(left, lside);\n      test_side(right, rside);\n      return points;\n    },\n\n    /**\r\n     * Implements the bisection method. Returns undefined in no solution is found\r\n     * @param {number} point\r\n     * @param {function} f\r\n     * @returns {undefined | number}\r\n     */\n    bisection: function bisection(point, f) {\n      var left = point - 1;\n      var right = point + 1; // First test if this point is even worth evaluating. It should\n      // be crossing the x axis so the signs should be different\n\n      if (Math.sign(f(left)) !== Math.sign(f(right))) {\n        var safety = 0;\n        var epsilon, middle;\n\n        do {\n          epsilon = Math.abs(right - left); // Safety against an infinite loop\n\n          if (safety++ > core.Settings.MAX_BISECTION_ITER || isNaN(epsilon)) {\n            return;\n          } // Calculate the middle point\n\n\n          middle = (left + right) / 2;\n\n          if (f(left) * f(middle) > 0) {\n            left = middle;\n          } else {\n            right = middle;\n          }\n        } while (epsilon >= Settings.EPSILON);\n\n        var solution = (left + right) / 2; // Test the solution to make sure that it's within tolerance\n\n        var x_point = f(solution);\n\n        if (!isNaN(x_point) && Math.abs(x_point) <= core.Settings.BI_SECTION_EPSILON) {\n          // Returns too many junk solutions if not rounded at 13th place.\n          return core.Utils.round(solution, 13);\n        }\n      }\n    },\n\n    /**\r\n     * Implements Newton's iterations. Returns undefined if no solutions if found\r\n     * @param {number} point\r\n     * @param {function} f\r\n     * @param {function} fp\r\n     * @returns {undefined|number}\r\n     */\n    Newton: function Newton(point, f, fp) {\n      var maxiter = core.Settings.MAX_NEWTON_ITERATIONS,\n          iter = 0; //first try the point itself. If it's zero viola. We're done\n\n      var x0 = point,\n          x;\n\n      do {\n        var fx0 = f(x0); //store the result of the function\n        //if the value is zero then we're done because 0 - (0/d f(x0)) = 0\n\n        if (x0 === 0 && fx0 === 0) {\n          x = 0;\n          break;\n        }\n\n        iter++;\n        if (iter > maxiter) return; //naximum iterations reached\n\n        x = x0 - fx0 / fp(x0);\n        var e = Math.abs(x - x0);\n        x0 = x;\n      } while (e > Settings.NEWTON_EPSILON); //check if the number is indeed zero. 1e-13 seems to give the most accurate results\n\n\n      if (Math.abs(f(x)) <= Settings.EPSILON) return x;\n    },\n    rewrite: function rewrite(rhs, lhs, for_variable) {\n      lhs = lhs || new Symbol(0);\n\n      if (rhs.isComposite() && rhs.isLinear()) {\n        //try to isolate the square root\n        //container for the square roots\n        var sqrts = []; //all else\n\n        var rem = [];\n        rhs.each(function (x) {\n          x = x.clone();\n\n          if (x.fname === 'sqrt' && x.contains(for_variable)) {\n            sqrts.push(x);\n          } else {\n            rem.push(x);\n          }\n        }, true);\n\n        if (sqrts.length === 1) {\n          //move the remainder to the RHS\n          lhs = _.expand(_.pow(_.subtract(lhs, core.Utils.arraySum(rem)), new Symbol(2))); //square both sides\n\n          rhs = _.expand(_.pow(Symbol.unwrapSQRT(sqrts[0]), new Symbol(2)));\n        }\n      } else {\n        rhs = Symbol.unwrapSQRT(_.expand(rhs)); //expand the term expression go get rid of quotients when possible\n      }\n\n      var c = 0,\n          //a counter to see if we have all terms with the variable\n      l = rhs.length; //try to rewrite the whole thing\n\n      if (rhs.group === CP && rhs.contains(for_variable) && rhs.isLinear()) {\n        rhs.distributeMultiplier();\n        var t = new Symbol(0); //first bring all the terms containing the variable to the lhs\n\n        rhs.each(function (x) {\n          if (x.contains(for_variable)) {\n            c++;\n            t = _.add(t, x.clone());\n          } else lhs = _.subtract(lhs, x.clone());\n        });\n        rhs = t; //if not all the terms contain the variable so it's in the form\n        //a*x^2+x\n\n        if (c !== l) {\n          return __.rewrite(rhs, lhs, for_variable);\n        } else {\n          return [rhs, lhs];\n        }\n      } else if (rhs.group === CB && rhs.contains(for_variable) && rhs.isLinear()) {\n        if (rhs.multiplier.lessThan(0)) {\n          rhs.multiplier = rhs.multiplier.multiply(new core.Frac(-1));\n          lhs.multiplier = lhs.multiplier.multiply(new core.Frac(-1));\n        }\n\n        if (lhs.equals(0)) return new Symbol(0);else {\n          var t = new Symbol(1);\n          rhs.each(function (x) {\n            if (x.contains(for_variable)) t = _.multiply(t, x.clone());else lhs = _.divide(lhs, x.clone());\n          });\n          rhs = t;\n          return __.rewrite(rhs, lhs, for_variable);\n        }\n      } else if (!rhs.isLinear() && rhs.contains(for_variable)) {\n        var p = _.parse(rhs.power.clone().invert());\n\n        rhs = _.pow(rhs, p.clone());\n        lhs = _.pow(_.expand(lhs), p.clone());\n        return __.rewrite(rhs, lhs, for_variable);\n      } else if (rhs.group === FN || rhs.group === S || rhs.group === PL) {\n        return [rhs, lhs];\n      }\n    },\n    sqrtSolve: function sqrtSolve(symbol, v) {\n      var sqrts = new Symbol(0);\n      var rem = new Symbol(0);\n\n      if (symbol.isComposite()) {\n        symbol.each(function (x) {\n          if (x.fname === 'sqrt' && x.contains(v)) {\n            sqrts = _.add(sqrts, x.clone());\n          } else {\n            rem = _.add(rem, x.clone());\n          }\n        }); //quick and dirty ATM\n\n        if (!sqrts.equals(0)) {\n          var t = _.expand(_.multiply(_.parse(symbol.multiplier), _.subtract(_.pow(rem, new Symbol(2)), _.pow(sqrts, new Symbol(2))))); //square both sides\n\n\n          var solutions = _solve(t, v); //test the points. The dumb way of getting the answers\n\n\n          solutions = solutions.filter(function (e) {\n            if (e.isImaginary()) return e;\n            var subs = {};\n            subs[v] = e;\n            var point = evaluate(symbol, subs);\n            if (point.equals(0)) return e;\n          });\n          return solutions;\n        }\n      }\n    }\n  };\n  /*\r\n   * \r\n   * @param {String[]|String|Equation} eqns\r\n   * @param {String} solve_for\r\n   * @param {Array} solutions\r\n   * @param {Number} depth\r\n   * @param {String|Equation} fn\r\n   * @returns {Array}\r\n   */\n\n\n  var _solve = function _solve(eqns, solve_for, solutions, depth, fn) {\n    depth = depth || 0;\n\n    if (depth++ > Settings.MAX_SOLVE_DEPTH) {\n      return solutions;\n    } //make preparations if it's an Equation\n\n\n    if (eqns instanceof Equation) {\n      //if it's zero then we're done\n      if (eqns.isZero()) {\n        return [new Symbol(0)];\n      } //if the lhs = x then we're done\n\n\n      if (eqns.LHS.equals(solve_for) && !eqns.RHS.contains(solve_for)) {\n        return [eqns.RHS];\n      } //if the rhs = x then we're done\n\n\n      if (eqns.RHS.equals(solve_for) && !eqns.LHS.contains(solve_for)) {\n        return [eqns.LHS];\n      }\n    } //unwrap the vector since what we want are the elements\n\n\n    if (eqns instanceof core.Vector) eqns = eqns.elements;\n    solve_for = solve_for || 'x'; //assumes x by default\n    //If it's an array then solve it as a system of equations\n\n    if (isArray(eqns)) {\n      return __.solveSystem.apply(undefined, arguments);\n    } // Parse out functions. Fix for issue #300\n    // eqns = core.Utils.evaluate(eqns);\n\n\n    solutions = solutions || []; //mark existing solutions as not to have duplicates\n\n    var existing = {}; // Easy fail. If it's a rational function and the denominator is zero\n    // the we're done. Issue #555\n\n    var known = {};\n    known[solve_for] = 0;\n\n    if (isSymbol(eqns) && evaluate(eqns.getDenom(), known).equals(0) === true) {\n      return solutions;\n    } // Is usued to add solutions to set. \n    // TODO: Set is now implemented and should be utilized\n\n\n    var add_to_result = function add_to_result(r, has_trig) {\n      var r_is_symbol = isSymbol(r);\n      if (r === undefined || typeof r === 'number' && isNaN(r)) return;\n\n      if (isArray(r)) {\n        r.forEach(function (sol) {\n          add_to_result(sol);\n        });\n      } else {\n        if (r.valueOf() !== 'null') {\n          // Call the pre-add function if defined. This could be useful for rounding\n          if (typeof core.Settings.PRE_ADD_SOLUTION === 'function') {\n            r = core.Settings.PRE_ADD_SOLUTION(r);\n          }\n\n          if (!r_is_symbol) {\n            r = _.parse(r);\n          } // try to convert the number to multiples of pi\n\n\n          if (core.Settings.make_pi_conversions && has_trig) {\n            var temp = _.divide(r.clone(), new Symbol(Math.PI)),\n                m = temp.multiplier,\n                a = Math.abs(m.num),\n                b = Math.abs(m.den);\n\n            if (a < 10 && b < 10) r = _.multiply(temp, new Symbol('pi'));\n          } // And check if we get a number otherwise we might be throwing out symbolic solutions.\n\n\n          var r_str = r.toString();\n\n          if (!existing[r_str]) {\n            solutions.push(r);\n          } // Mark the answer as seen\n\n\n          existing[r_str] = true;\n        }\n      }\n    }; // Maybe we get lucky. Try the point at the function. If it works we have a point\n    // If not it failed\n\n\n    if (eqns.group === S && eqns.contains(solve_for)) {\n      try {\n        var o = {};\n        o[solve_for] = 0;\n        evaluate(fn, o, 'numer');\n        add_to_result(new Symbol(0));\n      } catch (e) {// Do nothing;\n      }\n\n      return solutions;\n    }\n\n    if (eqns.group === CB) {\n      // It suffices to solve for the numerator\n      var num = eqns.getNum();\n\n      if (num.group === CB) {\n        var sf = String(solve_for); //everything else belongs to the coeff\n        //get the denominator and make sure it doesn't have x since we don't know how to solve for those\n\n        num.each(function (x) {\n          if (x.contains(sf)) _solve(x, solve_for, solutions, depth, eqns);\n        });\n        return solutions;\n      }\n\n      return _solve(num, solve_for, solutions, depth, fn);\n    }\n\n    if (eqns.group === FN && eqns.fname === 'sqrt') {\n      eqns = _.pow(Symbol.unwrapSQRT(eqns), new Symbol(2));\n    } //pass in false to not expand equations such as (x+y)^5.\n    //It suffices to solve for the numerator since there's no value in the denominator which yields a zero for the function\n\n\n    var eq = (core.Utils.isSymbol(eqns) ? eqns : __.toLHS(eqns, false)).getNum(),\n        vars = core.Utils.variables(eq),\n        //get a list of all the variables\n    numvars = vars.length; //how many variables are we dealing with\n    //it sufficient to solve (x+y) if eq is (x+y)^n since 0^n\n\n    if (core.Utils.isInt(eq.power) && eq.power > 0) {\n      eq = _.parse(eq).toLinear();\n    } //if we're dealing with a single variable then we first check if it's a \n    //polynomial (including rationals).If it is then we use the Jenkins-Traubb algorithm.     \n    //Don't waste time\n\n\n    if (eq.group === S || eq.group === CB && eq.contains(solve_for)) {\n      return [new Symbol(0)];\n    } //force to polynomial. We go through each and then we look at what it would \n    //take for its power to be an integer\n    //if the power is a fractional we divide by the fractional power\n\n\n    var fractionals = {},\n        cfact;\n\n    var correct_denom = function correct_denom(symbol) {\n      symbol = _.expand(symbol, {\n        expand_denominator: true,\n        expand_functions: true\n      });\n      var original = symbol.clone(); //preserve the original\n\n      if (symbol.symbols) {\n        for (var x in symbol.symbols) {\n          var sym = symbol.symbols[x]; //get the denominator of the sub-symbol\n\n          var den = sym.getDenom();\n\n          if (!den.isConstant(true) && symbol.isComposite()) {\n            var t = new Symbol(0);\n            symbol.each(function (e) {\n              t = _.add(t, _.multiply(e, den.clone()));\n            });\n            return correct_denom(_.multiply(_.parse(symbol.multiplier), t));\n          }\n\n          var parts = explode(sym, solve_for);\n          var is_sqrt = parts[1].fname === core.Settings.SQRT;\n          var v = Symbol.unwrapSQRT(parts[1]);\n          var p = v.power.clone(); //circular logic with sqrt. Since sqrt(x) becomes x^(1/2) which then becomes sqrt(x), this continues forever\n          //this needs to be terminated if p = 1/2\n\n          if (!isSymbol(p) && !p.equals(1 / 2)) {\n            if (p.den.gt(1)) {\n              if (is_sqrt) {\n                symbol = _.subtract(symbol, sym.clone());\n                symbol = _.add(symbol, _.multiply(parts[0].clone(), v));\n                return correct_denom(symbol);\n              }\n\n              var c = fractionals[p.den];\n              fractionals[p.den] = c ? c++ : 1;\n            } else if (p.sign() === -1) {\n              var factor = _.parse(solve_for + '^' + Math.abs(p)); //this\n              //unwrap the symbol's denoniator\n\n\n              symbol.each(function (y, index) {\n                if (y.contains(solve_for)) {\n                  symbol.symbols[index] = _.multiply(y, factor.clone());\n                }\n              });\n              fractionals = {};\n              return correct_denom(_.parse(symbol));\n            } else if (sym.group === PL) {\n              var min_p = core.Utils.arrayMin(core.Utils.keys(sym.symbols));\n\n              if (min_p < 0) {\n                var factor = _.parse(solve_for + '^' + Math.abs(min_p));\n\n                var corrected = new Symbol(0);\n                original.each(function (x) {\n                  corrected = _.add(corrected, _.multiply(x.clone(), factor.clone()));\n                }, true);\n                return corrected;\n              }\n            }\n          }\n        }\n      }\n\n      return symbol;\n    }; //separate the equation\n\n\n    var separate = function separate(eq) {\n      var lhs = new Symbol(0),\n          rhs = new Symbol(0);\n      eq.each(function (x) {\n        if (x.contains(solve_for, true)) lhs = _.add(lhs, x.clone());else rhs = _.subtract(rhs, x.clone());\n      });\n      return [lhs, rhs];\n    };\n\n    __.inverseFunctionSolve = function (name, lhs, rhs) {\n      //ax+b comes back as [a, x, ax, b];\n      var parts = explode(lhs.args[0], solve_for); //check if x is by itself\n\n      var x = parts[1];\n\n      if (x.group === S) {\n        return _.divide(_.symfunction(name, [_.divide(rhs, _.parse(lhs.multiplier))]), parts[0]);\n      }\n    }; //first remove any denominators\n\n\n    eq = correct_denom(eq);\n    if (eq.equals(0)) return [eq]; //correct fractionals. I can only handle one type right now\n\n    var fkeys = core.Utils.keys(fractionals);\n\n    if (fkeys.length === 1) {\n      //make a note of the factor\n      cfact = fkeys[0];\n      eq.each(function (x, index) {\n        if (x.contains(solve_for)) {\n          var parts = explode(x, solve_for);\n          var v = parts[1];\n          var p = v.power;\n\n          if (p.den.gt(1)) {\n            v.power = p.multiply(new core.Frac(cfact));\n            eq.symbols[index] = _.multiply(v, parts[0]);\n          }\n        }\n      });\n      eq = _.parse(eq);\n    } //try for nested sqrts as per issue #486\n\n\n    add_to_result(__.sqrtSolve(eq, solve_for)); //polynomial single variable\n\n    if (numvars === 1) {\n      if (eq.isPoly(true)) {\n        //try to factor and solve\n        var factors = new core.Algebra.Classes.Factors();\n        core.Algebra.Factor.factor(eq, factors); //if the equation has more than one symbolic factor then solve those individually\n\n        if (factors.getNumberSymbolics() > 1) {\n          for (var x in factors.factors) {\n            add_to_result(_solve(factors.factors[x], solve_for));\n          }\n        } else {\n          var coeffs = core.Utils.getCoeffs(eq, solve_for),\n              deg = coeffs.length - 1,\n              was_calculated = false;\n\n          if (vars[0] === solve_for) {\n            //check to see if all the coefficients are constant\n            if (checkAll(coeffs, function (x) {\n              return x.group !== core.groups.N;\n            })) {\n              var roots = core.Algebra.proots(eq); //if all the roots are integers then return those\n\n              if (checkAll(roots, function (x) {\n                return !core.Utils.isInt(x);\n              })) {\n                //roots have been calculates\n                was_calculated = true;\n                roots.map(function (x) {\n                  add_to_result(new Symbol(x));\n                });\n              }\n            }\n\n            if (!was_calculated) {\n              eqns = _.parse(eqns);\n              if (eqns instanceof core.Equation) eqns = eqns.toLHS(); //we can solve algebraically for degrees 1, 2, 3. The remainder we switch to Jenkins-\n\n              if (deg === 1) add_to_result(_.divide(coeffs[0], coeffs[1].negate()));else if (deg === 2) {\n                add_to_result(_.expand(__.quad.apply(undefined, coeffs)));\n              } else if (deg === 3) {\n                var solutions = []; //set to blank\n                //first try to factor and solve\n\n                var factored = core.Algebra.Factor.factor(eqns); //if it was successfully factored\n\n                var solutions = [];\n                if (solutions.length > 0) add_to_result(solutions);else add_to_result(__.cubic.apply(undefined, coeffs));\n              } else {\n                /*\r\n                 var sym_roots = csolve(eq, solve_for); \r\n                 if(sym_roots.length === 0)\r\n                 sym_roots = divnconsolve(eq, solve_for);\r\n                 if(sym_roots.length > 0) \r\n                 add_to_result(sym_roots);\r\n                 else\r\n                 */\n                _A.proots(eq).map(add_to_result);\n              }\n            }\n          }\n        }\n      } else {\n        try {\n          // Attempt Newton\n          // Since it's not a polynomial then we'll try to look for a solution using Newton's method\n          var has_trig = eq.hasTrig(); // we get all the points where a possible zero might exist.\n\n          var points1 = __.getPoints(eq, 0.1);\n\n          var points2 = __.getPoints(eq, 0.05);\n\n          var points3 = __.getPoints(eq, 0.01);\n\n          var points = core.Utils.arrayUnique(points1.concat(points2).concat(points3)).sort(function (a, b) {\n            return a - b;\n          });\n          var i, point, solution; // Compile the function\n\n          var f = build(eq.clone()); // First try to eliminate some points using bisection\n\n          var t_points = [];\n\n          for (i = 0; i < points.length; i++) {\n            point = points[i]; // See if there's a solution at this point\n\n            solution = __.bisection(point, f); // If there's no solution then add it to the array for further investigation\n\n            if (typeof solution === 'undefined') {\n              t_points.push(point);\n              continue;\n            } // Add the solution to the solution set\n\n\n            add_to_result(solution, has_trig);\n          } // Reset the points to the remaining points\n\n\n          points = t_points; // Build the derivative and compile a function\n\n          var d = _C.diff(eq.clone());\n\n          var fp = build(d);\n\n          for (i = 0; i < points.length; i++) {\n            point = points[i];\n            add_to_result(__.Newton(point, f, fp), has_trig);\n          }\n\n          solutions.sort();\n        } catch (e) {\n          console.log(e);\n        }\n      }\n    } else {\n      //The idea here is to go through the equation and collect the coefficients\n      //place them in an array and call the quad or cubic function to get the results\n      if (!eq.hasFunc(solve_for) && eq.isComposite()) {\n        try {\n          var factored = core.Algebra.Factor.factor(eq.clone());\n\n          if (factored.group === CB) {\n            factored.each(function (x) {\n              add_to_result(_solve(x, solve_for));\n            });\n          } else {\n            var coeffs = core.Utils.getCoeffs(eq, solve_for);\n            var l = coeffs.length,\n                deg = l - 1; //the degree of the polynomial\n            //get the denominator and make sure it doesn't have x\n            //handle the problem based on the degree\n\n            switch (deg) {\n              case 0:\n                var separated = separate(eq);\n                var lhs = separated[0],\n                    rhs = separated[1];\n\n                if (lhs.group === core.groups.EX) {\n                  var log = core.Settings.LOG;\n                  var expr_str = \"\".concat(log, \"((\").concat(rhs, \")/(\").concat(lhs.multiplier, \"))/\").concat(log, \"(\").concat(lhs.value, \")/\").concat(lhs.power.multiplier);\n                  add_to_result(_.parse(expr_str));\n                }\n\n                break;\n\n              case 1:\n                //nothing to do but to return the quotient of the constant and the LT\n                //e.g. 2*x-1\n                add_to_result(_.divide(coeffs[0], coeffs[1].negate()));\n                break;\n\n              case 2:\n                add_to_result(__.quad.apply(undefined, coeffs));\n                break;\n\n              case 3:\n                add_to_result(__.cubic.apply(undefined, coeffs));\n                break;\n\n              case 4:\n                add_to_result(__.quartic.apply(undefined, coeffs));\n                break;\n\n              default:\n                add_to_result(__.csolve(eq, solve_for));\n                if (solutions.length === 0) add_to_result(__.divideAndConquer(eq, solve_for));\n            }\n\n            if (solutions.length === 0) {\n              //try factoring\n              add_to_result(_solve(factored, solve_for, solutions, depth));\n            }\n          }\n        } catch (e) {\n          /*something went wrong. EXITING*/\n          ;\n        }\n      } else {\n        try {\n          var rw = __.rewrite(eq, null, solve_for);\n\n          var lhs = rw[0];\n          var rhs = rw[1];\n\n          if (lhs.group === FN) {\n            if (lhs.fname === 'abs') {\n              add_to_result([rhs.clone(), rhs.negate()]);\n            } else if (lhs.fname === 'sin') {\n              //asin\n              add_to_result(__.inverseFunctionSolve('asin', lhs, rhs));\n            } else if (lhs.fname === 'cos') {\n              //asin\n              add_to_result(__.inverseFunctionSolve('acos', lhs, rhs));\n            } else if (lhs.fname === 'tan') {\n              //asin\n              add_to_result(__.inverseFunctionSolve('atan', lhs, rhs));\n            } else if (lhs.fname === core.Settings.LOG) {\n              //ax+b comes back as [a, x, ax, b];\n              var parts = explode(lhs.args[0], solve_for); //check if x is by itself\n\n              var x = parts[1];\n\n              if (x.group === S) {\n                rhs = _.divide(_.subtract(_.pow(lhs.args.length > 1 ? lhs.args[1] : new Symbol('e'), _.divide(rhs, _.parse(lhs.multiplier))), parts[3]), parts[0]);\n                var eq = new Equation(x, rhs).toLHS();\n                add_to_result(_solve(eq, solve_for));\n              }\n            } else add_to_result(_.subtract(lhs, rhs));\n          } else {\n            var neq = new Equation(lhs, rhs).toLHS(); //create a new equation\n\n            if (neq.equals(eq)) throw new Error('Stopping. No stop condition exists');\n            add_to_result(_solve(neq, solve_for));\n          }\n        } catch (error) {\n          //Let's try this another way\n          try {\n            //1. if the symbol is in the form a*b*c*... then the solution is zero if \n            //either a or b or c is zero.\n            if (eq.group === CB) add_to_result(0);else if (eq.group === CP) {\n              var separated = separate(eq);\n              var lhs = separated[0],\n                  rhs = separated[1]; //reduce the equation\n\n              if (lhs.group === core.groups.EX && lhs.value === solve_for) {\n                //change the base of both sides\n                var p = lhs.power.clone().invert();\n                add_to_result(_.pow(rhs, p));\n              }\n            }\n          } catch (error) {\n            ;\n          }\n        }\n      }\n    }\n\n    if (cfact) {\n      solutions = solutions.map(function (x) {\n        return _.pow(x, new Symbol(cfact));\n      });\n    } // Perform some cleanup but don't do it agains arrays, etc\n    // Check it actually evaluates to zero\n\n\n    if (isSymbol(eqns)) {\n      var knowns = {};\n      solutions = solutions.filter(function (x) {\n        try {\n          knowns[solve_for] = x;\n          var zero = Number(evaluate(eqns, knowns)); // Allow symbolic answers\n\n          if (isNaN(zero)) {\n            return true;\n          }\n\n          return true;\n        } catch (e) {\n          return false;\n        }\n      });\n    }\n\n    return solutions;\n  }; //Register the functions for external use\n\n\n  nerdamer.register([{\n    name: 'solveEquations',\n    parent: 'nerdamer',\n    numargs: -1,\n    visible: true,\n    build: function build() {\n      return _solve; //comment out to return a vector\n\n      /*\r\n       return function() {\r\n       return core.Utils.convertToVector(solve.apply(null, arguments));\r\n       };\r\n       */\n    }\n  }, {\n    name: 'solve',\n    parent: 'Solve',\n    numargs: 2,\n    visible: true,\n    build: function build() {\n      return core.Solve.solve;\n    }\n  }, {\n    name: 'setEquation',\n    parent: 'Solve',\n    visible: true,\n    build: function build() {\n      return setEq;\n    }\n  }]);\n  nerdamer.updateAPI();\n})();","/*\r\n * Author : Martin Donk\r\n * Website : http://www.nerdamer.com\r\n * Email : martin.r.donk@gmail.com\r\n * Source : https://github.com/jiggzson/nerdamer\r\n * Can be used to load all add-ons with one require\r\n */\nvar nerdamer = require('./nerdamer.core.js');\n\nrequire('./Algebra.js');\n\nrequire('./Calculus.js');\n\nrequire('./Solve.js');\n\nrequire('./Extra.js'); //export nerdamer\n\n\nmodule.exports = nerdamer;","var isConstructor = require('../internals/is-constructor');\nvar tryToString = require('../internals/try-to-string');\n\nvar $TypeError = TypeError;\n\n// `Assert: IsConstructor(argument) is true`\nmodule.exports = function (argument) {\n  if (isConstructor(argument)) return argument;\n  throw $TypeError(tryToString(argument) + ' is not a constructor');\n};\n","'use strict';\nvar charAt = require('../internals/string-multibyte').charAt;\n\n// `AdvanceStringIndex` abstract operation\n// https://tc39.es/ecma262/#sec-advancestringindex\nmodule.exports = function (S, index, unicode) {\n  return index + (unicode ? charAt(S, index).length : 1);\n};\n","var fails = require('../internals/fails');\n\nmodule.exports = !fails(function () {\n  function F() { /* empty */ }\n  F.prototype.constructor = null;\n  // eslint-disable-next-line es/no-object-getprototypeof -- required for testing\n  return Object.getPrototypeOf(new F()) !== F.prototype;\n});\n","// `CreateIterResultObject` abstract operation\n// https://tc39.es/ecma262/#sec-createiterresultobject\nmodule.exports = function (value, done) {\n  return { value: value, done: done };\n};\n","var isObject = require('../internals/is-object');\nvar classof = require('../internals/classof-raw');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar MATCH = wellKnownSymbol('match');\n\n// `IsRegExp` abstract operation\n// https://tc39.es/ecma262/#sec-isregexp\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');\n};\n","'use strict';\nvar IteratorPrototype = require('../internals/iterators-core').IteratorPrototype;\nvar create = require('../internals/object-create');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar Iterators = require('../internals/iterators');\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {\n  var TO_STRING_TAG = NAME + ' Iterator';\n  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next) });\n  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);\n  Iterators[TO_STRING_TAG] = returnThis;\n  return IteratorConstructor;\n};\n","'use strict';\nvar fails = require('../internals/fails');\nvar isCallable = require('../internals/is-callable');\nvar isObject = require('../internals/is-object');\nvar create = require('../internals/object-create');\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\nvar defineBuiltIn = require('../internals/define-built-in');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar IS_PURE = require('../internals/is-pure');\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar BUGGY_SAFARI_ITERATORS = false;\n\n// `%IteratorPrototype%` object\n// https://tc39.es/ecma262/#sec-%iteratorprototype%-object\nvar IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;\n\n/* eslint-disable es/no-array-prototype-keys -- safe */\nif ([].keys) {\n  arrayIterator = [].keys();\n  // Safari 8 has buggy iterators w/o `next`\n  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;\n  else {\n    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));\n    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;\n  }\n}\n\nvar NEW_ITERATOR_PROTOTYPE = !isObject(IteratorPrototype) || fails(function () {\n  var test = {};\n  // FF44- legacy iterators case\n  return IteratorPrototype[ITERATOR].call(test) !== test;\n});\n\nif (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {};\nelse if (IS_PURE) IteratorPrototype = create(IteratorPrototype);\n\n// `%IteratorPrototype%[@@iterator]()` method\n// https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator\nif (!isCallable(IteratorPrototype[ITERATOR])) {\n  defineBuiltIn(IteratorPrototype, ITERATOR, function () {\n    return this;\n  });\n}\n\nmodule.exports = {\n  IteratorPrototype: IteratorPrototype,\n  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS\n};\n","module.exports = {};\n","var hasOwn = require('../internals/has-own-property');\nvar isCallable = require('../internals/is-callable');\nvar toObject = require('../internals/to-object');\nvar sharedKey = require('../internals/shared-key');\nvar CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');\n\nvar IE_PROTO = sharedKey('IE_PROTO');\nvar $Object = Object;\nvar ObjectPrototype = $Object.prototype;\n\n// `Object.getPrototypeOf` method\n// https://tc39.es/ecma262/#sec-object.getprototypeof\n// eslint-disable-next-line es/no-object-getprototypeof -- safe\nmodule.exports = CORRECT_PROTOTYPE_GETTER ? $Object.getPrototypeOf : function (O) {\n  var object = toObject(O);\n  if (hasOwn(object, IE_PROTO)) return object[IE_PROTO];\n  var constructor = object.constructor;\n  if (isCallable(constructor) && object instanceof constructor) {\n    return constructor.prototype;\n  } return object instanceof $Object ? ObjectPrototype : null;\n};\n","var call = require('../internals/function-call');\nvar anObject = require('../internals/an-object');\nvar isCallable = require('../internals/is-callable');\nvar classof = require('../internals/classof-raw');\nvar regexpExec = require('../internals/regexp-exec');\n\nvar $TypeError = TypeError;\n\n// `RegExpExec` abstract operation\n// https://tc39.es/ecma262/#sec-regexpexec\nmodule.exports = function (R, S) {\n  var exec = R.exec;\n  if (isCallable(exec)) {\n    var result = call(exec, R, S);\n    if (result !== null) anObject(result);\n    return result;\n  }\n  if (classof(R) === 'RegExp') return call(regexpExec, R, S);\n  throw $TypeError('RegExp#exec called on incompatible receiver');\n};\n","'use strict';\n/* eslint-disable regexp/no-empty-capturing-group, regexp/no-empty-group, regexp/no-lazy-ends -- testing */\n/* eslint-disable regexp/no-useless-quantifier -- testing */\nvar call = require('../internals/function-call');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar toString = require('../internals/to-string');\nvar regexpFlags = require('../internals/regexp-flags');\nvar stickyHelpers = require('../internals/regexp-sticky-helpers');\nvar shared = require('../internals/shared');\nvar create = require('../internals/object-create');\nvar getInternalState = require('../internals/internal-state').get;\nvar UNSUPPORTED_DOT_ALL = require('../internals/regexp-unsupported-dot-all');\nvar UNSUPPORTED_NCG = require('../internals/regexp-unsupported-ncg');\n\nvar nativeReplace = shared('native-string-replace', String.prototype.replace);\nvar nativeExec = RegExp.prototype.exec;\nvar patchedExec = nativeExec;\nvar charAt = uncurryThis(''.charAt);\nvar indexOf = uncurryThis(''.indexOf);\nvar replace = uncurryThis(''.replace);\nvar stringSlice = uncurryThis(''.slice);\n\nvar UPDATES_LAST_INDEX_WRONG = (function () {\n  var re1 = /a/;\n  var re2 = /b*/g;\n  call(nativeExec, re1, 'a');\n  call(nativeExec, re2, 'a');\n  return re1.lastIndex !== 0 || re2.lastIndex !== 0;\n})();\n\nvar UNSUPPORTED_Y = stickyHelpers.BROKEN_CARET;\n\n// nonparticipating capturing group, copied from es5-shim's String#split patch.\nvar NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;\n\nvar PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG;\n\nif (PATCH) {\n  patchedExec = function exec(string) {\n    var re = this;\n    var state = getInternalState(re);\n    var str = toString(string);\n    var raw = state.raw;\n    var result, reCopy, lastIndex, match, i, object, group;\n\n    if (raw) {\n      raw.lastIndex = re.lastIndex;\n      result = call(patchedExec, raw, str);\n      re.lastIndex = raw.lastIndex;\n      return result;\n    }\n\n    var groups = state.groups;\n    var sticky = UNSUPPORTED_Y && re.sticky;\n    var flags = call(regexpFlags, re);\n    var source = re.source;\n    var charsAdded = 0;\n    var strCopy = str;\n\n    if (sticky) {\n      flags = replace(flags, 'y', '');\n      if (indexOf(flags, 'g') === -1) {\n        flags += 'g';\n      }\n\n      strCopy = stringSlice(str, re.lastIndex);\n      // Support anchored sticky behavior.\n      if (re.lastIndex > 0 && (!re.multiline || re.multiline && charAt(str, re.lastIndex - 1) !== '\\n')) {\n        source = '(?: ' + source + ')';\n        strCopy = ' ' + strCopy;\n        charsAdded++;\n      }\n      // ^(? + rx + ) is needed, in combination with some str slicing, to\n      // simulate the 'y' flag.\n      reCopy = new RegExp('^(?:' + source + ')', flags);\n    }\n\n    if (NPCG_INCLUDED) {\n      reCopy = new RegExp('^' + source + '$(?!\\\\s)', flags);\n    }\n    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;\n\n    match = call(nativeExec, sticky ? reCopy : re, strCopy);\n\n    if (sticky) {\n      if (match) {\n        match.input = stringSlice(match.input, charsAdded);\n        match[0] = stringSlice(match[0], charsAdded);\n        match.index = re.lastIndex;\n        re.lastIndex += match[0].length;\n      } else re.lastIndex = 0;\n    } else if (UPDATES_LAST_INDEX_WRONG && match) {\n      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;\n    }\n    if (NPCG_INCLUDED && match && match.length > 1) {\n      // Fix browsers whose `exec` methods don't consistently return `undefined`\n      // for NPCG, like IE8. NOTE: This doesn't work for /(.?)?/\n      call(nativeReplace, match[0], reCopy, function () {\n        for (i = 1; i < arguments.length - 2; i++) {\n          if (arguments[i] === undefined) match[i] = undefined;\n        }\n      });\n    }\n\n    if (match && groups) {\n      match.groups = object = create(null);\n      for (i = 0; i < groups.length; i++) {\n        group = groups[i];\n        object[group[0]] = match[group[1]];\n      }\n    }\n\n    return match;\n  };\n}\n\nmodule.exports = patchedExec;\n","'use strict';\nvar anObject = require('../internals/an-object');\n\n// `RegExp.prototype.flags` getter implementation\n// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.hasIndices) result += 'd';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.dotAll) result += 's';\n  if (that.unicode) result += 'u';\n  if (that.unicodeSets) result += 'v';\n  if (that.sticky) result += 'y';\n  return result;\n};\n","var call = require('../internals/function-call');\nvar hasOwn = require('../internals/has-own-property');\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\nvar regExpFlags = require('../internals/regexp-flags');\n\nvar RegExpPrototype = RegExp.prototype;\n\nmodule.exports = function (R) {\n  var flags = R.flags;\n  return flags === undefined && !('flags' in RegExpPrototype) && !hasOwn(R, 'flags') && isPrototypeOf(RegExpPrototype, R)\n    ? call(regExpFlags, R) : flags;\n};\n","var fails = require('../internals/fails');\nvar global = require('../internals/global');\n\n// babel-minify and Closure Compiler transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError\nvar $RegExp = global.RegExp;\n\nvar UNSUPPORTED_Y = fails(function () {\n  var re = $RegExp('a', 'y');\n  re.lastIndex = 2;\n  return re.exec('abcd') != null;\n});\n\n// UC Browser bug\n// https://github.com/zloirock/core-js/issues/1008\nvar MISSED_STICKY = UNSUPPORTED_Y || fails(function () {\n  return !$RegExp('a', 'y').sticky;\n});\n\nvar BROKEN_CARET = UNSUPPORTED_Y || fails(function () {\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687\n  var re = $RegExp('^r', 'gy');\n  re.lastIndex = 2;\n  return re.exec('str') != null;\n});\n\nmodule.exports = {\n  BROKEN_CARET: BROKEN_CARET,\n  MISSED_STICKY: MISSED_STICKY,\n  UNSUPPORTED_Y: UNSUPPORTED_Y\n};\n","var fails = require('../internals/fails');\nvar global = require('../internals/global');\n\n// babel-minify and Closure Compiler transpiles RegExp('.', 's') -> /./s and it causes SyntaxError\nvar $RegExp = global.RegExp;\n\nmodule.exports = fails(function () {\n  var re = $RegExp('.', 's');\n  return !(re.dotAll && re.exec('\\n') && re.flags === 's');\n});\n","var fails = require('../internals/fails');\nvar global = require('../internals/global');\n\n// babel-minify and Closure Compiler transpiles RegExp('(?<a>b)', 'g') -> /(?<a>b)/g and it causes SyntaxError\nvar $RegExp = global.RegExp;\n\nmodule.exports = fails(function () {\n  var re = $RegExp('(?<a>b)', 'g');\n  return re.exec('b').groups.a !== 'b' ||\n    'b'.replace(re, '$<a>c') !== 'bc';\n});\n","var defineProperty = require('../internals/object-define-property').f;\nvar hasOwn = require('../internals/has-own-property');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\n\nmodule.exports = function (target, TAG, STATIC) {\n  if (target && !STATIC) target = target.prototype;\n  if (target && !hasOwn(target, TO_STRING_TAG)) {\n    defineProperty(target, TO_STRING_TAG, { configurable: true, value: TAG });\n  }\n};\n","var anObject = require('../internals/an-object');\nvar aConstructor = require('../internals/a-constructor');\nvar isNullOrUndefined = require('../internals/is-null-or-undefined');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar SPECIES = wellKnownSymbol('species');\n\n// `SpeciesConstructor` abstract operation\n// https://tc39.es/ecma262/#sec-speciesconstructor\nmodule.exports = function (O, defaultConstructor) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || isNullOrUndefined(S = anObject(C)[SPECIES]) ? defaultConstructor : aConstructor(S);\n};\n","var uncurryThis = require('../internals/function-uncurry-this');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar toString = require('../internals/to-string');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nvar charAt = uncurryThis(''.charAt);\nvar charCodeAt = uncurryThis(''.charCodeAt);\nvar stringSlice = uncurryThis(''.slice);\n\nvar createMethod = function (CONVERT_TO_STRING) {\n  return function ($this, pos) {\n    var S = toString(requireObjectCoercible($this));\n    var position = toIntegerOrInfinity(pos);\n    var size = S.length;\n    var first, second;\n    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;\n    first = charCodeAt(S, position);\n    return first < 0xD800 || first > 0xDBFF || position + 1 === size\n      || (second = charCodeAt(S, position + 1)) < 0xDC00 || second > 0xDFFF\n        ? CONVERT_TO_STRING\n          ? charAt(S, position)\n          : first\n        : CONVERT_TO_STRING\n          ? stringSlice(S, position, position + 2)\n          : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.codePointAt` method\n  // https://tc39.es/ecma262/#sec-string.prototype.codepointat\n  codeAt: createMethod(false),\n  // `String.prototype.at` method\n  // https://github.com/mathiasbynens/String.prototype.at\n  charAt: createMethod(true)\n};\n","var classof = require('../internals/classof');\n\nvar $String = String;\n\nmodule.exports = function (argument) {\n  if (classof(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');\n  return $String(argument);\n};\n","'use strict';\n/* eslint-disable es/no-string-prototype-matchall -- safe */\nvar $ = require('../internals/export');\nvar call = require('../internals/function-call');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar createIteratorConstructor = require('../internals/iterator-create-constructor');\nvar createIterResultObject = require('../internals/create-iter-result-object');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar toLength = require('../internals/to-length');\nvar toString = require('../internals/to-string');\nvar anObject = require('../internals/an-object');\nvar isNullOrUndefined = require('../internals/is-null-or-undefined');\nvar classof = require('../internals/classof-raw');\nvar isRegExp = require('../internals/is-regexp');\nvar getRegExpFlags = require('../internals/regexp-get-flags');\nvar getMethod = require('../internals/get-method');\nvar defineBuiltIn = require('../internals/define-built-in');\nvar fails = require('../internals/fails');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar speciesConstructor = require('../internals/species-constructor');\nvar advanceStringIndex = require('../internals/advance-string-index');\nvar regExpExec = require('../internals/regexp-exec-abstract');\nvar InternalStateModule = require('../internals/internal-state');\nvar IS_PURE = require('../internals/is-pure');\n\nvar MATCH_ALL = wellKnownSymbol('matchAll');\nvar REGEXP_STRING = 'RegExp String';\nvar REGEXP_STRING_ITERATOR = REGEXP_STRING + ' Iterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(REGEXP_STRING_ITERATOR);\nvar RegExpPrototype = RegExp.prototype;\nvar $TypeError = TypeError;\nvar stringIndexOf = uncurryThis(''.indexOf);\nvar nativeMatchAll = uncurryThis(''.matchAll);\n\nvar WORKS_WITH_NON_GLOBAL_REGEX = !!nativeMatchAll && !fails(function () {\n  nativeMatchAll('a', /./);\n});\n\nvar $RegExpStringIterator = createIteratorConstructor(function RegExpStringIterator(regexp, string, $global, fullUnicode) {\n  setInternalState(this, {\n    type: REGEXP_STRING_ITERATOR,\n    regexp: regexp,\n    string: string,\n    global: $global,\n    unicode: fullUnicode,\n    done: false\n  });\n}, REGEXP_STRING, function next() {\n  var state = getInternalState(this);\n  if (state.done) return createIterResultObject(undefined, true);\n  var R = state.regexp;\n  var S = state.string;\n  var match = regExpExec(R, S);\n  if (match === null) {\n    state.done = true;\n    return createIterResultObject(undefined, true);\n  }\n  if (state.global) {\n    if (toString(match[0]) === '') R.lastIndex = advanceStringIndex(S, toLength(R.lastIndex), state.unicode);\n    return createIterResultObject(match, false);\n  }\n  state.done = true;\n  return createIterResultObject(match, false);\n});\n\nvar $matchAll = function (string) {\n  var R = anObject(this);\n  var S = toString(string);\n  var C = speciesConstructor(R, RegExp);\n  var flags = toString(getRegExpFlags(R));\n  var matcher, $global, fullUnicode;\n  matcher = new C(C === RegExp ? R.source : R, flags);\n  $global = !!~stringIndexOf(flags, 'g');\n  fullUnicode = !!~stringIndexOf(flags, 'u');\n  matcher.lastIndex = toLength(R.lastIndex);\n  return new $RegExpStringIterator(matcher, S, $global, fullUnicode);\n};\n\n// `String.prototype.matchAll` method\n// https://tc39.es/ecma262/#sec-string.prototype.matchall\n$({ target: 'String', proto: true, forced: WORKS_WITH_NON_GLOBAL_REGEX }, {\n  matchAll: function matchAll(regexp) {\n    var O = requireObjectCoercible(this);\n    var flags, S, matcher, rx;\n    if (!isNullOrUndefined(regexp)) {\n      if (isRegExp(regexp)) {\n        flags = toString(requireObjectCoercible(getRegExpFlags(regexp)));\n        if (!~stringIndexOf(flags, 'g')) throw $TypeError('`.matchAll` does not allow non-global regexes');\n      }\n      if (WORKS_WITH_NON_GLOBAL_REGEX) return nativeMatchAll(O, regexp);\n      matcher = getMethod(regexp, MATCH_ALL);\n      if (matcher === undefined && IS_PURE && classof(regexp) == 'RegExp') matcher = $matchAll;\n      if (matcher) return call(matcher, regexp, O);\n    } else if (WORKS_WITH_NON_GLOBAL_REGEX) return nativeMatchAll(O, regexp);\n    S = toString(O);\n    rx = new RegExp(regexp, 'g');\n    return IS_PURE ? call($matchAll, rx, S) : rx[MATCH_ALL](S);\n  }\n});\n\nIS_PURE || MATCH_ALL in RegExpPrototype || defineBuiltIn(RegExpPrototype, MATCH_ALL, $matchAll);\n","// TODO: Remove from `core-js@4`\nrequire('../modules/es.string.match-all');\n","\r\n\r\nimport React from 'react'\r\nimport { Link } from 'gatsby'\r\n\r\nconst Credits = () => {\r\n    return (\r\n        <footer className='credits'>\r\n            <p style={{fontSize:\"0.75em\"}}>\"Alex Colwell & Nikolai Tan 2022\"</p>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Credits","import React from 'react'\r\nimport '../styles/containerStyles.css'\r\nimport Credits from './Credits'\r\n\r\nconst Container = ({children}) => {\r\n    return (\r\n        <div className=\"container\">\r\n            {children} \r\n            <Credits />\r\n        </div>\r\n    )\r\n\r\n    \r\n}\r\n\r\nexport default Container","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nvar ParserError = /*#__PURE__*/function (_Error) {\n  _inherits(ParserError, _Error);\n\n  var _super = _createSuper(ParserError);\n\n  function ParserError(start, end, type, values) {\n    var _this;\n\n    _classCallCheck(this, ParserError);\n\n    _this = _super.call(this, \"Internal \".concat(type, \" parse error\"));\n\n    _defineProperty(_assertThisInitialized(_this), \"start\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"end\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"type\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"values\", void 0);\n\n    _this.type = type;\n    _this.start = start;\n    _this.end = end;\n    _this.values = values;\n    return _this;\n  }\n\n  _createClass(ParserError, [{\n    key: \"getParserError\",\n    value: function getParserError(equation) {\n      return _objectSpread2({\n        type: 'parser-error',\n        errorType: this.type,\n        start: this.start,\n        end: this.end,\n        equation: equation\n      }, this.values);\n    }\n  }]);\n\n  return ParserError;\n}( /*#__PURE__*/_wrapNativeSuper(Error)); // Operators type map\n\n\nvar operatorMap = {\n  '=': 'equals',\n  '<': 'less-than',\n  '>': 'greater-than',\n  '≤': 'less-than-equals',\n  '≥': 'greater-than-equals',\n  '≈': 'approximates',\n  '+': 'plus',\n  '-': 'minus',\n  '−': 'minus',\n  // Minus Sign (U+2212)\n  '±': 'plus-minus',\n  ' ': 'multiply-implicit',\n  '*': 'multiply-dot',\n  '∗': 'multiply-dot',\n  // Asterisk Operator (U+2217)\n  '⋅': 'multiply-dot',\n  // Dot Operator (U+22C5)\n  '×': 'multiply-cross',\n  // Multiplication Sign (U+00D7)\n  '✕': 'multiply-cross',\n  // Multiplication X (U+2715)\n  '/': 'divide-fraction',\n  '∕': 'divide-fraction',\n  // Division Slash (U+2215)\n  '÷': 'divide-inline',\n  // Division Sign (U+00F7)\n  '^': 'power',\n  '?': 'operator-placeholder'\n};\nvar isWhitespace = /\\s/;\nvar isCharNumber = /[0-9.]/; // Leading numbers doesn't matter, since number check is before name check\n\nvar isCharName = /[0-9A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u01BF\\u0391-\\u03c9'\"%‰°_∞]/;\nvar isValidNumber = /^([0-9]+|\\.[0-9]+|[0-9]+\\.[0-9]+)$/;\n\nfunction endOfPattern(input, pattern, start) {\n  var end = start;\n\n  do {\n    end++;\n  } while (end < input.length && pattern.test(input[end]));\n\n  return end;\n}\n\nvar tokenize = function tokenize(input) {\n  var result = [];\n  var lastType = null;\n\n  for (var i = 0; i < input.length; i++) {\n    var current = input[i];\n\n    if (isWhitespace.test(current)) {\n      continue;\n    } else if (isCharNumber.test(current)) {\n      var end = endOfPattern(input, isCharNumber, i);\n\n      if (lastType === 'number') {\n        throw new ParserError(result[result.length - 1].position, end - 1, 'numberWhitespace', {});\n      }\n\n      if (lastType === 'name' || lastType === 'parens-close' || lastType === 'matrix-close') {\n        result.push({\n          type: 'operator',\n          value: 'multiply-implicit',\n          symbol: ' ',\n          position: i\n        });\n      }\n\n      var value = input.substring(i, end);\n\n      if (!isValidNumber.test(value)) {\n        throw new ParserError(i, end - 1, 'invalidNumber', {});\n      }\n\n      result.push({\n        type: 'number',\n        value: value,\n        position: i\n      });\n      i = end - 1;\n    } else if (isCharName.test(current)) {\n      if (lastType === 'number' || lastType === 'name' || lastType === 'parens-close' || lastType === 'matrix-close') {\n        result.push({\n          type: 'operator',\n          value: 'multiply-implicit',\n          symbol: ' ',\n          position: i\n        });\n      }\n\n      var _end = endOfPattern(input, isCharName, i);\n\n      result.push({\n        type: 'name',\n        value: input.substring(i, _end),\n        position: i\n      });\n      i = _end - 1;\n    } else if (current in operatorMap) {\n      if (lastType === 'operator') {\n        throw new ParserError(i - 1, i, 'adjecentOperator', {});\n      }\n\n      result.push({\n        type: 'operator',\n        value: operatorMap[current],\n        symbol: current,\n        position: i\n      });\n    } else if (current === '(') {\n      if (lastType === 'number' || lastType === 'parens-close' || lastType === 'matrix-close') {\n        result.push({\n          type: 'operator',\n          value: 'multiply-implicit',\n          symbol: ' ',\n          position: i\n        });\n      }\n\n      result.push({\n        type: 'parens-open',\n        position: i\n      });\n    } else if (current === ')') {\n      result.push({\n        type: 'parens-close',\n        position: i\n      });\n    } else if (current === '[') {\n      if (lastType === 'number' || lastType === 'name' || lastType === 'parens-close') {\n        result.push({\n          type: 'operator',\n          value: 'multiply-implicit',\n          symbol: ' ',\n          position: i\n        });\n      }\n\n      result.push({\n        type: 'matrix-open',\n        position: i\n      });\n    } else if (current === ']') {\n      result.push({\n        type: 'matrix-close',\n        position: i\n      });\n    } else if (current === ',') {\n      result.push({\n        type: 'comma',\n        position: i\n      });\n    } else {\n      throw new ParserError(i, i, 'invalidChar', {\n        character: current\n      });\n    }\n\n    lastType = result[result.length - 1].type;\n  }\n\n  return result;\n};\n/**\n * Compiler-error and runtime-error on unhandled type\n *\n * @param typed: Object with type-property\n * @param getMessage: get an error message for runtime errors\n */\n\n\nfunction throwUnknownType(typed, getMessage) {\n  throw new Error(getMessage(typed && typed.type || 'unknown'));\n}\n\nvar precedence = {\n  'equals': 1,\n  'less-than': 1,\n  'greater-than': 1,\n  'less-than-equals': 1,\n  'greater-than-equals': 1,\n  'approximates': 1,\n  'plus': 2,\n  'minus': 2,\n  'plus-minus': 2,\n  'multiply-implicit': 3,\n  'multiply-dot': 3,\n  'multiply-cross': 3,\n  'divide-fraction': 3,\n  'divide-inline': 3,\n  'power': 4,\n  'operator-placeholder': 5\n};\nvar unaryOperatorMap = {\n  'plus': 'positive',\n  'minus': 'negative',\n  'plus-minus': 'positive-negative',\n  'operator-placeholder': 'operator-unary-placeholder'\n};\nvar rightAssociativeOperators = ['power'];\n\nvar parseListExpression = function parseListExpression(input, tokens, startAt) {\n  var results = [];\n  var subexpression;\n  var i = startAt;\n\n  do {\n    subexpression = parseSubexpression(input, tokens, i);\n\n    if (subexpression.result) {\n      results.push(subexpression.result);\n    }\n\n    i = subexpression.last + 1;\n  } while (subexpression.terminator === 'comma');\n\n  return {\n    results: results,\n    terminator: subexpression.terminator,\n    last: subexpression.last\n  };\n};\n\nvar parseSubexpression = function parseSubexpression(input, tokens, startAt) {\n  var output = [];\n  var operators = [];\n\n  var getTokenType = function getTokenType(index) {\n    return tokens[index] ? tokens[index].type : undefined;\n  };\n\n  var getTokenPosition = function getTokenPosition(index) {\n    return tokens[index] && tokens[index].position;\n  };\n\n  var addOperator = function addOperator(operator) {\n    var b = output.pop();\n    var a = output.pop();\n    var unaryType = unaryOperatorMap[operator.value];\n\n    if (a && b) {\n      output.push({\n        type: operator.value,\n        a: a,\n        b: b\n      });\n    } else if (unaryType && b) {\n      output.push({\n        type: unaryType,\n        value: b\n      });\n    } else if (b) {\n      throw new ParserError(operator.position, operator.position, 'invalidUnary', {\n        symbol: operator.symbol\n      });\n    } else {\n      // No operands. This should never happen, all cases should be caught by operatorLast instead\n      throw new Error('Unexpected parser state, operator with no operands');\n    }\n  };\n\n  var prepareResult = function prepareResult(terminator, last) {\n    if (tokens[last - 1].type === 'operator') {\n      throw new ParserError(getTokenPosition(last - 1), getTokenPosition(last - 1), 'operatorLast', {});\n    }\n\n    while (operators.length > 0) {\n      addOperator(operators.pop());\n    }\n\n    if (output.length > 1) {\n      throw new ParserError(getTokenPosition(startAt), getTokenPosition(last - 1), 'multipleExpressions', {});\n    }\n\n    if (output.length === 0) {\n      return {\n        result: null,\n        terminator: terminator,\n        last: last\n      };\n    }\n\n    return {\n      result: output[0],\n      terminator: terminator,\n      last: last\n    };\n  };\n\n  for (var i = startAt; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    switch (token.type) {\n      case 'number':\n        output.push({\n          type: 'number',\n          value: token.value\n        });\n        break;\n\n      case 'name':\n        if (getTokenType(i + 1) === 'parens-open') {\n          // Function\n          var _parseListExpression = parseListExpression(input, tokens, i + 2),\n              results = _parseListExpression.results,\n              last = _parseListExpression.last,\n              terminator = _parseListExpression.terminator;\n\n          if (terminator !== 'parens-close') {\n            throw new ParserError(getTokenPosition(i + 1), getTokenPosition(last - 1), 'expectedCloseParens', {});\n          }\n\n          if (token.value === '_') {\n            output.push({\n              type: 'function-placeholder',\n              args: results\n            });\n          } else {\n            output.push({\n              type: 'function',\n              name: token.value,\n              args: results\n            });\n          }\n\n          i = last;\n        } else if (token.value === '_') {\n          output.push({\n            type: 'operand-placeholder'\n          });\n        } else {\n          // Variable\n          output.push({\n            type: 'variable',\n            name: token.value\n          });\n        }\n\n        break;\n\n      case 'matrix-open':\n        if (getTokenType(i + 1) === 'matrix-open') {\n          // Parsing matrix\n          // [[a,b,c][d,e,f][g,h,i]]\n          var values = []; // Extract all nested vectors\n\n          var current = i + 1;\n\n          while (getTokenType(current) === 'matrix-open') {\n            var _parseListExpression2 = parseListExpression(input, tokens, current + 1),\n                _results = _parseListExpression2.results,\n                _last = _parseListExpression2.last,\n                _terminator = _parseListExpression2.terminator;\n\n            if (_terminator !== 'matrix-close') {\n              throw new ParserError(getTokenPosition(current), getTokenPosition(_last - 1), 'expectedSquareBracket', {});\n            }\n\n            if (values.length > 0 && values[0].length !== _results.length) {\n              throw new ParserError(getTokenPosition(current), getTokenPosition(_last), 'matrixMixedDimension', {\n                lengthExpected: values[0].length,\n                lengthReceived: _results.length\n              });\n            }\n\n            if (_results.length === 0) {\n              throw new ParserError(getTokenPosition(current), getTokenPosition(_last), 'matrixEmpty', {});\n            }\n\n            values.push(_results);\n            current = _last + 1;\n          } // The last vector-component should be followed by a closing bracket\n\n\n          if (getTokenType(current) !== 'matrix-close') {\n            throw new ParserError(getTokenPosition(i), getTokenPosition(current - 1), 'expectedSquareBracket', {});\n          }\n\n          output.push({\n            type: 'matrix',\n            n: values[0].length,\n            m: values.length,\n            values: values\n          }); // Advance parsing past closing bracket\n\n          i = current;\n        } else {\n          // Parsing single vector\n          // [a,b,c]\n          var _parseListExpression3 = parseListExpression(input, tokens, i + 1),\n              _results2 = _parseListExpression3.results,\n              _last2 = _parseListExpression3.last,\n              _terminator2 = _parseListExpression3.terminator;\n\n          if (_terminator2 !== 'matrix-close') {\n            throw new ParserError(getTokenPosition(i), getTokenPosition(_last2 - 1), 'expectedSquareBracket', {});\n          }\n\n          if (_results2.length === 0) {\n            throw new ParserError(getTokenPosition(i), getTokenPosition(_last2), 'vectorEmpty', {});\n          }\n\n          output.push({\n            type: 'matrix',\n            n: 1,\n            m: _results2.length,\n            values: _results2.map(function (value) {\n              return [value];\n            })\n          });\n          i = _last2;\n        }\n\n        break;\n\n      case 'parens-open':\n        {\n          var _parseSubexpression = parseSubexpression(input, tokens, i + 1),\n              result = _parseSubexpression.result,\n              _last3 = _parseSubexpression.last,\n              _terminator3 = _parseSubexpression.terminator;\n\n          if (_terminator3 !== 'parens-close') {\n            throw new ParserError(getTokenPosition(i), getTokenPosition(_last3 - 1), 'expectedCloseParens', {});\n          }\n\n          if (result === null) {\n            throw new ParserError(getTokenPosition(i), getTokenPosition(_last3), 'emptyBlock', {});\n          }\n\n          output.push({\n            type: 'block',\n            child: result\n          });\n          i = _last3;\n          break;\n        }\n\n      case 'operator':\n        while (operators.length > 0) {\n          var other = operators[operators.length - 1];\n          var tokenPrecedence = precedence[token.value];\n          var otherPrecedence = precedence[other.value];\n\n          if (otherPrecedence < tokenPrecedence || rightAssociativeOperators.includes(other.value) && otherPrecedence === tokenPrecedence) {\n            break;\n          }\n\n          operators.pop();\n          addOperator(other);\n        }\n\n        operators.push(token);\n        break;\n\n      case 'comma':\n      case 'parens-close':\n      case 'matrix-close':\n        return prepareResult(token.type, i);\n\n      default:\n        throwUnknownType(token, function (type) {\n          return \"Equation render: cannot resolve type \\\"\".concat(type, \"\\\"\");\n        });\n    }\n  }\n\n  return prepareResult('end', tokens.length);\n};\n\nvar parse = function parse(input) {\n  try {\n    var tokens = tokenize(input);\n\n    var _parseSubexpression = parseSubexpression(input, tokens, 0),\n        result = _parseSubexpression.result,\n        last = _parseSubexpression.last,\n        terminator = _parseSubexpression.terminator;\n\n    if (terminator !== 'end') {\n      throw new ParserError(tokens[last].position, tokens[last].position, 'expectedEnd', {});\n    }\n\n    if (result === null) {\n      throw new ParserError(0, 0, 'expectedEnd', {});\n    }\n\n    return result;\n  } catch (error) {\n    if (error instanceof ParserError) {\n      return error.getParserError(input);\n    } else {\n      throw error;\n    }\n  }\n};\n\nvar renderTree = function renderTree(tree) {\n  if (tree.type === 'parser-error') {\n    return \"\".concat(tree.errorType, \" error\\n  \").concat(tree.equation, \"\\n  \").concat(''.padStart(tree.start, ' ').padEnd(tree.end + 1, '^'));\n  }\n\n  return pushTree(tree).join('\\n');\n};\n\nvar operatorMap$1 = {\n  'equals': '=',\n  'less-than': '<',\n  'greater-than': '>',\n  'less-than-equals': '≤',\n  'greater-than-equals': '≥',\n  'approximates': '≈',\n  'plus': '+',\n  'minus': '-',\n  'plus-minus': '±',\n  'multiply-implicit': '*',\n  'multiply-dot': '*',\n  'multiply-cross': '×',\n  'divide-fraction': '/',\n  'divide-inline': '÷',\n  'power': '^',\n  'operator-placeholder': '?'\n};\nvar unaryOperatorMap$1 = {\n  'positive': '+',\n  'negative': '-',\n  'positive-negative': '±',\n  'operator-unary-placeholder': '?'\n};\n\nfunction pushTree(tree) {\n  var buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var indent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var indentType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'initial';\n  var ownIndent = indent;\n  var descendantIndent = indent;\n\n  switch (indentType) {\n    case 'regular':\n      ownIndent += '├─ ';\n      descendantIndent += '│  ';\n      break;\n\n    case 'last':\n      ownIndent += '└─ ';\n      descendantIndent += '   ';\n      break;\n  }\n\n  switch (tree.type) {\n    case 'number':\n      buffer.push(ownIndent + tree.value);\n      break;\n\n    case 'variable':\n      buffer.push(\"\".concat(ownIndent, \"\\\"\").concat(tree.name, \"\\\"\"));\n      break;\n\n    case 'positive':\n    case 'negative':\n    case 'positive-negative':\n    case 'operator-unary-placeholder':\n      buffer.push(ownIndent + unaryOperatorMap$1[tree.type]);\n      pushTree(tree.value, buffer, descendantIndent, 'last');\n      break;\n\n    case 'block':\n      buffer.push(\"\".concat(ownIndent, \"()\"));\n      pushTree(tree.child, buffer, descendantIndent, 'last');\n      break;\n\n    case 'equals':\n    case 'less-than':\n    case 'greater-than':\n    case 'less-than-equals':\n    case 'greater-than-equals':\n    case 'approximates':\n    case 'plus':\n    case 'minus':\n    case 'plus-minus':\n    case 'multiply-implicit':\n    case 'multiply-dot':\n    case 'multiply-cross':\n    case 'divide-fraction':\n    case 'divide-inline':\n    case 'power':\n    case 'operator-placeholder':\n      buffer.push(ownIndent + operatorMap$1[tree.type]);\n      pushTree(tree.a, buffer, descendantIndent, 'regular');\n      pushTree(tree.b, buffer, descendantIndent, 'last');\n      break;\n\n    case 'function':\n      buffer.push(\"\".concat(ownIndent).concat(tree.name, \"()\"));\n      tree.args.forEach(function (arg, idx) {\n        pushTree(arg, buffer, descendantIndent, idx < tree.args.length - 1 ? 'regular' : 'last');\n      });\n      break;\n\n    case 'function-placeholder':\n      buffer.push(\"\".concat(ownIndent, \"<placeholder>()\"));\n      tree.args.forEach(function (arg, idx) {\n        pushTree(arg, buffer, descendantIndent, idx < tree.args.length - 1 ? 'regular' : 'last');\n      });\n      break;\n\n    case 'matrix':\n      if (tree.n === 1) {\n        buffer.push(\"\".concat(ownIndent, \"v \").concat(tree.m));\n        tree.values.forEach(function (row, idx) {\n          pushTree(row[0], buffer, descendantIndent, idx < tree.m - 1 ? 'regular' : 'last');\n        });\n      } else {\n        buffer.push(\"\".concat(ownIndent, \"m \").concat(tree.m, \"x\").concat(tree.n));\n        tree.values.forEach(function (row, rowIdx) {\n          var rowIndent = descendantIndent + (rowIdx < tree.m - 1 ? '│  ' : '   ');\n          row.forEach(function (cell, cellIdx) {\n            if (cellIdx === 0) {\n              if (rowIdx < tree.m - 1) {\n                pushTree(cell, buffer, descendantIndent + '├──┬─ ', 'initial');\n              } else {\n                pushTree(cell, buffer, descendantIndent + '└──┬─ ', 'initial');\n              }\n            } else {\n              pushTree(cell, buffer, rowIndent, cellIdx < tree.n - 1 ? 'regular' : 'last');\n            }\n          });\n        });\n      }\n\n      break;\n\n    case 'operand-placeholder':\n      buffer.push(\"\".concat(ownIndent, \"<placeholder>\"));\n      break;\n\n    default:\n      throwUnknownType(tree, function (type) {\n        return \"Equation tree to string: cannot resolve type \\\"\".concat(type, \"\\\"\");\n      });\n  }\n\n  return buffer;\n}\n\nvar stringify = function stringify(tree) {\n  if (tree.type === 'parser-error') {\n    return tree.equation;\n  }\n\n  var buffer = [];\n  stringifyTree(tree, buffer);\n  return buffer.join('');\n};\n\nvar operatorMap$2 = {\n  'equals': ' = ',\n  'less-than': ' < ',\n  'greater-than': ' > ',\n  'less-than-equals': ' ≤ ',\n  'greater-than-equals': ' ≥ ',\n  'approximates': ' ≈ ',\n  'plus': ' + ',\n  'minus': ' - ',\n  'plus-minus': ' ± ',\n  'multiply-implicit': ' ',\n  'multiply-dot': ' * ',\n  'multiply-cross': ' × ',\n  'divide-fraction': ' / ',\n  'divide-inline': ' ÷ ',\n  'power': ' ^ ',\n  'operator-placeholder': ' ? '\n};\nvar unaryOperatorMap$2 = {\n  'positive': '+',\n  'negative': '-',\n  'positive-negative': '±',\n  'operator-unary-placeholder': '?'\n};\n\nfunction stringifyTree(tree, buffer) {\n  switch (tree.type) {\n    case 'number':\n      buffer.push(tree.value.toString());\n      break;\n\n    case 'variable':\n      buffer.push(tree.name);\n      break;\n\n    case 'positive':\n    case 'negative':\n    case 'positive-negative':\n    case 'operator-unary-placeholder':\n      buffer.push(unaryOperatorMap$2[tree.type]);\n      stringifyTree(tree.value, buffer);\n      break;\n\n    case 'block':\n      buffer.push('(');\n      stringifyTree(tree.child, buffer);\n      buffer.push(')');\n      break;\n\n    case 'plus':\n    case 'minus':\n    case 'plus-minus':\n    case 'divide-fraction':\n    case 'divide-inline':\n    case 'multiply-implicit':\n    case 'multiply-dot':\n    case 'multiply-cross':\n    case 'power':\n    case 'equals':\n    case 'less-than':\n    case 'greater-than':\n    case 'less-than-equals':\n    case 'greater-than-equals':\n    case 'approximates':\n    case 'operator-placeholder':\n      stringifyTree(tree.a, buffer);\n      buffer.push(operatorMap$2[tree.type]);\n      stringifyTree(tree.b, buffer);\n      break;\n\n    case 'function':\n    case 'function-placeholder':\n      buffer.push(tree.type === 'function' ? tree.name : '_');\n      buffer.push('(');\n      tree.args.forEach(function (arg, idx) {\n        if (idx > 0) {\n          buffer.push(',');\n        }\n\n        stringifyTree(arg, buffer);\n      });\n      buffer.push(')');\n      break;\n\n    case 'matrix':\n      buffer.push('[');\n      tree.values.forEach(function (row, rowIdx) {\n        if (tree.n > 1) {\n          buffer.push('[');\n        } else if (rowIdx > 0) {\n          buffer.push(',');\n        }\n\n        row.forEach(function (cell, cellIdx) {\n          if (cellIdx > 0) {\n            buffer.push(',');\n          }\n\n          stringifyTree(cell, buffer);\n        });\n\n        if (tree.n > 1) {\n          buffer.push(']');\n        }\n      });\n      buffer.push(']');\n      break;\n\n    case 'operand-placeholder':\n      buffer.push('_');\n      break;\n\n    default:\n      throwUnknownType(tree, function (type) {\n        return \"Equation tree to string: cannot resolve type \\\"\".concat(type, \"\\\"\");\n      });\n  }\n}\n\nexport { parse, renderTree, stringify };","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar ResolverError = /*#__PURE__*/function (_Error) {\n  _inherits(ResolverError, _Error);\n\n  var _super = _createSuper(ResolverError);\n\n  function ResolverError(type, errorNode, values) {\n    var _this;\n\n    _classCallCheck(this, ResolverError);\n\n    _this = _super.call(this, \"Internal \".concat(type, \" parse error\"));\n\n    _defineProperty(_assertThisInitialized(_this), \"type\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"errorNode\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"values\", void 0);\n\n    _this.type = type;\n    _this.errorNode = errorNode;\n    _this.values = values;\n    return _this;\n  }\n\n  _createClass(ResolverError, [{\n    key: \"getResolveError\",\n    value: function getResolveError() {\n      return _objectSpread2({\n        type: 'resolve-error',\n        errorType: this.type,\n        errorNode: this.errorNode\n      }, this.values);\n    }\n  }]);\n\n  return ResolverError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar checkArgs = function checkArgs(node, minArgs, maxArgs) {\n  if (node.args.length < minArgs || node.args.length > maxArgs) {\n    throw new ResolverError('functionArgLength', node, {\n      name: node.name,\n      minArgs: minArgs,\n      maxArgs: maxArgs\n    });\n  }\n};\n\nfunction getUnit(x) {\n  if (x.type === 'unit') {\n    return x.units;\n  } else {\n    return {};\n  }\n}\n\nfunction getUnitless(x) {\n  if (x.type === 'unit') {\n    return x.value;\n  } else {\n    return x;\n  }\n}\n\nfunction isSameUnit(a, b) {\n  var keys = Object.keys(a);\n  return keys.length === Object.keys(b).length && keys.every(function (key) {\n    return a[key] === b[key];\n  });\n}\n\nfunction isEmptyUnit(x) {\n  return Object.keys(x).length === 0;\n}\n\nfunction combineUnits(a, b, mapper) {\n  // Get all units from a\n  var result = mapUnit(a, function (value, key) {\n    return mapper(value, b[key] || 0, key);\n  }); // Get remaining units from b\n\n  for (var _i = 0, _Object$entries = Object.entries(b); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n        _key = _Object$entries$_i[0],\n        _value = _Object$entries$_i[1];\n\n    if (_key in a) {\n      continue;\n    }\n\n    var newValue = mapper(0, _value, _key);\n\n    if (newValue !== 0) {\n      result[_key] = newValue;\n    }\n  }\n\n  return result;\n}\n\nfunction mapUnit(x, mapper) {\n  var result = {};\n\n  for (var _i2 = 0, _Object$entries2 = Object.entries(x); _i2 < _Object$entries2.length; _i2++) {\n    var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n        _key2 = _Object$entries2$_i[0],\n        _value2 = _Object$entries2$_i[1];\n\n    var newValue = mapper(_value2, _key2);\n\n    if (newValue !== 0) {\n      result[_key2] = newValue;\n    }\n  }\n\n  return result;\n}\n\nfunction isUnitEquation(unitTree) {\n  switch (unitTree.type) {\n    case 'multiply-implicit':\n    case 'multiply-dot':\n    case 'multiply-cross':\n    case 'divide-fraction':\n    case 'divide-inline':\n      return isUnitEquation(unitTree.a) && isUnitEquation(unitTree.b);\n\n    case 'power':\n      return unitTree.a.type === 'variable' && unitTree.b.type === 'number';\n\n    case 'variable':\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nfunction isUnitResult(unitResult) {\n  switch (unitResult.type) {\n    case 'unit':\n      return isUnitResult(unitResult.value);\n\n    case 'number':\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nvar valueWrap = function valueWrap(x) {\n  return {\n    type: 'number',\n    value: x\n  };\n};\n\nvar mapMatrix = function mapMatrix(result, mapper) {\n  return {\n    type: 'matrix',\n    m: result.m,\n    n: result.n,\n    values: result.values.map(function (row) {\n      return row.map(mapper);\n    })\n  };\n};\n/**\n * Compiler-error and runtime-error on unhandled type\n *\n * @param typed: Object with type-property\n * @param getMessage: get an error message for runtime errors\n */\n\n\nfunction throwUnknownType(typed, getMessage) {\n  throw new Error(getMessage(typed && typed.type || 'unknown'));\n} // don't narrow from control-flow (ie. T remains ResultNode in switch)\n\n\nvar negate = function negate(value) {\n  var castValue = value;\n\n  switch (castValue.type) {\n    case 'number':\n      return valueWrap(-castValue.value);\n\n    case 'matrix':\n      return mapMatrix(castValue, function (cell) {\n        return negate(cell);\n      });\n\n    case 'unit':\n      return {\n        type: 'unit',\n        units: _objectSpread2({}, castValue.units),\n        value: negate(castValue.value)\n      };\n\n    default:\n      return throwUnknownType(castValue, function (type) {\n        return \"Equation resolve: cannot resolve type \\\"\".concat(type, \"\\\"\");\n      });\n  }\n};\n\nfunction plus(node, aTree, bTree) {\n  return handleCases(node, aTree, bTree, function (a, b) {\n    if (!isSameUnit(a, b)) {\n      throw new ResolverError('plusDifferentUnits', node, {});\n    }\n\n    return a;\n  }, // number, number\n  function (a, b) {\n    return valueWrap(a.value + b.value);\n  }, // number, matrix\n  function (a, b) {\n    return mapMatrix(b, function (cell) {\n      return plus(node, a, cell);\n    });\n  }, // matrix, number\n  function (a, b) {\n    return mapMatrix(a, function (cell) {\n      return plus(node, cell, b);\n    });\n  }, // matrix, matrix\n  function (a, b) {\n    if (a.n !== b.n || a.m !== b.m) {\n      throw new ResolverError('plusMatrixMismatch', node, {\n        aDimensions: \"\".concat(a.m, \"x\").concat(a.n),\n        bDimensions: \"\".concat(b.m, \"x\").concat(b.n)\n      });\n    }\n\n    return {\n      type: 'matrix',\n      m: a.m,\n      n: a.n,\n      values: a.values.map(function (row, rowIdx) {\n        return row.map(function (cell, cellIdx) {\n          return plus(node, cell, b.values[rowIdx][cellIdx]);\n        });\n      })\n    };\n  });\n}\n\nfunction minus(node, a, b) {\n  return plus(node, a, negate(b));\n} // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\nfunction multiply(node, aTree, bTree, multiplyVectors) {\n  return handleCases(node, aTree, bTree, function (a, b) {\n    return combineUnits(a, b, function (unit1, unit2) {\n      return unit1 + unit2;\n    });\n  }, // number, number\n  function (a, b) {\n    return valueWrap(a.value * b.value);\n  }, // number, matrix\n  function (a, b) {\n    return mapMatrix(b, function (cell) {\n      return multiply(node, a, cell, multiplyVectors);\n    });\n  }, // matrix, number\n  function (a, b) {\n    return mapMatrix(a, function (cell) {\n      return multiply(node, cell, b, multiplyVectors);\n    });\n  }, // matrix, matrix\n  function (a, b) {\n    if (a.n === 1 && b.n === 1) {\n      return multiplyVectors(node, a, b);\n    } else {\n      return matrixProduct(node, a, b);\n    }\n  });\n}\n\nfunction scalarProduct(node, a, b) {\n  if (a.m !== b.m) {\n    throw new ResolverError('scalarProductUnbalanced', node, {\n      aLength: a.m,\n      bLength: b.m\n    });\n  }\n\n  var sum = a.values.reduce(function (current, row, rowIdx) {\n    return current + row[0].value * b.values[rowIdx][0].value;\n  }, 0);\n  return valueWrap(sum);\n}\n\nfunction vectorProduct(node, a, b) {\n  if (a.m !== 3 || b.m !== 3) {\n    throw new ResolverError('vectorProduct3VectorOnly', node, {});\n  }\n\n  return {\n    type: 'matrix',\n    n: 1,\n    m: 3,\n    values: [[valueWrap(a.values[1][0].value * b.values[2][0].value - a.values[2][0].value * b.values[1][0].value)], [valueWrap(a.values[2][0].value * b.values[0][0].value - a.values[0][0].value * b.values[2][0].value)], [valueWrap(a.values[0][0].value * b.values[1][0].value - a.values[1][0].value * b.values[0][0].value)]]\n  };\n}\n\nfunction matrixProduct(node, a, b) {\n  if (a.n !== b.m) {\n    throw new ResolverError('matrixProductMatrixMismatch', node, {\n      aDimensions: \"\".concat(a.m, \"x\").concat(a.n),\n      bDimensions: \"\".concat(b.m, \"x\").concat(b.n)\n    });\n  }\n\n  return {\n    type: 'matrix',\n    m: a.m,\n    n: b.n,\n    values: a.values.map(function (row, aRow) {\n      return b.values[0].map(function (cell, bCol) {\n        return valueWrap(a.values[aRow].reduce(function (current, innerCell, colIdx) {\n          return current + innerCell.value * b.values[colIdx][bCol].value;\n        }, 0));\n      });\n    })\n  };\n}\n\nfunction multiplyImplicit(node, a, b) {\n  if (a.type === 'matrix' && b.type === 'matrix' && a.n === 1 && b.n === 1) {\n    throw new ResolverError('multiplyImplicitNoVectors', node, {});\n  }\n\n  return multiply(node, a, b, scalarProduct);\n}\n\nfunction multiplyDot(node, a, b) {\n  return multiply(node, a, b, scalarProduct);\n}\n\nfunction multiplyCross(node, a, b) {\n  return multiply(node, a, b, vectorProduct);\n}\n\nfunction divide(node, aTree, bTree) {\n  if (aTree.type === 'matrix' && bTree.type === 'matrix') {\n    throw new ResolverError('divideMatrixMatrix', node, {});\n  }\n\n  if (bTree.type === 'number' && bTree.value === 0) {\n    throw new ResolverError('divideNotZero', node, {});\n  }\n\n  if (bTree.type === 'matrix' && bTree.values.some(function (row) {\n    return row.some(function (cell) {\n      return cell.value === 0;\n    });\n  })) {\n    throw new ResolverError('divideNotZero', node, {});\n  }\n\n  return handleCases(node, aTree, bTree, function (a, b) {\n    return combineUnits(a, b, function (factor1, factor2) {\n      return factor1 - factor2;\n    });\n  }, // number, number\n  function (a, b) {\n    return valueWrap(a.value / b.value);\n  }, // number, matrix\n  function (a, b) {\n    return mapMatrix(b, function (cell) {\n      return divide(node, a, cell);\n    });\n  }, // matrix, number\n  function (a, b) {\n    return mapMatrix(a, function (cell) {\n      return divide(node, cell, b);\n    });\n  }, // matrix, matrix\n  null);\n}\n\nfunction power(node, aTree, bTree) {\n  if (bTree.type !== 'number') {\n    throw new ResolverError('powerUnitlessNumberExponent', node, {});\n  }\n\n  return handleCases(node, aTree, bTree, function (a) {\n    return mapUnit(a, function (factor) {\n      return factor * bTree.value;\n    });\n  }, // number, number\n  function (a, b) {\n    return valueWrap(Math.pow(a.value, b.value));\n  }, // number, matrix\n  null, // matrix, number\n  function (a, b) {\n    return mapMatrix(a, function (cell) {\n      return valueWrap(Math.pow(cell.value, b.value));\n    });\n  }, // matrix, matrix\n  null);\n}\n\nfunction handleCases(node, a, b, combineUnits, numberNumber, numberMatrix, matrixNumber, matrixMatrix) {\n  if (a.type === 'unit' || b.type === 'unit') {\n    var units = combineUnits(getUnit(a), getUnit(b));\n    var result = handleCases(node, getUnitless(a), getUnitless(b), combineUnits, numberNumber, numberMatrix, matrixNumber, matrixMatrix);\n\n    if (isEmptyUnit(units)) {\n      return result;\n    } else {\n      return {\n        type: 'unit',\n        units: units,\n        value: result\n      };\n    }\n  }\n\n  switch (a.type) {\n    case 'number':\n      switch (b.type) {\n        case 'number':\n          if (numberNumber) {\n            return numberNumber(a, b);\n          }\n\n          break;\n\n        case 'matrix':\n          if (numberMatrix) {\n            return numberMatrix(a, b);\n          }\n\n          break;\n      }\n\n      break;\n\n    case 'matrix':\n      {\n        switch (b.type) {\n          case 'number':\n            if (matrixNumber) {\n              return matrixNumber(a, b);\n            }\n\n            break;\n\n          case 'matrix':\n            if (matrixMatrix) {\n              return matrixMatrix(a, b);\n            }\n\n            break;\n        }\n\n        break;\n      }\n  }\n\n  throw new ResolverError('operatorInvalidArguments', node, {\n    operator: node.type,\n    a: a.type,\n    b: b.type\n  });\n}\n/**\n * Resolve an `EquationNode` into a `ResultNode`\n */\n\n\nvar resolve = function resolve(node) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (node.type === 'parser-error') {\n    return {\n      type: 'resolve-error',\n      errorType: 'invalidEquation',\n      errorNode: null\n    };\n  }\n\n  try {\n    return resolveNode(node, options);\n  } catch (error) {\n    if (error instanceof ResolverError) {\n      return error.getResolveError();\n    } else {\n      throw error;\n    }\n  }\n};\n\nvar resolveNode = function resolveNode(node, options) {\n  switch (node.type) {\n    case 'number':\n      return {\n        type: 'number',\n        value: parseFloat(node.value)\n      };\n\n    case 'variable':\n      return resolveVariable(node, options);\n\n    case 'positive':\n      return resolveNode(node.value, options);\n\n    case 'negative':\n      return negate(resolveNode(node.value, options));\n\n    case 'positive-negative':\n      throw new ResolverError('plusminusUnhandled', node, {});\n\n    case 'block':\n      return resolveNode(node.child, options);\n\n    case 'plus':\n      return plus(node, resolveNode(node.a, options), resolveNode(node.b, options));\n\n    case 'minus':\n      return minus(node, resolveNode(node.a, options), resolveNode(node.b, options));\n\n    case 'plus-minus':\n      throw new ResolverError('plusminusUnhandled', node, {});\n\n    case 'multiply-implicit':\n      return multiplyImplicit(node, resolveNode(node.a, options), resolveNode(node.b, options));\n\n    case 'multiply-dot':\n      return multiplyDot(node, resolveNode(node.a, options), resolveNode(node.b, options));\n\n    case 'multiply-cross':\n      return multiplyCross(node, resolveNode(node.a, options), resolveNode(node.b, options));\n\n    case 'divide-fraction':\n    case 'divide-inline':\n      return divide(node, resolveNode(node.a, options), resolveNode(node.b, options));\n\n    case 'power':\n      return power(node, resolveNode(node.a, options), resolveNode(node.b, options));\n\n    case 'function':\n      return resolveFunction(node, options);\n\n    case 'equals':\n    case 'less-than':\n    case 'less-than-equals':\n    case 'greater-than':\n    case 'greater-than-equals':\n    case 'approximates':\n      throw new ResolverError('noComparison', node, {});\n\n    case 'matrix':\n      {\n        // Keep track of resolved unit\n        var unit = null;\n        var values = node.values.map(function (row) {\n          return row.map(function (cell) {\n            var value = resolveNode(cell, options); // Compare units\n\n            if (unit) {\n              if (!isSameUnit(unit, getUnit(value))) {\n                throw new ResolverError('matrixDifferentUnits', node, {});\n              }\n            } else {\n              unit = getUnit(value);\n            } // Ensure all children are unitless numbers\n\n\n            var unitlessValue = getUnitless(value);\n\n            if (unitlessValue.type !== 'number') {\n              throw new ResolverError('matrixNoNesting', node, {});\n            }\n\n            return unitlessValue;\n          });\n        }); // Wrap in unit if necessary\n\n        if (!unit || isEmptyUnit(unit)) {\n          return {\n            type: 'matrix',\n            m: node.m,\n            n: node.n,\n            values: values\n          };\n        } else {\n          return {\n            type: 'unit',\n            units: unit,\n            value: {\n              type: 'matrix',\n              m: node.m,\n              n: node.n,\n              values: values\n            }\n          };\n        }\n      }\n\n    case 'function-placeholder':\n    case 'operand-placeholder':\n    case 'operator-placeholder':\n    case 'operator-unary-placeholder':\n      throw new ResolverError('placeholder', node, {});\n\n    default:\n      return throwUnknownType(node, function (type) {\n        return \"Equation resolve: cannot resolve type \\\"\".concat(type, \"\\\"\");\n      });\n  }\n};\n\nfunction resolveVariable(node, options) {\n  if (!options.variables || !options.variables[node.name]) {\n    throw new ResolverError('variableUnknown', node, {\n      name: node.name\n    });\n  }\n\n  return options.variables[node.name];\n}\n\nfunction resolveFunction(node, options) {\n  if (!options.functions || !options.functions[node.name]) {\n    throw new ResolverError('functionUnknown', node, {\n      name: node.name\n    });\n  }\n\n  return options.functions[node.name](node, options);\n}\n/**\n * Helper-function for creating an equation-function from an equation and a list\n * of variables.\n *\n * Creates a clone of variables/functions, so future modification isn't\n * included.\n *\n * @example\n * ```ts\n * const functions = {\n *  f: createResolverFunction(['x'], parse('2x+5'))\n * }\n * resolve('f(3)', { functions })\n * // -> { type: 'number', value: 11 }\n * ```\n */\n\n\nvar createResolverFunction = function createResolverFunction(argNames, expression, options) {\n  var expressionOptions = {\n    variables: _objectSpread2({}, options.variables),\n    functions: _objectSpread2({}, options.functions)\n  };\n  return function (node, argOptions) {\n    checkArgs(node, argNames.length, argNames.length);\n    argNames.forEach(function (n, idx) {\n      expressionOptions.variables[n] = resolveNode(node.args[idx], argOptions);\n    });\n    return resolveNode(expression, expressionOptions);\n  };\n};\n\nvar formatNumber = function formatNumber(value) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    type: 'auto',\n    significantFigures: 5\n  };\n  var number = numberFormatters[options.type](value, options);\n  return value < 0 ? {\n    type: 'negative',\n    value: number\n  } : number;\n};\n\nvar numberFormatters = {\n  exact: function exact(value) {\n    var _breakdownNumber = breakdownNumber(value.toString()),\n        _breakdownNumber2 = _slicedToArray(_breakdownNumber, 2),\n        digits = _breakdownNumber2[0],\n        exponent = _breakdownNumber2[1];\n\n    return toNumber(digits, exponent);\n  },\n  fixed: function fixed(value, _ref) {\n    var decimalDigits = _ref.digits;\n\n    var _breakdownNumber3 = breakdownNumber(value.toFixed(decimalDigits)),\n        _breakdownNumber4 = _slicedToArray(_breakdownNumber3, 2),\n        digits = _breakdownNumber4[0],\n        exponent = _breakdownNumber4[1];\n\n    return toNumber(digits, exponent);\n  },\n  max: function max(value, _ref2) {\n    var significantFigures = _ref2.significantFigures;\n\n    var _breakdownNumber5 = breakdownNumber(value < Math.pow(10, significantFigures) ? value.toExponential(significantFigures - 1) : value.toFixed(0)),\n        _breakdownNumber6 = _slicedToArray(_breakdownNumber5, 2),\n        digits = _breakdownNumber6[0],\n        exponent = _breakdownNumber6[1];\n\n    return toNumber(stripTrailingZeroes(digits), exponent);\n  },\n  precision: function precision(value, _ref3) {\n    var significantFigures = _ref3.significantFigures;\n\n    var _breakdownNumber7 = breakdownNumber(value < Math.pow(10, significantFigures) ? value.toExponential(significantFigures - 1) : value.toFixed(0)),\n        _breakdownNumber8 = _slicedToArray(_breakdownNumber7, 2),\n        digits = _breakdownNumber8[0],\n        exponent = _breakdownNumber8[1];\n\n    return toNumber(digits, exponent);\n  },\n  scientific: function scientific(value, _ref4) {\n    var significantFigures = _ref4.significantFigures;\n\n    var _breakdownNumber9 = breakdownNumber(value.toExponential(significantFigures - 1)),\n        _breakdownNumber10 = _slicedToArray(_breakdownNumber9, 2),\n        digits = _breakdownNumber10[0],\n        exponent = _breakdownNumber10[1];\n\n    return toExponent(toNumber(digits, 1), exponent - 1);\n  },\n  engineering: function engineering(value, _ref5) {\n    var significantFigures = _ref5.significantFigures;\n\n    var _breakdownNumber11 = breakdownNumber(value.toExponential(significantFigures - 1)),\n        _breakdownNumber12 = _slicedToArray(_breakdownNumber11, 2),\n        digits = _breakdownNumber12[0],\n        exponent = _breakdownNumber12[1];\n\n    var remainder = ((exponent - 1) % 3 + 3) % 3 + 1;\n    return toExponent(toNumber(digits, remainder), exponent - remainder);\n  },\n  auto: function auto(value, _ref6) {\n    var significantFigures = _ref6.significantFigures;\n\n    var _breakdownNumber13 = breakdownNumber(value.toExponential(significantFigures - 1)),\n        _breakdownNumber14 = _slicedToArray(_breakdownNumber13, 2),\n        digits = _breakdownNumber14[0],\n        exponent = _breakdownNumber14[1];\n\n    if (exponent - 1 < significantFigures && exponent > -2) {\n      return toNumber(stripTrailingZeroes(digits), exponent);\n    }\n\n    var remainder = ((exponent - 1) % 3 + 3) % 3 + 1;\n    return toExponent(toNumber(stripTrailingZeroes(digits), remainder), exponent - remainder);\n  }\n};\n/**\n * Breakdown a number into digits, exponent, positive/negative, handling\n * switches to exponent notation above 1e21. -12.345 = ['12345', 2]\n */\n\nvar breakdownNumber = function breakdownNumber(value) {\n  var _value$split = value.split('e'),\n      _value$split2 = _slicedToArray(_value$split, 2),\n      number = _value$split2[0],\n      exponentString = _value$split2[1];\n\n  var _number$slice$split = number.slice(number[0] === '-' ? 1 : 0).split('.'),\n      _number$slice$split2 = _slicedToArray(_number$slice$split, 2),\n      integer = _number$slice$split2[0],\n      _number$slice$split2$ = _number$slice$split2[1],\n      decimals = _number$slice$split2$ === void 0 ? '' : _number$slice$split2$;\n\n  var digits = integer + decimals;\n  var exponent = integer.length + (exponentString ? parseInt(exponentString, 10) : 0);\n  var firstNonZeroIndex = 0;\n\n  while (firstNonZeroIndex < digits.length && digits[firstNonZeroIndex] === '0') {\n    firstNonZeroIndex++;\n  } // If all digits are zero, leave them to allow for fixed trailing zeroes\n\n\n  if (firstNonZeroIndex === digits.length) {\n    return [digits, exponent];\n  } else {\n    return [digits.slice(firstNonZeroIndex), exponent - firstNonZeroIndex];\n  }\n};\n\nvar stripTrailingZeroes = function stripTrailingZeroes(digits) {\n  var firstTrailingZero = digits.length;\n\n  while (firstTrailingZero > 1 && digits[firstTrailingZero - 1] === '0') {\n    firstTrailingZero--;\n  }\n\n  return digits.slice(0, firstTrailingZero);\n};\n\nvar decimalPoint = '.';\n\nvar toNumber = function toNumber(digits, exponent) {\n  if (exponent <= 0) {\n    return {\n      type: 'number',\n      value: '0' + decimalPoint + '0'.repeat(-exponent) + digits\n    };\n  } else if (digits.length > exponent) {\n    return {\n      type: 'number',\n      value: digits.slice(0, exponent) + decimalPoint + digits.slice(exponent)\n    };\n  } else {\n    return {\n      type: 'number',\n      value: digits.padEnd(exponent, '0')\n    };\n  }\n};\n\nvar toExponent = function toExponent(number, exponent) {\n  var exponentNumber = {\n    type: 'number',\n    value: Math.abs(exponent).toString()\n  };\n  return {\n    type: 'multiply-dot',\n    a: number,\n    b: {\n      type: 'power',\n      a: {\n        type: 'number',\n        value: '10'\n      },\n      b: exponent < 0 ? {\n        type: 'block',\n        child: {\n          type: 'negative',\n          value: exponentNumber\n        }\n      } : exponentNumber\n    }\n  };\n};\n\nvar defaultSimplifiableUnits = ['N', 'J', 'W', 'Pa', 'Hz', 'lx', 'C', 'V', 'F', 'Ω', 'S', 'Wb', 'T', 'H', 'Gy'];\n\nfunction guessUnit(result, _ref) {\n  var _ref$simplifiableUnit = _ref.simplifiableUnits,\n      simplifiableUnits = _ref$simplifiableUnit === void 0 ? defaultSimplifiableUnits : _ref$simplifiableUnit,\n      _ref$variables = _ref.variables,\n      variables = _ref$variables === void 0 ? {} : _ref$variables;\n  var unit = simplifiableUnits.find(function (u) {\n    var variable = variables[u];\n    return variable && variable.type === 'unit' && variable.value.type === 'number' && isSameUnit(variable.units, result.units);\n  });\n\n  if (unit) {\n    var variable = variables[unit];\n    return {\n      type: 'unit',\n      units: _defineProperty({}, unit, 1),\n      value: divide({}, result.value, variable.value)\n    };\n  } else {\n    return result;\n  }\n}\n\nfunction wrapUnit(value, units) {\n  // Retain proper ordering of operations be letting negative wrap multiplication\n  if (value.type === 'negative') {\n    return {\n      type: 'negative',\n      value: {\n        type: 'multiply-implicit',\n        a: value.value,\n        b: units\n      }\n    };\n  } else {\n    return {\n      type: 'multiply-implicit',\n      a: value,\n      b: units\n    };\n  }\n}\n\nfunction unitToEquation(units) {\n  // Terms above fraction\n  var positive = []; // Terms below fraction\n\n  var negative = [];\n\n  for (var _i = 0, _Object$entries = Object.entries(units); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n        unit = _Object$entries$_i[0],\n        factor = _Object$entries$_i[1];\n\n    if (factor > 0) {\n      positive.push(getExponent(unit, factor));\n    } else {\n      negative.push(getExponent(unit, -factor));\n    }\n  }\n\n  if (negative.length === 0) {\n    return multiplyList(positive);\n  }\n\n  return {\n    type: 'divide-fraction',\n    a: multiplyList(positive),\n    b: multiplyList(negative)\n  };\n}\n\nfunction getExponent(unit, factor) {\n  if (factor === 1) {\n    return {\n      type: 'variable',\n      name: unit\n    };\n  } else {\n    return {\n      type: 'power',\n      a: {\n        type: 'variable',\n        name: unit\n      },\n      b: {\n        type: 'number',\n        value: factor.toString()\n      }\n    };\n  }\n}\n\nfunction multiplyList(list) {\n  if (list.length === 0) {\n    return {\n      type: 'number',\n      value: '1'\n    };\n  }\n\n  var current = list[0]; // Build multiplication tree\n\n  for (var i = 1; i < list.length; i++) {\n    current = {\n      type: 'multiply-implicit',\n      a: current,\n      b: list[i]\n    };\n  }\n\n  return current;\n}\n/**\n * Resolve an `EquationNode` (or `EquationParserError`), wraps it in an\n * `equals`-node and adds the result as an `EquationNode`.\n * */\n\n\nvar format = function format(equation) {\n  var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var result = resolve(equation, options);\n  var unitResult = unit ? resolve(unit, options) : null;\n  return formatPreresolved(equation, unit, result, unitResult, options);\n};\n/**\n * Wraps a resolved `EquationNode` in an `equals`-node with a formatted\n * `ResultNode` as the right-hand side.\n *\n * This is used internally by `format`, it's mostly useful if the result needs\n * to be exposed with the equation. It assumes `equation` matches `result`, and `unit` matches `unitResult`\n */\n\n\nvar formatPreresolved = function formatPreresolved(equation) {\n  var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var result = arguments.length > 2 ? arguments[2] : undefined;\n  var unitResult = arguments.length > 3 ? arguments[3] : undefined;\n  var options = arguments.length > 4 ? arguments[4] : undefined;\n\n  if (equation.type === 'parser-error') {\n    return equation;\n  }\n\n  if (unit && unit.type === 'parser-error') {\n    return unit;\n  }\n\n  if (unit && !isUnitEquation(unit)) {\n    return {\n      type: 'resolve-error',\n      errorType: 'invalidUnit',\n      node: wrapError(equation, unit),\n      errorNode: unit\n    };\n  }\n\n  if (result.type === 'resolve-error') {\n    return _objectSpread2(_objectSpread2({}, result), {}, {\n      node: wrapError(equation, unit)\n    });\n  }\n\n  if (unitResult && unitResult.type === 'resolve-error') {\n    return _objectSpread2(_objectSpread2({}, unitResult), {}, {\n      node: wrapError(equation, unit)\n    });\n  }\n\n  if (unitResult && !isUnitResult(unitResult)) {\n    return {\n      type: 'resolve-error',\n      errorType: 'invalidUnit',\n      node: wrapError(equation, unit),\n      errorNode: unit\n    };\n  }\n\n  return {\n    type: 'equals',\n    a: equation,\n    b: resultToEquationWithUnit(result, unit, unitResult, options)\n  };\n};\n\nvar wrapError = function wrapError(equation, unit) {\n  return {\n    type: 'equals',\n    a: equation,\n    b: unit ? {\n      type: 'multiply-implicit',\n      a: {\n        type: 'operand-placeholder'\n      },\n      b: unit\n    } : {\n      type: 'operand-placeholder'\n    }\n  };\n};\n\nfunction resultToEquationWithUnit(result, unit, unitResult, options) {\n  if (unit && unitResult) {\n    var value = divide(unit, getUnitless(result), getUnitless(unitResult));\n    var diffUnits = combineUnits(getUnit(result), getUnit(unitResult), function (a, b) {\n      return a - b;\n    });\n\n    if (isEmptyUnit(diffUnits)) {\n      return wrapUnit(resultToEquation(value, options), unit);\n    } else {\n      return wrapUnit(resultToEquation(value, options), {\n        type: 'multiply-implicit',\n        a: unit,\n        b: unitToEquation(diffUnits)\n      });\n    }\n  } else {\n    return resultToEquation(result, options);\n  }\n}\n\nfunction resultToEquation(result, options) {\n  switch (result.type) {\n    case 'number':\n      if (result.value < 0) {\n        return {\n          type: 'negative',\n          value: formatNumber(-result.value, options.decimals)\n        };\n      } else {\n        return formatNumber(result.value, options.decimals);\n      }\n\n    case 'matrix':\n      return {\n        type: 'matrix',\n        m: result.m,\n        n: result.n,\n        values: result.values.map(function (row) {\n          return row.map(function (cell) {\n            return resultToEquation(cell, options);\n          });\n        })\n      };\n\n    case 'unit':\n      {\n        var unit = guessUnit(result, options);\n        return wrapUnit(resultToEquation(unit.value, options), unitToEquation(unit.units));\n      }\n  }\n}\n\nvar isInteger = function isInteger(x) {\n  return x.type === 'number' && Math.round(x.value) === x.value;\n};\n\nvar createNumberFunction = function createNumberFunction(func) {\n  var minArgs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var maxArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : minArgs;\n  var validate = arguments.length > 3 ? arguments[3] : undefined;\n  return function (node, options) {\n    checkArgs(node, minArgs, maxArgs);\n    var resolvedArgs = node.args.map(function (arg) {\n      return resolveNode(arg, options);\n    });\n    var nonNumber = resolvedArgs.findIndex(function (arg) {\n      return arg.type !== 'number';\n    });\n\n    if (nonNumber !== -1) {\n      throw new ResolverError('functionNumberOnly', node.args[nonNumber], {\n        name: node.name\n      });\n    }\n\n    var numberArgs = resolvedArgs.map(function (arg) {\n      return arg.value;\n    });\n\n    if (validate) {\n      var result = validate.apply(void 0, [node.name].concat(_toConsumableArray(numberArgs)));\n\n      if (result) {\n        throw new ResolverError(result[1], node.args[result[0]], {\n          name: node.name\n        });\n      }\n    }\n\n    return valueWrap(func.apply(void 0, _toConsumableArray(numberArgs)));\n  };\n};\n/** Implementation of common functions with common abbreviated english names */\n\n\nvar defaultFunctions = {\n  sin: createNumberFunction(Math.sin),\n  cos: createNumberFunction(Math.cos),\n  tan: createNumberFunction(Math.tan),\n  asin: createNumberFunction(Math.asin),\n  acos: createNumberFunction(Math.acos),\n  atan: createNumberFunction(Math.atan),\n  atan2: createNumberFunction(Math.atan2, 2),\n  abs: createNumberFunction(Math.abs),\n  ceil: createNumberFunction(Math.ceil),\n  floor: createNumberFunction(Math.floor),\n  round: createNumberFunction(function (x) {\n    var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var factor = Math.pow(10, precision);\n    return Math.round(x * factor) / factor;\n  }, 1, 2),\n  max: createNumberFunction(Math.max, 1, Infinity),\n  min: createNumberFunction(Math.min, 1, Infinity),\n  pow: createNumberFunction(Math.pow, 2),\n  sqrt: createNumberFunction(Math.sqrt, 1, 1, function (name, x) {\n    if (x < 0) {\n      return [0, 'functionSqrt1Positive'];\n    }\n  }),\n  root: createNumberFunction(function (f, x) {\n    return Math.sign(x) * Math.pow(Math.abs(x), 1 / f);\n  }, 2, 2, function (name, f, x) {\n    if (Math.round(f) !== f || f <= 0) {\n      return [0, 'functionRoot1PositiveInteger'];\n    }\n\n    if (f % 2 === 0 && x < 0) {\n      return [1, 'functionRoot2Positive'];\n    }\n  }),\n  ln: createNumberFunction(Math.log),\n  log: createNumberFunction(function (x) {\n    var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n    return Math.log(x) / Math.log(base);\n  }, 1, 2),\n  sum: function sum(node, options) {\n    checkArgs(node, 4, 4);\n\n    var _node$args = _slicedToArray(node.args, 4),\n        variable = _node$args[0],\n        startTree = _node$args[1],\n        endTree = _node$args[2],\n        expression = _node$args[3];\n\n    if (variable.type !== 'variable') {\n      throw new ResolverError('functionSum1Variable', variable, {\n        name: node.name,\n        variableType: variable.type\n      });\n    }\n\n    var start = resolveNode(startTree, options);\n    var end = resolveNode(endTree, options);\n\n    if (!isInteger(start)) {\n      throw new ResolverError('functionSum2Integer', startTree, {\n        name: node.name\n      });\n    }\n\n    if (!isInteger(end)) {\n      throw new ResolverError('functionSum3Integer', endTree, {\n        name: node.name\n      });\n    }\n\n    if (start > end) {\n      var _ref = [end, start];\n      start = _ref[0];\n      end = _ref[1];\n    }\n\n    var enhancedOptions = {\n      functions: options.functions,\n      variables: _objectSpread2({}, options.variables)\n    }; // Get initial value\n\n    enhancedOptions.variables[variable.name] = start;\n    var sum = resolveNode(expression, enhancedOptions);\n\n    for (var i = start.value + 1; i <= end.value; i++) {\n      enhancedOptions.variables[variable.name] = valueWrap(i);\n      sum = plus(node, sum, resolveNode(expression, enhancedOptions));\n    }\n\n    return sum;\n  }\n};\n/** Definition of most common (and uncommon) units and constants */\n\nvar defaultVariables = {\n  // ========================================================================\n  // Mathematical constants\n  // ========================================================================\n  'e': valueWrap(Math.E),\n  'pi': valueWrap(Math.PI),\n  'π': valueWrap(Math.PI),\n  'phi': valueWrap(1.618033988749895),\n  'φ': valueWrap(1.618033988749895),\n  // ========================================================================\n  // Length\n  // ========================================================================\n  // SI ---------------------------------------------------------------------\n  'pm': unitWrap(1e-12, {\n    m: 1\n  }),\n  // picometer\n  'nm': unitWrap(1e-9, {\n    m: 1\n  }),\n  // nanometer\n  'μm': unitWrap(1e-6, {\n    m: 1\n  }),\n  // micrometer\n  'mm': unitWrap(1e-3, {\n    m: 1\n  }),\n  // millimeter\n  'cm': unitWrap(1e-2, {\n    m: 1\n  }),\n  // centimeter\n  'dm': unitWrap(1e-1, {\n    m: 1\n  }),\n  // decimeter\n  'm': unitWrap(1e0, {\n    m: 1\n  }),\n  // meter (base unit)\n  'km': unitWrap(1e3, {\n    m: 1\n  }),\n  // kilometer\n  'Mm': unitWrap(1e6, {\n    m: 1\n  }),\n  // megameter\n  'Gm': unitWrap(1e9, {\n    m: 1\n  }),\n  // gigameter\n  // Imperial ---------------------------------------------------------------\n  'thou': unitWrap(2.54e-7, {\n    m: 1\n  }),\n  // thou, 1/1000 inch\n  'mil': unitWrap(2.54e-7, {\n    m: 1\n  }),\n  // mil, 1/1000 inch\n  'in': unitWrap(2.54e-2, {\n    m: 1\n  }),\n  // inch\n  '\"': unitWrap(2.54e-2, {\n    m: 1\n  }),\n  // inch, \" symbol\n  'ft': unitWrap(0.3048, {\n    m: 1\n  }),\n  // foot\n  '\\'': unitWrap(0.3048, {\n    m: 1\n  }),\n  // foot, ' symbol\n  'yd': unitWrap(0.9144, {\n    m: 1\n  }),\n  // yard\n  'mi': unitWrap(1609.344, {\n    m: 1\n  }),\n  // mile\n  // Others -----------------------------------------------------------------\n  'NM': unitWrap(1852, {\n    m: 1\n  }),\n  // natical mile\n  'nmi': unitWrap(1852, {\n    m: 1\n  }),\n  // natical mile\n  'Å': unitWrap(1e-10, {\n    m: 1\n  }),\n  // ångström\n  'AU': unitWrap(1.4959787e11, {\n    m: 1\n  }),\n  // astronomical unit\n  'pc': unitWrap(3.0856776e16, {\n    m: 1\n  }),\n  // parsec\n  'ls': unitWrap(2.99792458e8, {\n    m: 1\n  }),\n  // light-second\n  'ly': unitWrap(9.46073047e15, {\n    m: 1\n  }),\n  // light-year\n  'Kly': unitWrap(9.46073047e18, {\n    m: 1\n  }),\n  // kilolight-year\n  'Mly': unitWrap(9.46073047e21, {\n    m: 1\n  }),\n  // megalight-year\n  'Gly': unitWrap(9.46073047e24, {\n    m: 1\n  }),\n  // gigalight-year\n  // ========================================================================\n  // Area\n  // ========================================================================\n  // Imperial ---------------------------------------------------------------\n  'ac': unitWrap(4046.856, {\n    m: 2\n  }),\n  // acre (international)\n  // Others -----------------------------------------------------------------\n  'ha': unitWrap(1e4, {\n    m: 2\n  }),\n  // hectare\n  'b': unitWrap(1e-28, {\n    m: 2\n  }),\n  // barn (physics)\n  // ========================================================================\n  // Volume\n  // ========================================================================\n  // SI ---------------------------------------------------------------------\n  'μL': unitWrap(1e-9, {\n    m: 3\n  }),\n  // microliter\n  'mL': unitWrap(1e-6, {\n    m: 3\n  }),\n  // milliliter\n  'cL': unitWrap(1e-5, {\n    m: 3\n  }),\n  // centiliter\n  'dL': unitWrap(1e-4, {\n    m: 3\n  }),\n  // deciliter\n  'L': unitWrap(1e-3, {\n    m: 3\n  }),\n  // liter\n  // Imperial ---------------------------------------------------------------\n  'pt': unitWrap(5.68e-4, {\n    m: 3\n  }),\n  // pint (imperial)\n  'qt': unitWrap(1.13652e-3, {\n    m: 3\n  }),\n  // quart (imperial)\n  'gal': unitWrap(4.54609e-3, {\n    m: 3\n  }),\n  // gallon (imperial)\n  'pt_l': unitWrap(4.73e-4, {\n    m: 3\n  }),\n  // pint (US liquid)\n  'qt_l': unitWrap(9.46e-4, {\n    m: 3\n  }),\n  // quart (US liquid)\n  'gal_l': unitWrap(3.785e-3, {\n    m: 3\n  }),\n  // gallon (US liquid)\n  'pt_d': unitWrap(5.51e-4, {\n    m: 3\n  }),\n  // pint (US dry)\n  'qt_d': unitWrap(1.101e-3, {\n    m: 3\n  }),\n  // quart (US dry)\n  'gal_d': unitWrap(4.405e-3, {\n    m: 3\n  }),\n  // gallon (US dry)\n  // ========================================================================\n  // Mass\n  // ========================================================================\n  // SI ---------------------------------------------------------------------\n  'ng': unitWrap(1e-12, {\n    kg: 1\n  }),\n  // nanogram\n  'μg': unitWrap(1e-9, {\n    kg: 1\n  }),\n  // microgram\n  'mg': unitWrap(1e-6, {\n    kg: 1\n  }),\n  // milligram\n  'g': unitWrap(1e-3, {\n    kg: 1\n  }),\n  // gram\n  'kg': unitWrap(1e0, {\n    kg: 1\n  }),\n  // kilogram (base unit)\n  'Mg': unitWrap(1e3, {\n    kg: 1\n  }),\n  // megagram\n  'Gg': unitWrap(1e6, {\n    kg: 1\n  }),\n  // gigagram\n  't': unitWrap(1e3, {\n    kg: 1\n  }),\n  // tonne (metric ton)\n  'u': unitWrap(1.660539e-27, {\n    kg: 1\n  }),\n  // unified atomic mass unit\n  'Da': unitWrap(1.660539e-27, {\n    kg: 1\n  }),\n  // dalton\n  // Imperial ---------------------------------------------------------------\n  'oz': unitWrap(2.83495e-3, {\n    kg: 1\n  }),\n  // ounce\n  'lb': unitWrap(0.453592, {\n    kg: 1\n  }),\n  // pound\n  'st': unitWrap(6.350293, {\n    kg: 1\n  }),\n  // stone\n  'ton': unitWrap(1.0160e3, {\n    kg: 1\n  }),\n  // ton\n  // ========================================================================\n  // Time\n  // ========================================================================\n  // SI ---------------------------------------------------------------------\n  'as': unitWrap(1e-18, {\n    s: 1\n  }),\n  // attosecond\n  'fs': unitWrap(1e-15, {\n    s: 1\n  }),\n  // femtosecond\n  'ps': unitWrap(1e-12, {\n    s: 1\n  }),\n  // picosecond\n  'ns': unitWrap(1e-9, {\n    s: 1\n  }),\n  // nanosecond\n  'μs': unitWrap(1e-6, {\n    s: 1\n  }),\n  // microsecond\n  'ms': unitWrap(1e-3, {\n    s: 1\n  }),\n  // millisecond\n  's': unitWrap(1e0, {\n    s: 1\n  }),\n  // second (base unit)\n  // Others -----------------------------------------------------------------\n  'min': unitWrap(60, {\n    s: 1\n  }),\n  // minute\n  'h': unitWrap(3600, {\n    s: 1\n  }),\n  // hour\n  'hr': unitWrap(3600, {\n    s: 1\n  }),\n  // hour\n  'd': unitWrap(86400, {\n    s: 1\n  }),\n  // day\n  'day': unitWrap(86400, {\n    s: 1\n  }),\n  // day\n  'y': unitWrap(31557600, {\n    s: 1\n  }),\n  // year (Julian, 365.25 days)\n  'yr': unitWrap(31557600, {\n    s: 1\n  }),\n  // year (Julian, 365.25 days)\n  // ========================================================================\n  // Frequency\n  // ========================================================================\n  'nHz': unitWrap(1e-9, {\n    s: -1\n  }),\n  // nanohertz\n  'μHz': unitWrap(1e-6, {\n    s: -1\n  }),\n  // microhertz\n  'mHz': unitWrap(1e-3, {\n    s: -1\n  }),\n  // millihertz\n  'Hz': unitWrap(1e0, {\n    s: -1\n  }),\n  // hertz\n  'kHz': unitWrap(1e3, {\n    s: -1\n  }),\n  // kilohertz\n  'MHz': unitWrap(1e6, {\n    s: -1\n  }),\n  // megahertz\n  'GHz': unitWrap(1e9, {\n    s: -1\n  }),\n  // gigahertz\n  'THz': unitWrap(1e12, {\n    s: -1\n  }),\n  // terahertz\n  'PHz': unitWrap(1e15, {\n    s: -1\n  }),\n  // petahertz\n  // ========================================================================\n  // Angle\n  // ========================================================================\n  'rad': valueWrap(1),\n  // radian\n  'sr': valueWrap(1),\n  // steradian\n  'deg': valueWrap(0.01745329252),\n  // degree\n  '°': valueWrap(0.01745329252),\n  // degree (symbol)\n  // ========================================================================\n  // Ratio\n  // ========================================================================\n  '%': valueWrap(0.01),\n  // percent\n  '‰': valueWrap(0.001),\n  // permille\n  // ========================================================================\n  // Temperature\n  // ========================================================================\n  'K': unitWrap(1, {\n    K: 1\n  }),\n  // Kelvin (base unit)\n  '°C': unitWrap(1, {\n    K: 1\n  }),\n  // degree Celcius\n  '°F': unitWrap(0.555556, {\n    K: 1\n  }),\n  // degree Fahrenheit\n  '°R': unitWrap(0.555556, {\n    K: 1\n  }),\n  // degree Rankine\n  // Offsets ----------------------------------------------------------------\n  '°C_0': unitWrap(273.15, {\n    K: 1\n  }),\n  // degree Celcius offset from absolute zero\n  '°F_0': unitWrap(255.372, {\n    K: 1\n  }),\n  // degree Fahrenheit offset from absolute zero\n  // ========================================================================\n  // Speed\n  // ========================================================================\n  'kph': unitWrap(0.27778, {\n    m: 1,\n    s: -1\n  }),\n  // kilometers per hour\n  'mph': unitWrap(0.44704, {\n    m: 1,\n    s: -1\n  }),\n  // miles per hour\n  'kn': unitWrap(0.514444, {\n    m: 1,\n    s: -1\n  }),\n  // knot, nautical mile per hour\n  'c': unitWrap(299792458, {\n    m: 1,\n    s: -1\n  }),\n  // Speed of light in vacuum\n  // ========================================================================\n  // Acceperation\n  // ========================================================================\n  'g_0': unitWrap(9.80665, {\n    m: 1,\n    s: -2\n  }),\n  // gravity of Earth\n  // ========================================================================\n  // Force\n  // ========================================================================\n  // SI ---------------------------------------------------------------------\n  'nN': unitWrap(1e-9, {\n    kg: 1,\n    m: 1,\n    s: -2\n  }),\n  // nanonewton\n  'μN': unitWrap(1e-6, {\n    kg: 1,\n    m: 1,\n    s: -2\n  }),\n  // micronewton\n  'mN': unitWrap(1e-3, {\n    kg: 1,\n    m: 1,\n    s: -2\n  }),\n  // millinewton\n  'N': unitWrap(1e0, {\n    kg: 1,\n    m: 1,\n    s: -2\n  }),\n  // newton\n  'kN': unitWrap(1e3, {\n    kg: 1,\n    m: 1,\n    s: -2\n  }),\n  // kilonewton\n  'MN': unitWrap(1e6, {\n    kg: 1,\n    m: 1,\n    s: -2\n  }),\n  // meganewton\n  'GN': unitWrap(1e9, {\n    kg: 1,\n    m: 1,\n    s: -2\n  }),\n  // giganewton\n  // Imperial ---------------------------------------------------------------\n  'ozf': unitWrap(0.278014, {\n    kg: 1,\n    m: 1,\n    s: -2\n  }),\n  // ounce force\n  'lbf': unitWrap(4.448222, {\n    kg: 1,\n    m: 1,\n    s: -2\n  }),\n  // pound force\n  // Others -----------------------------------------------------------------\n  'kgf': unitWrap(9.80665, {\n    kg: 1,\n    m: 1,\n    s: -2\n  }),\n  // kilogram force\n  // ========================================================================\n  // Energy\n  // ========================================================================\n  // SI ---------------------------------------------------------------------\n  'nJ': unitWrap(1e-9, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // nanojoule\n  'μJ': unitWrap(1e-6, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // microjoule\n  'mJ': unitWrap(1e-3, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // millijoule\n  'J': unitWrap(1e0, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // joule\n  'kJ': unitWrap(1e3, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // kilojoule\n  'MJ': unitWrap(1e6, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // megajoule\n  'GJ': unitWrap(1e9, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // gigajoule\n  'TJ': unitWrap(1e12, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // terajoule\n  'PJ': unitWrap(1e15, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // petajoule\n  // Others -----------------------------------------------------------------\n  'cal': unitWrap(4.1868, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // calorie\n  'kcal': unitWrap(4186.8, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // kilocalorie\n  'Cal': unitWrap(4186.8, {\n    kg: 1,\n    m: 2,\n    s: -2\n  }),\n  // kilocalorie\n  // ========================================================================\n  // Power\n  // ========================================================================\n  // SI ---------------------------------------------------------------------\n  'nW': unitWrap(1e-9, {\n    kg: 1,\n    m: 2,\n    s: -3\n  }),\n  // nanowatt\n  'μW': unitWrap(1e-6, {\n    kg: 1,\n    m: 2,\n    s: -3\n  }),\n  // microwatt\n  'mW': unitWrap(1e-3, {\n    kg: 1,\n    m: 2,\n    s: -3\n  }),\n  // milliwatt\n  'W': unitWrap(1e0, {\n    kg: 1,\n    m: 2,\n    s: -3\n  }),\n  // watt\n  'kW': unitWrap(1e3, {\n    kg: 1,\n    m: 2,\n    s: -3\n  }),\n  // kilowatt\n  'MW': unitWrap(1e6, {\n    kg: 1,\n    m: 2,\n    s: -3\n  }),\n  // megawatt\n  'GW': unitWrap(1e9, {\n    kg: 1,\n    m: 2,\n    s: -3\n  }),\n  // gigawatt\n  'TW': unitWrap(1e12, {\n    kg: 1,\n    m: 2,\n    s: -3\n  }),\n  // terawatt\n  'PW': unitWrap(1e15, {\n    kg: 1,\n    m: 2,\n    s: -3\n  }),\n  // petawatt\n  // ========================================================================\n  // Pressure\n  // ========================================================================\n  // SI ---------------------------------------------------------------------\n  'nPa': unitWrap(1e-9, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // nanopascal\n  'μPa': unitWrap(1e-6, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // micropascal\n  'mPa': unitWrap(1e-3, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // millipascal\n  'Pa': unitWrap(1e0, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // pascal\n  'kPa': unitWrap(1e3, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // kilopascal\n  'MPa': unitWrap(1e6, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // megapascal\n  'GPa': unitWrap(1e9, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // gigapascal\n  'TPa': unitWrap(1e12, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // terapascal\n  'PPa': unitWrap(1e15, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // petapascal\n  // Imperial ---------------------------------------------------------------\n  'psi': unitWrap(6.89475729e3, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // pounds per square inch\n  // Others -----------------------------------------------------------------\n  'atm': unitWrap(1.01325e5, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // standard atmosphere\n  'bar': unitWrap(1e5, {\n    kg: 1,\n    m: -1,\n    s: -2\n  }),\n  // bar\n  // ========================================================================\n  // Amount of substance\n  // ========================================================================\n  'nmol': unitWrap(1e-9, {\n    mol: 1\n  }),\n  // nanomole\n  'μmol': unitWrap(1e-6, {\n    mol: 1\n  }),\n  // micromole\n  'mmol': unitWrap(1e-3, {\n    mol: 1\n  }),\n  // millimole\n  'mol': unitWrap(1e0, {\n    mol: 1\n  }),\n  // mole (base unit)\n  'kmol': unitWrap(1e3, {\n    mol: 1\n  }),\n  // kilomole\n  'Mmol': unitWrap(1e6, {\n    mol: 1\n  }),\n  // megamole\n  'Gmol': unitWrap(1e9, {\n    mol: 1\n  }),\n  // gigamole\n  'Tmol': unitWrap(1e12, {\n    mol: 1\n  }),\n  // teramole\n  'Pmol': unitWrap(1e15, {\n    mol: 1\n  }),\n  // petamole\n  // Related ----------------------------------------------------------------\n  'N_A': unitWrap(6.022140857e23, {\n    mol: -1\n  }),\n  // Avogadro constant\n  // ========================================================================\n  // Luminous intensity\n  // ========================================================================\n  'ncd': unitWrap(1e-9, {\n    cd: 1\n  }),\n  // nanocandela\n  'μcd': unitWrap(1e-6, {\n    cd: 1\n  }),\n  // microcandela\n  'mcd': unitWrap(1e-3, {\n    cd: 1\n  }),\n  // millicandela\n  'cd': unitWrap(1e0, {\n    cd: 1\n  }),\n  // candela (base unit)\n  'kcd': unitWrap(1e3, {\n    cd: 1\n  }),\n  // kilocandela\n  'Mcd': unitWrap(1e6, {\n    cd: 1\n  }),\n  // megacandela\n  'Gcd': unitWrap(1e9, {\n    cd: 1\n  }),\n  // gigacandela\n  'Tcd': unitWrap(1e12, {\n    cd: 1\n  }),\n  // teracandela\n  'Pcd': unitWrap(1e15, {\n    cd: 1\n  }),\n  // petacandela\n  // ========================================================================\n  // Luminous flux\n  // ========================================================================\n  'nlm': unitWrap(1e-9, {\n    cd: 1\n  }),\n  // nanolumen\n  'μlm': unitWrap(1e-6, {\n    cd: 1\n  }),\n  // microlumen\n  'mlm': unitWrap(1e-3, {\n    cd: 1\n  }),\n  // millilumen\n  'lm': unitWrap(1e0, {\n    cd: 1\n  }),\n  // lumen\n  'klm': unitWrap(1e3, {\n    cd: 1\n  }),\n  // kilolumen\n  'Mlm': unitWrap(1e6, {\n    cd: 1\n  }),\n  // megalumen\n  'Glm': unitWrap(1e9, {\n    cd: 1\n  }),\n  // gigalumen\n  'Tlm': unitWrap(1e12, {\n    cd: 1\n  }),\n  // teralumen\n  'Plm': unitWrap(1e15, {\n    cd: 1\n  }),\n  // petalumen\n  // ========================================================================\n  // Illuminance\n  // ========================================================================\n  'nlx': unitWrap(1e-9, {\n    cd: 1,\n    m: -2\n  }),\n  // nanolux\n  'μlx': unitWrap(1e-6, {\n    cd: 1,\n    m: -2\n  }),\n  // microlux\n  'mlx': unitWrap(1e-3, {\n    cd: 1,\n    m: -2\n  }),\n  // millilux\n  'lx': unitWrap(1e0, {\n    cd: 1,\n    m: -2\n  }),\n  // lux\n  'klx': unitWrap(1e3, {\n    cd: 1,\n    m: -2\n  }),\n  // kilolux\n  'Mlx': unitWrap(1e6, {\n    cd: 1,\n    m: -2\n  }),\n  // megalux\n  'Glx': unitWrap(1e9, {\n    cd: 1,\n    m: -2\n  }),\n  // gigalux\n  'Tlx': unitWrap(1e12, {\n    cd: 1,\n    m: -2\n  }),\n  // teralux\n  'Plx': unitWrap(1e15, {\n    cd: 1,\n    m: -2\n  }),\n  // petalux\n  // ========================================================================\n  // Current\n  // ========================================================================\n  'nA': unitWrap(1e-9, {\n    A: 1\n  }),\n  // nanoampere\n  'μA': unitWrap(1e-6, {\n    A: 1\n  }),\n  // microampere\n  'mA': unitWrap(1e-3, {\n    A: 1\n  }),\n  // milliampere\n  'A': unitWrap(1e0, {\n    A: 1\n  }),\n  // ampere (base unit)\n  'kA': unitWrap(1e3, {\n    A: 1\n  }),\n  // kiloampere\n  'MA': unitWrap(1e6, {\n    A: 1\n  }),\n  // megaampere\n  'GA': unitWrap(1e9, {\n    A: 1\n  }),\n  // gigaampere\n  'TA': unitWrap(1e12, {\n    A: 1\n  }),\n  // teraampere\n  'PA': unitWrap(1e15, {\n    A: 1\n  }),\n  // petaampere\n  // ========================================================================\n  // Charge\n  // ========================================================================\n  'nC': unitWrap(1e-9, {\n    A: 1,\n    s: 1\n  }),\n  // nanocoulomb\n  'μC': unitWrap(1e-6, {\n    A: 1,\n    s: 1\n  }),\n  // microcoulomb\n  'mC': unitWrap(1e-3, {\n    A: 1,\n    s: 1\n  }),\n  // millicoulomb\n  'C': unitWrap(1e0, {\n    A: 1,\n    s: 1\n  }),\n  // coulomb\n  'kC': unitWrap(1e3, {\n    A: 1,\n    s: 1\n  }),\n  // kilocoulomb\n  'MC': unitWrap(1e6, {\n    A: 1,\n    s: 1\n  }),\n  // megacoulomb\n  'GC': unitWrap(1e9, {\n    A: 1,\n    s: 1\n  }),\n  // gigacoulomb\n  'TC': unitWrap(1e12, {\n    A: 1,\n    s: 1\n  }),\n  // teracoulomb\n  'PC': unitWrap(1e15, {\n    A: 1,\n    s: 1\n  }),\n  // petacoulomb\n  // ========================================================================\n  // Voltage\n  // ========================================================================\n  'nV': unitWrap(1e-9, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -1\n  }),\n  // nanovolt\n  'μV': unitWrap(1e-6, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -1\n  }),\n  // microvolt\n  'mV': unitWrap(1e-3, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -1\n  }),\n  // millivolt\n  'V': unitWrap(1e0, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -1\n  }),\n  // volt\n  'kV': unitWrap(1e3, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -1\n  }),\n  // kilovolt\n  'MV': unitWrap(1e6, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -1\n  }),\n  // megavolt\n  'GV': unitWrap(1e9, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -1\n  }),\n  // gigavolt\n  'TV': unitWrap(1e12, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -1\n  }),\n  // teravolt\n  'PV': unitWrap(1e15, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -1\n  }),\n  // petavolt\n  // ========================================================================\n  // Capacitance\n  // ========================================================================\n  'nF': unitWrap(1e-9, {\n    kg: -1,\n    m: -2,\n    s: 4,\n    A: 2\n  }),\n  // nanofarad\n  'μF': unitWrap(1e-6, {\n    kg: -1,\n    m: -2,\n    s: 4,\n    A: 2\n  }),\n  // microfarad\n  'mF': unitWrap(1e-3, {\n    kg: -1,\n    m: -2,\n    s: 4,\n    A: 2\n  }),\n  // millifarad\n  'F': unitWrap(1e0, {\n    kg: -1,\n    m: -2,\n    s: 4,\n    A: 2\n  }),\n  // farad\n  'kF': unitWrap(1e3, {\n    kg: -1,\n    m: -2,\n    s: 4,\n    A: 2\n  }),\n  // kilofarad\n  'MF': unitWrap(1e6, {\n    kg: -1,\n    m: -2,\n    s: 4,\n    A: 2\n  }),\n  // megafarad\n  'GF': unitWrap(1e9, {\n    kg: -1,\n    m: -2,\n    s: 4,\n    A: 2\n  }),\n  // gigafarad\n  'TF': unitWrap(1e12, {\n    kg: -1,\n    m: -2,\n    s: 4,\n    A: 2\n  }),\n  // terafarad\n  'PF': unitWrap(1e15, {\n    kg: -1,\n    m: -2,\n    s: 4,\n    A: 2\n  }),\n  // petafarad\n  // ========================================================================\n  // Resistance\n  // ========================================================================\n  'nΩ': unitWrap(1e-9, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -2\n  }),\n  // nanoohm\n  'μΩ': unitWrap(1e-6, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -2\n  }),\n  // microohm\n  'mΩ': unitWrap(1e-3, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -2\n  }),\n  // milliohm\n  'Ω': unitWrap(1e0, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -2\n  }),\n  // ohm\n  'kΩ': unitWrap(1e3, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -2\n  }),\n  // kiloohm\n  'MΩ': unitWrap(1e6, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -2\n  }),\n  // megaohm\n  'GΩ': unitWrap(1e9, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -2\n  }),\n  // gigaohm\n  'TΩ': unitWrap(1e12, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -2\n  }),\n  // teraohm\n  'PΩ': unitWrap(1e15, {\n    kg: 1,\n    m: 2,\n    s: -3,\n    A: -2\n  }),\n  // petaohm\n  // ========================================================================\n  // Resistance\n  // ========================================================================\n  'nS': unitWrap(1e-9, {\n    kg: -1,\n    m: -2,\n    s: 3,\n    A: 2\n  }),\n  // nanosiemens\n  'μS': unitWrap(1e-6, {\n    kg: -1,\n    m: -2,\n    s: 3,\n    A: 2\n  }),\n  // microsiemens\n  'mS': unitWrap(1e-3, {\n    kg: -1,\n    m: -2,\n    s: 3,\n    A: 2\n  }),\n  // millisiemens\n  'S': unitWrap(1e0, {\n    kg: -1,\n    m: -2,\n    s: 3,\n    A: 2\n  }),\n  // siemens\n  'kS': unitWrap(1e3, {\n    kg: -1,\n    m: -2,\n    s: 3,\n    A: 2\n  }),\n  // kilosiemens\n  'MS': unitWrap(1e6, {\n    kg: -1,\n    m: -2,\n    s: 3,\n    A: 2\n  }),\n  // megasiemens\n  'GS': unitWrap(1e9, {\n    kg: -1,\n    m: -2,\n    s: 3,\n    A: 2\n  }),\n  // gigasiemens\n  'TS': unitWrap(1e12, {\n    kg: -1,\n    m: -2,\n    s: 3,\n    A: 2\n  }),\n  // terasiemens\n  'PS': unitWrap(1e15, {\n    kg: -1,\n    m: -2,\n    s: 3,\n    A: 2\n  }),\n  // petasiemens\n  // ========================================================================\n  // Magnetic flux\n  // ========================================================================\n  'nWb': unitWrap(1e-9, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -1\n  }),\n  // nanoweber\n  'μWb': unitWrap(1e-6, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -1\n  }),\n  // microweber\n  'mWb': unitWrap(1e-3, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -1\n  }),\n  // milliweber\n  'Wb': unitWrap(1e0, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -1\n  }),\n  // weber\n  'kWb': unitWrap(1e3, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -1\n  }),\n  // kiloweber\n  'MWb': unitWrap(1e6, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -1\n  }),\n  // megaweber\n  'GWb': unitWrap(1e9, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -1\n  }),\n  // gigaweber\n  'TWb': unitWrap(1e12, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -1\n  }),\n  // teraweber\n  'PWb': unitWrap(1e15, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -1\n  }),\n  // petaweber\n  // ========================================================================\n  // Magnetic flux density\n  // ========================================================================\n  'nT': unitWrap(1e-9, {\n    kg: 1,\n    s: -2,\n    A: -1\n  }),\n  // nanotesla\n  'μT': unitWrap(1e-6, {\n    kg: 1,\n    s: -2,\n    A: -1\n  }),\n  // microtesla\n  'mT': unitWrap(1e-3, {\n    kg: 1,\n    s: -2,\n    A: -1\n  }),\n  // millitesla\n  'T': unitWrap(1e0, {\n    kg: 1,\n    s: -2,\n    A: -1\n  }),\n  // tesla\n  'kT': unitWrap(1e3, {\n    kg: 1,\n    s: -2,\n    A: -1\n  }),\n  // kilotesla\n  'MT': unitWrap(1e6, {\n    kg: 1,\n    s: -2,\n    A: -1\n  }),\n  // megatesla\n  'GT': unitWrap(1e9, {\n    kg: 1,\n    s: -2,\n    A: -1\n  }),\n  // gigatesla\n  'TT': unitWrap(1e12, {\n    kg: 1,\n    s: -2,\n    A: -1\n  }),\n  // teratesla\n  'PT': unitWrap(1e15, {\n    kg: 1,\n    s: -2,\n    A: -1\n  }),\n  // petatesla\n  // ========================================================================\n  // Magnetic flux\n  // ========================================================================\n  'nH': unitWrap(1e-9, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -2\n  }),\n  // nanohenry\n  'μH': unitWrap(1e-6, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -2\n  }),\n  // microhenry\n  'mH': unitWrap(1e-3, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -2\n  }),\n  // millihenry\n  'H': unitWrap(1e0, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -2\n  }),\n  // henry\n  'kH': unitWrap(1e3, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -2\n  }),\n  // kilohenry\n  'MH': unitWrap(1e6, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -2\n  }),\n  // megahenry\n  'GH': unitWrap(1e9, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -2\n  }),\n  // gigahenry\n  'TH': unitWrap(1e12, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -2\n  }),\n  // terahenry\n  'PH': unitWrap(1e15, {\n    kg: 1,\n    m: 2,\n    s: -2,\n    A: -2\n  }),\n  // petahenry\n  // ========================================================================\n  // Radioactivity (decays per unit of time)\n  // ========================================================================\n  'nBq': unitWrap(1e-9, {\n    s: -1\n  }),\n  // nanobecquerel\n  'μBq': unitWrap(1e-6, {\n    s: -1\n  }),\n  // microbecquerel\n  'mBq': unitWrap(1e-3, {\n    s: -1\n  }),\n  // millibecquerel\n  'Bq': unitWrap(1e0, {\n    s: -1\n  }),\n  // becquerel\n  'kBq': unitWrap(1e3, {\n    s: -1\n  }),\n  // kilobecquerel\n  'MBq': unitWrap(1e6, {\n    s: -1\n  }),\n  // megabecquerel\n  'GBq': unitWrap(1e9, {\n    s: -1\n  }),\n  // gigabecquerel\n  'TBq': unitWrap(1e12, {\n    s: -1\n  }),\n  // terabecquerel\n  'PBq': unitWrap(1e15, {\n    s: -1\n  }),\n  // petabecquerel\n  // ========================================================================\n  // Absorbed dose\n  // ========================================================================\n  'nGy': unitWrap(1e-9, {\n    m: 2,\n    s: -2\n  }),\n  // nanogray\n  'μGy': unitWrap(1e-6, {\n    m: 2,\n    s: -2\n  }),\n  // microgray\n  'mGy': unitWrap(1e-3, {\n    m: 2,\n    s: -2\n  }),\n  // milligray\n  'Gy': unitWrap(1e0, {\n    m: 2,\n    s: -2\n  }),\n  // gray\n  'kGy': unitWrap(1e3, {\n    m: 2,\n    s: -2\n  }),\n  // kilogray\n  'MGy': unitWrap(1e6, {\n    m: 2,\n    s: -2\n  }),\n  // megagray\n  'GGy': unitWrap(1e9, {\n    m: 2,\n    s: -2\n  }),\n  // gigagray\n  'TGy': unitWrap(1e12, {\n    m: 2,\n    s: -2\n  }),\n  // teragray\n  'PGy': unitWrap(1e15, {\n    m: 2,\n    s: -2\n  }),\n  // petagray\n  // ========================================================================\n  // Equivalent dose\n  // ========================================================================\n  'nSv': unitWrap(1e-9, {\n    m: 2,\n    s: -2\n  }),\n  // nanosievert\n  'μSv': unitWrap(1e-6, {\n    m: 2,\n    s: -2\n  }),\n  // microsievert\n  'mSv': unitWrap(1e-3, {\n    m: 2,\n    s: -2\n  }),\n  // millisievert\n  'Sv': unitWrap(1e0, {\n    m: 2,\n    s: -2\n  }),\n  // sievert\n  'kSv': unitWrap(1e3, {\n    m: 2,\n    s: -2\n  }),\n  // kilosievert\n  'MSv': unitWrap(1e6, {\n    m: 2,\n    s: -2\n  }),\n  // megasievert\n  'GSv': unitWrap(1e9, {\n    m: 2,\n    s: -2\n  }),\n  // gigasievert\n  'TSv': unitWrap(1e12, {\n    m: 2,\n    s: -2\n  }),\n  // terasievert\n  'PSv': unitWrap(1e15, {\n    m: 2,\n    s: -2\n  }),\n  // petasievert\n  // ========================================================================\n  // Data\n  // ========================================================================\n  'bit': unitWrap(1, {\n    bit: 1\n  }),\n  // bit\n  'B': unitWrap(8, {\n    bit: 1\n  }),\n  // byte\n  // Decimal bit (bit per IEC 60027) ----------------------------------------\n  'kbit': unitWrap(1e3, {\n    bit: 1\n  }),\n  // kilobit\n  'Mbit': unitWrap(1e6, {\n    bit: 1\n  }),\n  // megabit\n  'Gbit': unitWrap(1e9, {\n    bit: 1\n  }),\n  // gigabit\n  'Tbit': unitWrap(1e12, {\n    bit: 1\n  }),\n  // terabit\n  'Pbit': unitWrap(1e15, {\n    bit: 1\n  }),\n  // petabit\n  'Ebit': unitWrap(1e18, {\n    bit: 1\n  }),\n  // exabit\n  'Zbit': unitWrap(1e21, {\n    bit: 1\n  }),\n  // zettabit\n  'Ybit': unitWrap(1e24, {\n    bit: 1\n  }),\n  // yottabit\n  // Binary bit (bit per IEC 60027) -----------------------------------------\n  'Kibit': unitWrap(1024, {\n    bit: 1\n  }),\n  // kilobit\n  'Mibit': unitWrap(1048576, {\n    bit: 1\n  }),\n  // megabit\n  'Gibit': unitWrap(107374182, {\n    bit: 1\n  }),\n  // gigabit\n  'Tibit': unitWrap(1099511627776, {\n    bit: 1\n  }),\n  // terabit\n  'Pibit': unitWrap(1125899906842624, {\n    bit: 1\n  }),\n  // petabit\n  'Eibit': unitWrap(1152921504606847000, {\n    bit: 1\n  }),\n  // exabit\n  'Zibit': unitWrap(1180591620717411303424, {\n    bit: 1\n  }),\n  // zettabit\n  'Yibit': unitWrap(1208925819614629174706176, {\n    bit: 1\n  }),\n  // yottabit\n  // Decimal bit (b per IEEE 1541 Standard) ---------------------------------\n  'kb': unitWrap(1e3, {\n    bit: 1\n  }),\n  // kilobit\n  'Mb': unitWrap(1e6, {\n    bit: 1\n  }),\n  // megabit\n  'Gb': unitWrap(1e9, {\n    bit: 1\n  }),\n  // gigabit\n  'Tb': unitWrap(1e12, {\n    bit: 1\n  }),\n  // terabit\n  'Pb': unitWrap(1e15, {\n    bit: 1\n  }),\n  // petabit\n  'Eb': unitWrap(1e18, {\n    bit: 1\n  }),\n  // exabit\n  'Zb': unitWrap(1e21, {\n    bit: 1\n  }),\n  // zettabit\n  'Yb': unitWrap(1e24, {\n    bit: 1\n  }),\n  // yottabit\n  // Binary bit (b per IEEE 1541 Standard) ----------------------------------\n  'Kib': unitWrap(1024, {\n    bit: 1\n  }),\n  // kilobit\n  'Mib': unitWrap(1048576, {\n    bit: 1\n  }),\n  // megabit\n  'Gib': unitWrap(107374182, {\n    bit: 1\n  }),\n  // gigabit\n  'Tib': unitWrap(1099511627776, {\n    bit: 1\n  }),\n  // terabit\n  'Pib': unitWrap(1125899906842624, {\n    bit: 1\n  }),\n  // petabit\n  'Eib': unitWrap(1152921504606847000, {\n    bit: 1\n  }),\n  // exabit\n  'Zib': unitWrap(1180591620717411303424, {\n    bit: 1\n  }),\n  // zettabit\n  'Yib': unitWrap(1208925819614629174706176, {\n    bit: 1\n  }),\n  // yottabit\n  // Decimal byte -----------------------------------------------------------\n  'kB': unitWrap(8e3, {\n    bit: 1\n  }),\n  // kilobyte\n  'MB': unitWrap(8e6, {\n    bit: 1\n  }),\n  // megabyte\n  'GB': unitWrap(8e9, {\n    bit: 1\n  }),\n  // gigabyte\n  'TB': unitWrap(8e12, {\n    bit: 1\n  }),\n  // terabyte\n  'PB': unitWrap(8e15, {\n    bit: 1\n  }),\n  // petabyte\n  'EB': unitWrap(8e18, {\n    bit: 1\n  }),\n  // exabyte\n  'ZB': unitWrap(8e21, {\n    bit: 1\n  }),\n  // zettabyte\n  'YB': unitWrap(8e24, {\n    bit: 1\n  }),\n  // yottabyte\n  // Binary byte ------------------------------------------------------------\n  'KiB': unitWrap(8192, {\n    bit: 1\n  }),\n  // kilobyte\n  'MiB': unitWrap(8388608, {\n    bit: 1\n  }),\n  // megabyte\n  'GiB': unitWrap(8589934592, {\n    bit: 1\n  }),\n  // gigabyte\n  'TiB': unitWrap(8796093022208, {\n    bit: 1\n  }),\n  // terabyte\n  'PiB': unitWrap(9007199254740992, {\n    bit: 1\n  }),\n  // petabyte\n  'EiB': unitWrap(9223372036854776000, {\n    bit: 1\n  }),\n  // exabyte\n  'ZiB': unitWrap(9444732965739290427392, {\n    bit: 1\n  }),\n  // zettabyte\n  'YiB': unitWrap(9671406556917033397649408, {\n    bit: 1\n  }),\n  // yottabyte\n  // ========================================================================\n  // Miscellaneous\n  // ========================================================================\n  'G': unitWrap(6.67408e-11, {\n    m: 3,\n    kg: -1,\n    s: -2\n  }) // Gravitational constant\n\n};\n\nfunction unitWrap(value, units) {\n  return {\n    type: 'unit',\n    units: units,\n    value: valueWrap(value)\n  };\n}\n\nexport { createResolverFunction, defaultFunctions, defaultVariables, format, formatPreresolved, resolve };","import React, { createContext, useContext, memo, forwardRef, useImperativeHandle } from 'react';\nimport classnames from 'classnames';\nimport { parse } from 'equation-parser';\nimport { resolve, formatPreresolved } from 'equation-resolver';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _toArray(arr) {\n  return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e2) {\n          throw _e2;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e3) {\n      didErr = true;\n      err = _e3;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n/**\n * Compiler-error and runtime-error on unhandled type\n *\n * @param typed: Object with type-property\n * @param getMessage: get an error message for runtime errors\n */\n\n\nfunction throwUnknownType(typed, getMessage) {\n  throw new Error(getMessage(typed && typed.type || 'unknown'));\n}\n\nvar indexOffset = 0.3;\nvar indexFactor = 0.8;\nvar styles = {\n  main: {\n    display: 'inline-block',\n    fontStyle: 'italic'\n  },\n  index: {\n    fontSize: \"\".concat(indexFactor * 100, \"%\"),\n    position: 'relative'\n  }\n};\n\nfunction variable(_ref) {\n  var name = _ref.name;\n\n  var _name$split = name.split('_'),\n      _name$split2 = _toArray(_name$split),\n      main = _name$split2[0],\n      indices = _name$split2.slice(1);\n\n  return {\n    type: 'span',\n    props: {\n      style: _objectSpread2(_objectSpread2({}, styles.main), {}, {\n        marginLeft: /^[%‰°'\"]/.test(main) ? '-0.2em' : null\n      })\n    },\n    aboveMiddle: 0.7,\n    belowMiddle: 0.7 + indices.length * indexOffset,\n    children: /*#__PURE__*/React.createElement(React.Fragment, null, main, indices.map(function (indexName, idx) {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        key: idx,\n        style: _objectSpread2(_objectSpread2({}, styles.index), {}, {\n          top: \"\".concat(indexOffset * (idx + 1) / indexFactor, \"em\")\n        })\n      }, indexName);\n    }))\n  };\n}\n\nfunction Parens(_ref) {\n  var height = _ref.height,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? '()' : _ref$type,\n      _ref$flip = _ref.flip,\n      flip = _ref$flip === void 0 ? false : _ref$flip;\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    width: \"0.4em\",\n    style: {\n      verticalAlign: 'top',\n      transform: flip ? 'scale(-1, 1)' : undefined\n    },\n    viewBox: \"0 0 0.4 \".concat(height)\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: pathBuilders[type](height)\n  }));\n}\n\nvar pathBuilders = {\n  '()': function _(height) {\n    var offsetHeight = height - 1.4;\n    return \"M0.094 0.681q0 -0.312 0.18 -0.476l0.028 -0.024l0.013 0q0.012 0 0.015 0.003t0.003 0.006q0 0.004 -0.011 0.015q-0.155 0.164 -0.155 0.476l0 \".concat(offsetHeight, \"q0 0.321 0.155 0.476q0.011 0.011 0.011 0.015q0 0.009 -0.018 0.009l-0.013 0l-0.028 -0.024q-0.18 -0.164 -0.18 -0.476Z\");\n  },\n  '[]': function _(height) {\n    var offsetHeight = height - 0.55;\n    return \"M0.134 0.19h0.24v0.08h-0.16v\".concat(offsetHeight, \"h0.16v0.08h-0.24Z\");\n  },\n  '{}': function _(height) {\n    var offsetHeight = height - 1.37;\n    return \"M0.3472 \".concat(1.161 + offsetHeight, \"q0 0.014 -0.0048 0.02h-0.0144q-0.0608 0 -0.104 -0.026t-0.0544 -0.08q-0.0016 -0.006 -0.0024 -0.1445v\").concat(-offsetHeight / 2, \"q0 -0.021 0 -0.053q-0.0008 -0.089 -0.004 -0.1q-0.0008 -0.001 -0.0008 -0.002q-0.0096 -0.031 -0.0368 -0.053t-0.06 -0.023q-0.0088 0 -0.0112 -0.003t-0.0024 -0.016t0.0024 -0.016t0.0112 -0.003q0.0328 0 0.06 -0.022t0.0368 -0.054q0.0032 -0.012 0.0032 -0.025t0.0016 -0.131v\").concat(-offsetHeight / 2, \"q0.0008 -0.137 0.0024 -0.144q0.0064 -0.032 0.0256 -0.053q0.0208 -0.026 0.064 -0.042q0.0296 -0.008 0.0424 -0.009q0.0016 0 0.0104 0t0.0144 -0.001h0.016q0.0048 0.006 0.0048 0.018q0 0.013 -0.0024 0.016q-0.0016 0.003 -0.0128 0.003q-0.0448 0.003 -0.0744 0.032q-0.016 0.015 -0.0208 0.034q-0.004 0.013 -0.004 0.148v\").concat(offsetHeight / 2, \"q0 0.13 -0.0008 0.136q-0.004 0.039 -0.0272 0.067t-0.0576 0.041l-0.0112 0.005l0.0112 0.005q0.0336 0.013 0.0568 0.04t0.028 0.068q0.0008 0.006 0.0008 0.136v\").concat(offsetHeight / 2, \"q0 0.1355 0.004 0.1475q0.008 0.028 0.0352 0.046t0.06 0.02q0.0112 0 0.0128 0.004q0.0024 0.002 0.0024 0.014Z\");\n  }\n};\n\nfunction block(_ref) {\n  var child = _ref.child;\n  var content = renderInternal(child);\n  return {\n    type: 'span',\n    props: {\n      style: {\n        height: \"\".concat(content.height, \"em\")\n      }\n    },\n    aboveMiddle: content.aboveMiddle,\n    belowMiddle: content.belowMiddle,\n    children: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Parens, {\n      height: content.height\n    }), content.elements, /*#__PURE__*/React.createElement(Parens, {\n      height: content.height,\n      flip: true\n    }))\n  };\n}\n\nfunction func(node) {\n  // Use manual rendering to allow commas to be pushed between args\n  // without having to resort to manual alignment\n  var argParts = [];\n  node.args.forEach(function (arg, i) {\n    if (i > 0) {\n      argParts.push(simplePart(',', {\n        paddingRight: '0.4em'\n      }));\n    }\n\n    pushTree(arg, argParts);\n  }); // Render name as variable or placeholder\n\n  var nameRendering = renderInternal(node.type === 'function' ? {\n    type: 'variable',\n    name: node.name\n  } : {\n    type: 'operand-placeholder'\n  });\n  var argRendering = toRendering(argParts);\n  return {\n    type: 'span',\n    props: {\n      style: {\n        height: \"\".concat(Math.max(nameRendering.height, argRendering.height), \"em\")\n      }\n    },\n    aboveMiddle: Math.max(nameRendering.aboveMiddle, argRendering.aboveMiddle),\n    belowMiddle: Math.max(nameRendering.belowMiddle, argRendering.belowMiddle),\n    children: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        position: 'relative',\n        top: \"\".concat(argRendering.aboveMiddle - nameRendering.aboveMiddle, \"em\")\n      }\n    }, nameRendering.elements), /*#__PURE__*/React.createElement(Parens, {\n      height: argRendering.height\n    }), argRendering.elements, /*#__PURE__*/React.createElement(Parens, {\n      height: argRendering.height,\n      flip: true\n    }))\n  };\n}\n\nvar fontFactor = 0.9;\nvar separatorSize = 0.06;\nvar styles$1 = {\n  wrapper: {\n    display: 'inline-block',\n    verticalAlign: 'top'\n  },\n  part: {\n    fontSize: \"\".concat(fontFactor * 100, \"%\"),\n    display: 'block',\n    textAlign: 'center',\n    padding: '0 0.4em'\n  },\n  separator: {\n    display: 'block',\n    background: 'currentColor',\n    borderTop: \"\".concat(separatorSize, \"em solid currentColor\")\n  }\n};\n\nfunction fraction(_ref) {\n  var a = _ref.a,\n      b = _ref.b;\n  var top = renderInternal(a, true);\n  var bottom = renderInternal(b, true);\n  return {\n    type: 'span',\n    props: {\n      style: _objectSpread2({}, styles$1.wrapper)\n    },\n    aboveMiddle: top.height * fontFactor - separatorSize / 2,\n    belowMiddle: bottom.height * fontFactor + separatorSize * 3 / 2,\n    children: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n      style: _objectSpread2(_objectSpread2({}, styles$1.part), {}, {\n        height: \"\".concat(top.height, \"em\")\n      })\n    }, top.elements), /*#__PURE__*/React.createElement(\"span\", {\n      style: styles$1.separator\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: _objectSpread2(_objectSpread2({}, styles$1.part), {}, {\n        height: \"\".concat(bottom.height, \"em\")\n      })\n    }, bottom.elements))\n  };\n}\n\nvar fontFactor$1 = 0.7;\nvar exponentOffset = 0.8;\nvar styles$2 = {\n  exponent: {\n    fontSize: \"\".concat(fontFactor$1 * 100, \"%\"),\n    display: 'inline-block',\n    verticalAlign: 'top'\n  }\n};\n\nfunction power(_ref) {\n  var a = _ref.a,\n      b = _ref.b;\n  var base = renderInternal(a, false);\n  var exponent = renderInternal(b, true);\n  var baseOffset = exponent.height * fontFactor$1 - exponentOffset;\n  return {\n    type: 'span',\n    props: {\n      style: {\n        height: \"\".concat(base.height + baseOffset, \"em\")\n      }\n    },\n    aboveMiddle: base.height / 2 + baseOffset,\n    belowMiddle: base.height / 2,\n    children: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        position: 'relative',\n        top: \"\".concat(baseOffset, \"em\"),\n        height: \"\".concat(base.height, \"em\")\n      }\n    }, base.elements), /*#__PURE__*/React.createElement(\"span\", {\n      style: _objectSpread2(_objectSpread2({}, styles$2.exponent), {}, {\n        height: \"\".concat(exponent.height, \"em\")\n      })\n    }, exponent.elements))\n  };\n}\n\nvar padding = 0.2;\nvar cellPadding = 0.4;\nvar fontFactor$2 = 0.9;\nvar styles$3 = {\n  wrapper: {\n    padding: '0.1em 0'\n  },\n  table: {\n    display: 'inline-table',\n    verticalAlign: 'top',\n    borderCollapse: 'collapse',\n    fontSize: \"\".concat(fontFactor$2 * 100, \"%\"),\n    marginTop: '0.1em'\n  },\n  cell: {\n    padding: '0.2em 0.5em',\n    textAlign: 'center',\n    verticalAlign: 'top'\n  },\n  cellContent: {\n    width: '100%',\n    height: '100%'\n  }\n};\n\nfunction matrix(_ref) {\n  var values = _ref.values,\n      m = _ref.m;\n  var content = values.map(function (row) {\n    return row.map(function (value) {\n      return renderInternal(value);\n    });\n  });\n  var cellHeight = sumOf(content, function (row) {\n    return maxOf(row, function (_ref2) {\n      var height = _ref2.height;\n      return height;\n    });\n  });\n  var height = fontFactor$2 * (m * cellPadding + cellHeight);\n  return {\n    type: 'span',\n    props: {\n      style: styles$3.wrapper\n    },\n    aboveMiddle: (height + padding) / 2,\n    belowMiddle: (height + padding) / 2,\n    children: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Parens, {\n      height: height,\n      type: \"[]\"\n    }), /*#__PURE__*/React.createElement(\"table\", {\n      style: styles$3.table\n    }, /*#__PURE__*/React.createElement(\"tbody\", null, content.map(function (row, rowIdx) {\n      var rowHeight = maxOf(row, function (cell) {\n        return cell.height;\n      }) + cellPadding;\n      var aboveMiddle = maxOf(row, function (cell) {\n        return cell.aboveMiddle;\n      });\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        key: rowIdx,\n        style: {\n          height: \"\".concat(rowHeight, \"em\")\n        }\n      }, row.map(function (cell, cellIdx) {\n        return /*#__PURE__*/React.createElement(\"td\", {\n          key: cellIdx,\n          style: styles$3.cell\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            position: 'relative',\n            top: \"\".concat(aboveMiddle - cell.aboveMiddle, \"em\")\n          }\n        }, cell.elements));\n      }));\n    }))), /*#__PURE__*/React.createElement(Parens, {\n      height: height,\n      type: \"[]\",\n      flip: true\n    }))\n  };\n}\n\nfunction maxOf(array, get) {\n  return array.reduce(function (current, value) {\n    return Math.max(current, get(value));\n  }, 0);\n}\n\nfunction sumOf(array, get) {\n  return array.reduce(function (current, value) {\n    return current + get(value);\n  }, 0);\n}\n\nvar iconSize = 1.8;\nvar fontFactor$3 = 0.8;\nvar styles$4 = {\n  wrapper: {\n    display: 'inline-block'\n  },\n  block: {\n    display: 'inline-block',\n    verticalAlign: 'top',\n    textAlign: 'center'\n  },\n  icon: {\n    display: 'block',\n    lineHeight: 0.8,\n    fontSize: '2.25em',\n    padding: '0 0.1em',\n    top: '1px'\n  },\n  small: {\n    display: 'block',\n    fontSize: \"\".concat(fontFactor$3 * 100, \"%\")\n  }\n};\n\nfunction sum(_ref) {\n  var _ref$args = _slicedToArray(_ref.args, 4),\n      variable = _ref$args[0],\n      start = _ref$args[1],\n      end = _ref$args[2],\n      expression = _ref$args[3];\n\n  var top = renderInternal(end || {\n    type: 'operand-placeholder'\n  });\n  var bottom = renderInternal({\n    type: 'equals',\n    a: variable || {\n      type: 'operand-placeholder'\n    },\n    b: start || {\n      type: 'operand-placeholder'\n    }\n  });\n  var rendering = renderInternal(wrapParenthesis(expression || {\n    type: 'operand-placeholder'\n  }), false, {\n    type: 'span',\n    props: {\n      style: styles$4.block\n    },\n    aboveMiddle: iconSize / 2 + top.height * fontFactor$3,\n    belowMiddle: iconSize / 2 + bottom.height * fontFactor$3,\n    children: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n      style: _objectSpread2({\n        height: \"\".concat(top.height, \"em\")\n      }, styles$4.small)\n    }, top.elements), /*#__PURE__*/React.createElement(\"span\", {\n      style: styles$4.icon\n    }, \"\\u03A3\"), /*#__PURE__*/React.createElement(\"span\", {\n      style: _objectSpread2({\n        height: \"\".concat(bottom.height, \"em\")\n      }, styles$4.small)\n    }, bottom.elements))\n  });\n  return {\n    type: 'span',\n    props: {\n      style: styles$4.wrapper\n    },\n    aboveMiddle: rendering.aboveMiddle,\n    belowMiddle: rendering.belowMiddle,\n    children: rendering.elements\n  };\n}\n\nfunction wrapParenthesis(tree) {\n  if (canStandAlone(tree)) {\n    return tree;\n  } else {\n    return {\n      type: 'block',\n      child: tree\n    };\n  }\n}\n\nfunction canStandAlone(tree) {\n  return tree.type === 'variable' || tree.type === 'number' || tree.type === 'block' || tree.type === 'function' || tree.type === 'matrix' || tree.type === 'divide-fraction' || tree.type === 'power' || tree.type === 'operand-placeholder' || tree.type === 'function-placeholder' || (tree.type === 'negative' || tree.type === 'positive' || tree.type === 'positive-negative' || tree.type === 'operator-unary-placeholder') && canStandAlone(tree.value);\n}\n\nvar styles$5 = {\n  wrapper: {\n    display: 'inline-block',\n    verticalAlign: 'top',\n    padding: '0 0.3em'\n  },\n  line: {\n    position: 'absolute',\n    borderLeft: '0.08em solid currentColor',\n    top: '0.2em',\n    height: \"calc(100% - 0.4em)\"\n  }\n};\n\nfunction abs(_ref) {\n  var _ref$args = _slicedToArray(_ref.args, 1),\n      expression = _ref$args[0];\n\n  var content = renderInternal(expression || {\n    type: 'operand-placeholder'\n  });\n  return {\n    type: 'span',\n    props: {\n      style: _objectSpread2(_objectSpread2({}, styles$5.wrapper), {}, {\n        height: \"\".concat(content.height, \"em\")\n      })\n    },\n    aboveMiddle: content.aboveMiddle,\n    belowMiddle: content.belowMiddle,\n    children: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n      style: _objectSpread2(_objectSpread2({}, styles$5.line), {}, {\n        left: '0.1em'\n      })\n    }), content.elements, /*#__PURE__*/React.createElement(\"span\", {\n      style: _objectSpread2(_objectSpread2({}, styles$5.line), {}, {\n        right: '0.1em'\n      })\n    }))\n  };\n}\n\nfunction RootSymbol(_ref) {\n  var height = _ref.height,\n      style = _ref.style;\n  height = Math.max(height, 1.4);\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    width: \"0.8em\",\n    style: style,\n    viewBox: \"0 0 0.8 \".concat(height - 0.1)\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: buildPath(morphSvg(pathCommands, height))\n  }));\n}\n\nfunction morphSvg(commands, height) {\n  var offsetHeight = height - 1.4; // Factors determined by experiment\n  // Move top and inner elbow to keep the width of the long\n  // line at ~0.5em\n\n  var topOffsetFactor = 0.015 * Math.atan(offsetHeight * 1.25);\n  var elbowFactor = 0.08 * Math.atan(offsetHeight * 0.556);\n  return commands.map(function (_ref2, idx) {\n    var c = _ref2.c,\n        v = _ref2.v; // First point, anchor of top\n    // Move full offset\n\n    if (idx === 0) {\n      return {\n        c: c,\n        v: [v[0] - topOffsetFactor, v[1]]\n      }; // Second point, beizer\n      // Move to keep round top\n    } else if (idx === 1) {\n      return {\n        c: c,\n        v: [v[0] - topOffsetFactor * 0.75, v[1], v[2] - topOffsetFactor * 0.5, v[3]]\n      }; // Last point is inside elbow, should move up along short line\n    } else if (idx === 18) {\n      return {\n        c: c,\n        v: [// Move along existing line\n        v[0] - elbowFactor * 0.416, v[1] - elbowFactor * 0.909 + offsetHeight]\n      }; // Move other points down\n    } else if (idx > 3) {\n      return {\n        c: c,\n        v: v.map(function (value, valueIdx) {\n          return valueIdx % 2 === 0 ? value : value + offsetHeight;\n        })\n      };\n    }\n\n    return {\n      c: c,\n      v: v\n    };\n  });\n} // Build path-string from commands\n\n\nfunction buildPath(commands) {\n  return commands.map(function (_ref3) {\n    var c = _ref3.c,\n        v = _ref3.v;\n    return c + v.join(' ');\n  }).join('');\n} // Commands used to draw a square root sign\n\n\nvar pathCommands = [{\n  c: 'M',\n  v: [0.7767, 0.014]\n}, {\n  c: 'Q',\n  v: [0.7847, 0, 0.7967, 0]\n}, {\n  c: 'L',\n  v: [0.8, 0]\n}, {\n  c: 'L',\n  v: [0.8, 0.08]\n}, {\n  c: 'L',\n  v: [0.351, 0.993]\n}, {\n  c: 'Q',\n  v: [0.347, 1, 0.332, 1]\n}, {\n  c: 'Q',\n  v: [0.323, 1, 0.32, 0.997]\n}, {\n  c: 'L',\n  v: [0.126, 0.575]\n}, {\n  c: 'L',\n  v: [0.11, 0.586]\n}, {\n  c: 'Q',\n  v: [0.095, 0.598, 0.079, 0.61]\n}, {\n  c: 'T',\n  v: [0.061, 0.622]\n}, {\n  c: 'Q',\n  v: [0.057, 0.622, 0.048, 0.614]\n}, {\n  c: 'T',\n  v: [0.038, 0.6]\n}, {\n  c: 'Q',\n  v: [0.038, 0.597, 0.039, 0.596]\n}, {\n  c: 'Q',\n  v: [0.041, 0.592, 0.106, 0.542]\n}, {\n  c: 'T',\n  v: [0.173, 0.491]\n}, {\n  c: 'Q',\n  v: [0.175, 0.489, 0.178, 0.489]\n}, {\n  c: 'Q',\n  v: [0.185, 0.489, 0.19, 0.499]\n}, {\n  c: 'L',\n  v: [0.3578, 0.8658]\n}, {\n  c: 'Z',\n  v: []\n}];\nvar padding$1 = 0.1;\nvar styles$6 = {\n  wrapper: {\n    position: 'relative',\n    display: 'inline-block',\n    marginTop: '0.1em'\n  },\n  symbol: {\n    verticalAlign: 'top'\n  },\n  line: {\n    position: 'absolute',\n    width: 'calc(100% - 0.7em)',\n    borderTop: '0.08em solid currentColor',\n    top: 0,\n    left: '0.8em'\n  }\n};\n\nfunction sqrt(_ref) {\n  var _ref$args = _slicedToArray(_ref.args, 1),\n      expression = _ref$args[0];\n\n  var content = renderInternal(expression || {\n    type: 'operand-placeholder'\n  });\n  return {\n    type: 'span',\n    props: {\n      style: _objectSpread2(_objectSpread2({}, styles$6.wrapper), {}, {\n        height: \"\".concat(content.height + padding$1, \"em\")\n      })\n    },\n    aboveMiddle: content.aboveMiddle + padding$1,\n    belowMiddle: content.belowMiddle,\n    children: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(RootSymbol, {\n      style: styles$6.symbol,\n      height: content.height + padding$1\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: styles$6.line\n    }), content.elements)\n  };\n}\n\nvar rootIndexFactor = 0.7;\nvar rootIndexOffset = 0.8;\nvar styles$7 = {\n  wrapper: {\n    display: 'inline-block',\n    position: 'relative'\n  },\n  indexOuter: {\n    display: 'inline-block'\n  },\n  indexInner: {\n    fontSize: \"\".concat(rootIndexFactor * 100, \"%\"),\n    verticalAlign: 'top'\n  }\n};\n\nfunction root(_ref) {\n  var _ref$args = _slicedToArray(_ref.args, 2),\n      rootIndex = _ref$args[0],\n      expression = _ref$args[1];\n\n  var rootIndexContent = renderInternal(rootIndex || {\n    type: 'operand-placeholder'\n  }); // Pretend this is a sqrt to avoid repeat of logic\n\n  var sqrtContent = sqrt({\n    type: 'function',\n    name: 'sqrt',\n    args: [expression]\n  });\n  var bottom = sqrtContent.belowMiddle - rootIndexOffset;\n  var offset = 1 - Math.atan(sqrtContent.aboveMiddle + sqrtContent.belowMiddle) * 0.6;\n  var rendering = toRendering([{\n    type: 'span',\n    props: {\n      style: _objectSpread2(_objectSpread2({}, styles$7.indexOuter), {}, {\n        height: \"\".concat(rootIndexContent.height * rootIndexFactor, \"em\"),\n        marginRight: \"\".concat(-offset, \"em\"),\n        minWidth: \"\".concat(offset, \"em\")\n      })\n    },\n    aboveMiddle: rootIndexContent.height * rootIndexFactor - bottom,\n    belowMiddle: bottom,\n    children: /*#__PURE__*/React.createElement(\"span\", {\n      style: styles$7.indexInner\n    }, rootIndexContent.elements)\n  }, sqrtContent]);\n  return {\n    type: 'span',\n    props: {\n      style: styles$7.wrapper\n    },\n    aboveMiddle: rendering.aboveMiddle,\n    belowMiddle: rendering.belowMiddle,\n    children: rendering.elements\n  };\n}\n\nvar defaultErrorHandler = function defaultErrorHandler(node) {\n  return \"Error: \".concat(node.errorType);\n};\n\nvar render = function render(node) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$errorHandler = _ref.errorHandler,\n      errorHandler = _ref$errorHandler === void 0 ? {} : _ref$errorHandler,\n      className = _ref.className,\n      style = _ref.style;\n\n  var baseProps = {\n    className: className,\n    style: _objectSpread2(_objectSpread2({}, style), {}, {\n      display: 'inline-block',\n      lineHeight: 1.4\n    })\n  };\n\n  if (node.type === 'parser-error') {\n    return /*#__PURE__*/React.createElement(\"span\", baseProps, /*#__PURE__*/React.createElement(\"div\", null, node.equation.substring(0, node.start), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: 'red'\n      }\n    }, node.equation.substring(node.start, node.end + 1)), node.equation.substring(node.end + 1)), /*#__PURE__*/React.createElement(\"div\", null, (errorHandler[node.errorType] || defaultErrorHandler)(node)));\n  }\n\n  if (node.type === 'resolve-error' && node.node) {\n    // TODO: pretty error handling\n    var _renderInternal = renderInternal(node.node),\n        _elements = _renderInternal.elements,\n        _height = _renderInternal.height;\n\n    return /*#__PURE__*/React.createElement(\"span\", baseProps, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        height: \"\".concat(_height, \"em\"),\n        display: 'inline-block'\n      }\n    }, _elements), /*#__PURE__*/React.createElement(\"br\", null), (errorHandler[node.errorType] || defaultErrorHandler)(node));\n  }\n\n  if (node.type === 'resolve-error') {\n    return /*#__PURE__*/React.createElement(\"span\", baseProps, (errorHandler[node.errorType] || defaultErrorHandler)(node));\n  }\n\n  var _renderInternal2 = renderInternal(node),\n      elements = _renderInternal2.elements,\n      height = _renderInternal2.height;\n\n  return /*#__PURE__*/React.createElement(\"span\", _extends({}, baseProps, {\n    style: _objectSpread2({\n      height: \"\".concat(height, \"em\")\n    }, baseProps.style)\n  }), elements);\n};\n\nfunction renderInternal(tree) {\n  var skipParentheses = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var parts;\n\n  for (var _len = arguments.length, initial = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    initial[_key - 2] = arguments[_key];\n  }\n\n  if (skipParentheses && tree.type === 'block') {\n    parts = pushTree(tree.child, initial);\n  } else {\n    parts = pushTree(tree, initial);\n  }\n\n  return toRendering(parts);\n}\n\nfunction toRendering(parts) {\n  var aboveMiddle = parts.reduce(function (current, part) {\n    return Math.max(current, part.aboveMiddle);\n  }, 0);\n  var belowMiddle = parts.reduce(function (current, part) {\n    return Math.max(current, part.belowMiddle);\n  }, 0);\n\n  var _iterator = _createForOfIteratorHelper(parts),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var part = _step.value;\n      part.props.style = _objectSpread2(_objectSpread2({}, part.props.style), {}, {\n        top: part.aboveMiddle < aboveMiddle ? \"\".concat(aboveMiddle - part.aboveMiddle, \"em\") : null,\n        position: 'relative'\n      });\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return {\n    aboveMiddle: aboveMiddle,\n    belowMiddle: belowMiddle,\n    height: aboveMiddle + belowMiddle,\n    elements: parts.map(function (part, idx) {\n      return /*#__PURE__*/React.createElement(part.type, _objectSpread2({\n        key: idx\n      }, part.props), part.children);\n    })\n  };\n} // Lookups for operator symbols with optional styling\n\n\nvar binaryOperatorLookup = {\n  'plus': ['+'],\n  // Unicode MINUS\n  'minus': ['−'],\n  // Unicode MINUS\n  'plus-minus': ['±'],\n  'multiply-implicit': ['', {\n    padding: '0 0.1em'\n  }],\n  // Unicode DOT OPERATOR\n  'multiply-dot': ['⋅', {\n    padding: '0 0.15em'\n  }],\n  // Unicode MULTIPLICATION SIGN\n  'multiply-cross': ['×'],\n  // Unicode DIVISION SIGN\n  'divide-inline': ['÷'],\n  'equals': ['='],\n  'less-than': ['<'],\n  'less-than-equals': ['≤'],\n  'greater-than': ['>'],\n  'greater-than-equals': ['≥'],\n  'approximates': ['≈'],\n  'operator-placeholder': ['?']\n};\nvar unaryOperatorLookup = {\n  'positive': ['+'],\n  // Unicode MINUS\n  'negative': ['−'],\n  'positive-negative': ['±'],\n  'operator-unary-placeholder': ['?']\n};\n\nfunction pushTree(node, current) {\n  switch (node.type) {\n    // Operands\n    case 'number':\n      current.push(simplePart(node.value));\n      break;\n\n    case 'variable':\n      current.push(variable(node));\n      break;\n\n    case 'operand-placeholder':\n      current.push(simplePart('_'));\n      break;\n    // Unary operators\n\n    case 'positive':\n    case 'negative':\n    case 'positive-negative':\n    case 'operator-unary-placeholder':\n      {\n        var _unaryOperatorLookup$ = _slicedToArray(unaryOperatorLookup[node.type], 2),\n            symbol = _unaryOperatorLookup$[0],\n            _unaryOperatorLookup$2 = _unaryOperatorLookup$[1],\n            style = _unaryOperatorLookup$2 === void 0 ? {\n          padding: '0 0.1em'\n        } : _unaryOperatorLookup$2;\n\n        current.push(simplePart(symbol, style));\n        pushTree(node.value, current);\n        break;\n      }\n\n    case 'plus':\n    case 'minus':\n    case 'plus-minus':\n    case 'multiply-implicit':\n    case 'multiply-dot':\n    case 'multiply-cross':\n    case 'divide-inline':\n    case 'equals':\n    case 'less-than':\n    case 'less-than-equals':\n    case 'greater-than':\n    case 'greater-than-equals':\n    case 'approximates':\n    case 'operator-placeholder':\n      {\n        var _binaryOperatorLookup = _slicedToArray(binaryOperatorLookup[node.type], 2),\n            _symbol = _binaryOperatorLookup[0],\n            _binaryOperatorLookup2 = _binaryOperatorLookup[1],\n            _style = _binaryOperatorLookup2 === void 0 ? {\n          padding: '0 0.3em'\n        } : _binaryOperatorLookup2;\n\n        pushTree(node.a, current);\n        current.push(simplePart(_symbol, _style));\n        pushTree(node.b, current);\n        break;\n      }\n\n    case 'divide-fraction':\n      current.push(fraction(node));\n      break;\n\n    case 'power':\n      current.push(power(node));\n      break;\n\n    case 'block':\n      current.push(block(node));\n      break;\n\n    case 'function':\n      pushFunction(node, current);\n      break;\n\n    case 'function-placeholder':\n      current.push(func(node));\n      break;\n\n    case 'matrix':\n      current.push(matrix(node));\n      break;\n\n    default:\n      throwUnknownType(node, function (type) {\n        return \"Equation render: cannot resolve type \\\"\".concat(type, \"\\\"\");\n      });\n  }\n\n  return current;\n}\n\nfunction simplePart(value, style) {\n  return {\n    type: 'span',\n    props: {\n      style: style\n    },\n    children: value,\n    aboveMiddle: 0.7,\n    belowMiddle: 0.7\n  };\n}\n\nfunction pushFunction(tree, current) {\n  switch (tree.name) {\n    case 'sum':\n      current.push(sum(tree));\n      break;\n\n    case 'abs':\n      current.push(abs(tree));\n      break;\n\n    case 'sqrt':\n      current.push(sqrt(tree));\n      break;\n\n    case 'root':\n      current.push(root(tree));\n      break;\n\n    default:\n      current.push(func(tree));\n      break;\n  }\n}\n\nvar context = /*#__PURE__*/createContext({});\n\nvar EquationOptions = function EquationOptions(_ref) {\n  var children = _ref.children,\n      options = _objectWithoutProperties(_ref, [\"children\"]);\n\n  return /*#__PURE__*/React.createElement(context.Provider, {\n    value: options\n  }, children);\n};\n\nvar useEquationOptions = function useEquationOptions() {\n  return useContext(context);\n};\n\nvar Equation = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var value = _ref.value,\n      errorHandler = _ref.errorHandler,\n      className = _ref.className,\n      style = _ref.style;\n\n  var _useEquationOptions = useEquationOptions(),\n      errorHandlerGlobal = _useEquationOptions.errorHandler,\n      classNameGlobal = _useEquationOptions.className,\n      styleGlobal = _useEquationOptions.style;\n\n  var equation = parse(value);\n  useImperativeHandle(ref, function () {\n    return {\n      valid: equation.type !== 'parser-error',\n      equation: equation\n    };\n  });\n  return render(equation, {\n    errorHandler: _objectSpread2(_objectSpread2({}, errorHandlerGlobal), errorHandler),\n    className: classnames(classNameGlobal, className),\n    style: _objectSpread2(_objectSpread2({}, styleGlobal), style)\n  });\n}));\n\nvar unionArrays = function unionArrays(a, b) {\n  if (!a) {\n    return b;\n  } else if (!b) {\n    return a;\n  } else {\n    return [].concat(_toConsumableArray(a), _toConsumableArray(b));\n  }\n};\n\nvar EquationEvaluate = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var value = _ref.value,\n      errorHandler = _ref.errorHandler,\n      className = _ref.className,\n      style = _ref.style,\n      unit = _ref.unit,\n      localVariables = _ref.variables,\n      localFunctions = _ref.functions,\n      localSimplifiableUnits = _ref.simplifiableUnits,\n      localDecimals = _ref.decimals;\n\n  var _useEquationOptions = useEquationOptions(),\n      errorHandlerGlobal = _useEquationOptions.errorHandler,\n      classNameGlobal = _useEquationOptions.className,\n      styleGlobal = _useEquationOptions.style,\n      globalVariables = _useEquationOptions.variables,\n      globalFunctions = _useEquationOptions.functions,\n      globalSimplifiableUnits = _useEquationOptions.simplifiableUnits,\n      globalDecimals = _useEquationOptions.decimals;\n\n  var formatOptions = {\n    variables: _objectSpread2(_objectSpread2({}, globalVariables), localVariables),\n    functions: _objectSpread2(_objectSpread2({}, globalFunctions), localFunctions),\n    simplifiableUnits: unionArrays(localSimplifiableUnits, globalSimplifiableUnits),\n    decimals: localDecimals || globalDecimals\n  };\n  var equation = parse(value);\n  var unitEquation = unit ? parse(unit) : null;\n  var result = resolve(equation, formatOptions);\n  var unitResult = unitEquation ? resolve(unitEquation, formatOptions) : null;\n  var resultEquation = formatPreresolved(equation, unitEquation, result, unitResult, formatOptions);\n  useImperativeHandle(ref, function () {\n    return {\n      valid: resultEquation.type !== 'resolve-error' && resultEquation.type !== 'parser-error',\n      equation: equation,\n      unitEquation: unitEquation,\n      result: result,\n      unitResult: unitResult,\n      resultEquation: resultEquation\n    };\n  });\n  return render(resultEquation, {\n    errorHandler: _objectSpread2(_objectSpread2({}, errorHandlerGlobal), errorHandler),\n    className: classnames(classNameGlobal, className),\n    style: _objectSpread2(_objectSpread2({}, styleGlobal), style)\n  });\n}));\nvar EquationPreparsed = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var value = _ref.value,\n      errorHandler = _ref.errorHandler,\n      className = _ref.className,\n      style = _ref.style;\n\n  var _useEquationOptions = useEquationOptions(),\n      errorHandlerGlobal = _useEquationOptions.errorHandler,\n      classNameGlobal = _useEquationOptions.className,\n      styleGlobal = _useEquationOptions.style;\n\n  useImperativeHandle(ref, function () {\n    return {};\n  });\n  return render(value, {\n    errorHandler: _objectSpread2(_objectSpread2({}, errorHandlerGlobal), errorHandler),\n    className: classnames(classNameGlobal, className),\n    style: _objectSpread2(_objectSpread2({}, styleGlobal), style)\n  });\n}));\n\nvar unionArrays$1 = function unionArrays(a, b) {\n  if (!a) {\n    return b;\n  } else if (!b) {\n    return a;\n  } else {\n    return [].concat(_toConsumableArray(a), _toConsumableArray(b));\n  }\n};\n\nvar EquationEvaluatePreparsed = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var value = _ref.value,\n      errorHandler = _ref.errorHandler,\n      className = _ref.className,\n      style = _ref.style,\n      unit = _ref.unit,\n      localVariables = _ref.variables,\n      localFunctions = _ref.functions,\n      localSimplifiableUnits = _ref.simplifiableUnits,\n      localDecimals = _ref.decimals;\n\n  var _useEquationOptions = useEquationOptions(),\n      errorHandlerGlobal = _useEquationOptions.errorHandler,\n      classNameGlobal = _useEquationOptions.className,\n      styleGlobal = _useEquationOptions.style,\n      globalVariables = _useEquationOptions.variables,\n      globalFunctions = _useEquationOptions.functions,\n      globalSimplifiableUnits = _useEquationOptions.simplifiableUnits,\n      globalDecimals = _useEquationOptions.decimals;\n\n  var formatOptions = {\n    variables: _objectSpread2(_objectSpread2({}, globalVariables), localVariables),\n    functions: _objectSpread2(_objectSpread2({}, globalFunctions), localFunctions),\n    simplifiableUnits: unionArrays$1(localSimplifiableUnits, globalSimplifiableUnits),\n    decimals: localDecimals || globalDecimals\n  };\n  var result = resolve(value, formatOptions);\n  var unitResult = unit ? resolve(unit, formatOptions) : null;\n  var resultEquation = formatPreresolved(value, unit, result, unitResult, formatOptions);\n  useImperativeHandle(ref, function () {\n    return {\n      valid: resultEquation.type !== 'resolve-error' && resultEquation.type !== 'parser-error',\n      result: result,\n      unitResult: unitResult,\n      resultEquation: resultEquation\n    };\n  });\n  return render(resultEquation, {\n    errorHandler: _objectSpread2(_objectSpread2({}, errorHandlerGlobal), errorHandler),\n    className: classnames(classNameGlobal, className),\n    style: _objectSpread2(_objectSpread2({}, styleGlobal), style)\n  });\n}));\nvar defaultErrorHandler$1 = {\n  // Parser errors\n  numberWhitespace: function numberWhitespace() {\n    return 'Cannot have spaces inside numbers';\n  },\n  invalidNumber: function invalidNumber() {\n    return 'Invalid number';\n  },\n  adjecentOperator: function adjecentOperator() {\n    return 'Two operators cannot be adjecent';\n  },\n  invalidChar: function invalidChar(_ref) {\n    var character = _ref.character;\n    return \"Invalid character '\".concat(character, \"'\");\n  },\n  invalidUnary: function invalidUnary(_ref2) {\n    var symbol = _ref2.symbol;\n    return \"'\".concat(symbol, \"' cannot be a unary operator\");\n  },\n  multipleExpressions: function multipleExpressions() {\n    return 'An unexpected parsing error occured';\n  },\n  matrixMixedDimension: function matrixMixedDimension(_ref3) {\n    var lengthExpected = _ref3.lengthExpected,\n        lengthReceived = _ref3.lengthReceived;\n    return \"Matrix-row has length \".concat(lengthReceived, \", but should be \").concat(lengthExpected);\n  },\n  matrixEmpty: function matrixEmpty() {\n    return 'Matrix must contain at least one expression';\n  },\n  vectorEmpty: function vectorEmpty() {\n    return 'Vector must contain at least one expression';\n  },\n  expectedEnd: function expectedEnd() {\n    return 'Expected end of equation';\n  },\n  expectedSquareBracket: function expectedSquareBracket() {\n    return 'Missing closing square bracket';\n  },\n  expectedCloseParens: function expectedCloseParens() {\n    return 'Missing closing parenthesis';\n  },\n  operatorLast: function operatorLast() {\n    return 'Equation cannot end on an operator';\n  },\n  // Resolver errors\n  functionUnknown: function functionUnknown(_ref4) {\n    var name = _ref4.name;\n    return \"Unknown function \".concat(name);\n  },\n  functionArgLength: function functionArgLength(_ref5) {\n    var name = _ref5.name,\n        minArgs = _ref5.minArgs,\n        maxArgs = _ref5.maxArgs;\n    return minArgs === maxArgs ? \"\".concat(name, \" must have \").concat(minArgs, \" arguments\") : \"\".concat(name, \" must have \").concat(minArgs, \"-\").concat(maxArgs, \" arguments\");\n  },\n  functionNumberOnly: function functionNumberOnly(_ref6) {\n    var name = _ref6.name;\n    return \"Arguments of \".concat(name, \" must be unitless numbers\");\n  },\n  functionSqrt1Positive: function functionSqrt1Positive(_ref7) {\n    var name = _ref7.name;\n    return \"First argument of \".concat(name, \" must be positive\");\n  },\n  functionRoot1PositiveInteger: function functionRoot1PositiveInteger(_ref8) {\n    var name = _ref8.name;\n    return \"First argument of \".concat(name, \" must be a positive integer\");\n  },\n  functionRoot2Positive: function functionRoot2Positive(_ref9) {\n    var name = _ref9.name;\n    return \"Second argument of \".concat(name, \" must be positive\");\n  },\n  functionSum1Variable: function functionSum1Variable(_ref10) {\n    var name = _ref10.name,\n        variableType = _ref10.variableType;\n    return \"First argument of \".concat(name, \" must be a variable, was \").concat(variableType);\n  },\n  functionSum2Integer: function functionSum2Integer(_ref11) {\n    var name = _ref11.name;\n    return \"Second argument of \".concat(name, \" must be an integer\");\n  },\n  functionSum3Integer: function functionSum3Integer(_ref12) {\n    var name = _ref12.name;\n    return \"Third argument of \".concat(name, \" must be an integer\");\n  },\n  variableUnknown: function variableUnknown(_ref13) {\n    var name = _ref13.name;\n    return \"Unknown variable \".concat(name);\n  },\n  plusDifferentUnits: function plusDifferentUnits() {\n    return \"Cannot add numbers with different units\";\n  },\n  plusMatrixMismatch: function plusMatrixMismatch(_ref14) {\n    var aDimensions = _ref14.aDimensions,\n        bDimensions = _ref14.bDimensions;\n    return \"Cannot add matrices of dimensions \".concat(aDimensions, \" and \").concat(bDimensions);\n  },\n  plusminusUnhandled: function plusminusUnhandled() {\n    return \"Plus-minus operator is currently not supported\";\n  },\n  scalarProductUnbalanced: function scalarProductUnbalanced(_ref15) {\n    var aLength = _ref15.aLength,\n        bLength = _ref15.bLength;\n    return \"Cannot calculate scalar (dot) product of vectors of size \".concat(aLength, \" and \").concat(bLength);\n  },\n  vectorProduct3VectorOnly: function vectorProduct3VectorOnly() {\n    return \"Vector (cross) product requires 2 3-vectors\";\n  },\n  matrixProductMatrixMismatch: function matrixProductMatrixMismatch(_ref16) {\n    var aDimensions = _ref16.aDimensions,\n        bDimensions = _ref16.bDimensions;\n    return \"Cannot multiply matrices of dimensions \".concat(aDimensions, \" and \").concat(bDimensions);\n  },\n  multiplyImplicitNoVectors: function multiplyImplicitNoVectors() {\n    return \"Cannot multiply vectors without symbol, use either dot or cross\";\n  },\n  divideNotZero: function divideNotZero() {\n    return \"Cannot divide by zero\";\n  },\n  divideMatrixMatrix: function divideMatrixMatrix() {\n    return \"Cannot divide matrices with each other\";\n  },\n  powerUnitlessNumberExponent: function powerUnitlessNumberExponent() {\n    return \"Exponent must be a unitless number\";\n  },\n  operatorInvalidArguments: function operatorInvalidArguments(_ref17) {\n    var operator = _ref17.operator,\n        a = _ref17.a,\n        b = _ref17.b;\n    return \"Operator '\".concat(operator, \"' not defined for \").concat(a, \" and \").concat(b);\n  },\n  noComparison: function noComparison() {\n    return \"Cannot evaluate a comparison\";\n  },\n  matrixDifferentUnits: function matrixDifferentUnits() {\n    return \"All matrix-cells must have the same unit\";\n  },\n  matrixNoNesting: function matrixNoNesting() {\n    return \"Cannot nest matrices\";\n  },\n  invalidEquation: function invalidEquation() {\n    return \"Cannot resolve an invalid equation\";\n  },\n  placeholder: function placeholder() {\n    return \"Cannot evaluate a placeholder\";\n  },\n  invalidUnit: function invalidUnit() {\n    return \"Must be a valid unit\";\n  }\n};\nexport { Equation, EquationEvaluate, EquationEvaluatePreparsed, EquationOptions, EquationPreparsed, defaultErrorHandler$1 as defaultErrorHandler, render, useEquationOptions };","import React, { useState } from 'react'\r\nimport { Equation as EquationRenderer} from 'react-equation'\r\nimport nerdamer, { setVar } from 'nerdamer'\r\nimport 'nerdamer/all'\r\n//import MathJax from 'react-mathjax';\r\n\r\n//equation should be a string, knowns should be an object with keys of the var name and values of the var value\r\nconst Equation = ({equation, knowns}) => {\r\n    const [knownVars, setKnownVars] = useState({...knowns})\r\n    const [error, setError] = useState(null)\r\n    const [varToSolveFor, setVarToSolveFor] = useState(null)\r\n\r\n    // let regexForVariables = /[a-zA-Z+α+ω]+/g;\r\n    let regexForVariables = /[a-zA-Zα-ωΑ-Ω]+/g;\r\n    let regexMatches = [...equation.matchAll(regexForVariables)]\r\n    let variables = []\r\n\r\n\r\n    //get all the variables from the equation and put them in the variables array\r\n    regexMatches.forEach(match => { \r\n        match.forEach(m => {\r\n            for (let i = 0; i < m.length; i++) {\r\n                let variable = m.charAt(i)\r\n                if (!variables.includes(variable))\r\n                variables.push(variable)\r\n            }\r\n        })\r\n    })\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        let numUnknowns = variables.length\r\n        let newKnowns = {}\r\n        let variablesWeDontKnow = [...variables]\r\n        for (let i = 0; i < variables.length; i++) {\r\n            if (event.target[variables[i]] && event.target[variables[i]].value !== '') {\r\n                newKnowns[variables[i]] = event.target[variables[i]].value\r\n                variablesWeDontKnow.splice(variablesWeDontKnow.indexOf(variables[i]), 1) //should leave us with only one at the end\r\n                numUnknowns--\r\n                console.log(`we have ${variables[i]}`)\r\n            }\r\n        }\r\n\r\n\r\n        if (numUnknowns < 1) {\r\n            console.log('too many vars')\r\n            setError(\"You need to leave one one variable blank to solve for it\")\r\n            setVarToSolveFor(null)\r\n        } else if (numUnknowns > 1) {\r\n            console.log('too few vars')\r\n            setError(\"You need to fill in all but one of the variables\")\r\n            setVarToSolveFor(null)\r\n        } else {\r\n            console.log( typeof variablesWeDontKnow[0])\r\n            setError(null)\r\n            setVarToSolveFor(variablesWeDontKnow[0])\r\n            setKnownVars({...newKnowns})\r\n            console.log(newKnowns)\r\n        }\r\n\r\n\r\n    }\r\n    \r\n    return (\r\n        <div className='equationContainer'>\r\n            <h2>\r\n                <EquationRenderer value={equation}/>\r\n            </h2>\r\n            {varToSolveFor !== null && (\r\n                <p>Solution: {varToSolveFor} = {nerdamer(equation, knownVars).solveFor(varToSolveFor).toString()}</p>\r\n            )}\r\n            <form className='equationInputs' onSubmit={handleSubmit}>\r\n                {error != null && (\r\n                    <p style={{color: 'red'}}>{error}</p>\r\n                )}\r\n                {variables.map(variable => (\r\n                    <div style={{textAlign: 'center', paddingBottom: 20, fontWeight: \"500\"}}>\r\n                        <label for={variable}>{variable}</label> <br/>\r\n                        <input type='text' id={variable} />\r\n                    </div>\r\n                ))}\r\n                <input type=\"submit\" value=\"Submit\" />\r\n            </form>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Equation","import React from 'react'\r\nimport { Link } from 'gatsby'\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <div className='navbar'>\r\n            <Link to=\"/\">Home</Link>\r\n            <Link to=\"/angular\">Angular Stuff</Link>\r\n            <Link to=\"/energy\">Energy</Link>\r\n            <Link to=\"/kinematics\">Kinematics</Link>\r\n            <Link to=\"/momentum\">Momentum</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","includes","key","call","join","module","exports","default","nerdamer","core","getCore","_","PARSER","N","groups","P","S","EX","FN","PL","CP","CB","keys","Utils","even","variables","format","round","Frac","isInt","Symbol","CONST_HASH","Settings","math","importFunctions","evaluate","Polynomial","symbol","variable","order","isSymbol","this","parse","isNaN","undefined","exceptions","InvalidVariableNameError","coeffs","fill","Factors","factors","MVTerm","coeff","terms","map","sum","image","fromArray","arr","p","fit","c1","c2","n","base","t","Math","pow","b","q","c","sign","floor","abs","isPoly","NerdamerTypeError","text","power","absEquals","expand","group","multiplier","toDecimal","x","symbols","sub","Number","l","trim","equalsZero","equals","pop","modP","j","subtract","add","d","mod","w","divide","up_one","next","poly","max","a","dividend","arrayClone","divisor","mp","quotient","multiply","p1","l1","l2","x1","k","x2","e","isZero","clone","deg","lc","monic","gcd","Math2","QGCD","diff","new_array","integrate","gcf","toPolynomial","ca","indexOf","fnz","parr","quad","incl_img","roots","Error","dsc","sqrt","squareFree","output","equalsNumber","y","z","toSymbol","end","str","plus","String","with_order","error","s","distributeMultiplier","isComposite","isConstant","isImaginary","m","each","imaginary","tBase","collectSymbols","g","nterm","sym","value","updateCount","altVar","sameVars","groupTerms","f","egrouped","grouped","el","decompose_fn","collectFactors","getNumberSymbolics","fo","firstObject","symfunction","PARENTHESIS","obj","negate","preAdd","pFactor","is_constant","v","factored","values","sort","factor","fname","unwrapPARENS","merge","o","isLinear","args","count","clean","h","lessThan","getVars","vars","term","getRevMap","rev_map","len","mapped","generateImage","getImg","mvterm","new_mvterm","toMapObj","filledArray","clss","arrSum","haveIntersection","some","subFunctions","subbed","previousGroup","val","tvar","inBrackets","getFunctionsSubs","subs","__","Algebra","version","proots","decp","known_roots","get_roots","rarr","powers","calcroots","concat","unshift","lowest_pow","arrayMin","lowest_symbol","toUnitMultiplier","minpower","arrayMax","last_power","slice","ValueLimitExceededError","zeroi","degreePar","Degree","zeror","QuadSD_ak1","NN","u","iPar","calcSC_ak1","DBL_EPSILON","K","qk","sdPar","dumFlag","a3","a1","a7","nextK_ak1","tFlag","qp","temp","newest_ak1","a4","a5","b1","b2","c3","c4","Quad_ak1","sr","si","lr","li","QuadIT_ak1","uu","vv","calcPar","ee","omp","relstp","ui","vi","zm","qPar","triedFlag","NZ","szr","szi","lzr","lzi","RealIT_ak1","kv","ms","pv","nm1","Fxshfr_ak1","MDP1","L2","betas","betav","oss","ots","otv","ovv","ss","ts","tss","tv","tvv","fflag","spass","stry","vpass","vtry","svk","iFlag","degPar","bnd","df","dx","ff","moduli_max","moduli_min","sc","xm","aa","bb","cc","xxx","jj","NM1","zerok","RADFAC","LB2","LN2","pt","Fxshfr_Par","LO","MIN_VALUE","cosr","cos","sinr","sin","xx","yy","MAX_VALUE","log","exp","rpSolve","img","real","num","replace","nroots","Vector","froot","guess","xn","build","Calculus","fn","Function","done","safety","r","newtonraph","sumProd","invert","wrt","_coeffs","contains","polyPowers","for_variable","arrayUnique","Factor","split","mix","include_negatives","ll","common","zeroes","exit","tp","allSame","n_terms","n_zeroes","div","_symbol","retval","_factor","create","_factored","quadFactor","degree","cf","root","filter","root1","root2","cubeFactor","sign_a","sign_b","isCube","_ref","_ref2","m_root_a","getNth","m_root_b","isSimple","greaterThan","untouched","den_array","num_array","den","dfact","nfact","Simplify","strip","getDenom","getNum","unstrip","toLinear","IMAGINARY","multiVar","all_S","all_unit","coeff_factors","coeffFactor","power_factors","powerFactor","mfactor","t_factors","trialAndError","tf_symbol","t_factor","addPower","reduce","nn","result","sqfr","allNumeric","LT","updateHash","factor_array","cnst","cfactors","ifactor","search","forEach","check","candidate","ltfactors","isubbed","nfactors","cp","ceil","lc_is_neg","cnst_is_neg","factor_found","isPrime","mSqfrFactor","reverse","can_divide","is_factor","sqdiff","remove_square","block","separated","separate","obj_array","constants","powSimp","factors2","unwrapSQRT","sorted","maxes","new_factor","divided","has_fractions","neg_numeric_factor","rem","allLinear","set","status","sg","elements","arguments2Array","appeared","splice","every","aggregate","gcd_","lcm","gcd_m","GCD","gcd_v","gcd_p","vars_a","vars_b","T","multipliers","denom","numer","prev","curr","denom_args","input","size","mask","results","total","isVariableSymbol","symbol1","symbol2","remainder","fail","symbol1_has_func","hasFunc","symbol2_has_func","parse_funcs","quot","reconvert","get_unique_max","any","idx","t_map","init_sort","is_larger","s1","s2","det","get_det","lookat","umax","is_equal","max1","max2","idx1","idx2","item1","item2","d1","d2","cterm","lead_var","sf","blv","alv","checked","tt","try_better_lead_var","fdt","fnt","nd","dividend_larger","InfiniteLoopError","shift","neg","cur","remove","line","v1","v2","convertToVector","isVector","dy","PartFrac","createTemplate","denom_factors","f_array","factors_vec","degrees","efactor","partfrac","as_array","ofactors","nterms","dterms","M","ks","template","tfactors","Matrix","fillHoles","transpose","partials","denominators","e2","sd","depth","distributeExponent","sqComplete","raw","br","sqrt_a","stop","msg","complexSimp","ac","bd","bc","ad","cd","r1","r2","i1","i2","realpart","imagpart","trigSimp","containsFunction","sym_array","tr","fnTransform","simplify","fracSimp","n1","n2","ratSimp","sqrtSimp","isSQRT","trial","simp","patternSub","patterns","has_CP","found","collect","getU","simplified","Classes","Expression","useAlgebraDiv","divideFn","calls","ans","useParserDiv","register","name","visible","numargs","updateAPI","LOG","ABS","SQRT","SIN","COS","TAN","SEC","CSC","COT","ASIN","ACOS","ATAN","ASEC","ACSC","ACOT","SINH","COSH","TANH","CSCH","SECH","COTH","ASECH","ACSCH","ACOTH","NoIntegralFound","message","hasIntegral","double_angle","transformed","hasTrig","in_trig","in_inverse_trig","toCommonDenominator","denominator","numerator","in_htrig","jacobian","eqns","arrayGetVariables","eq","gt","cMatrix","all_functions","cosAsinBtransform","cosAsinBtranform","cosAsinAtransform","cosAsinAtranform","sinAsinBtransform","trigTransform","integration_depth","max_lim_depth","index","start","isNumericSymbol","modifier","product","nth","vector","isMatrix","matrix","sp","derive","polydiff","product_rule","qdiff","x_","y_","LOG10","altVal","integration","u_substitution","try_combo","do_fn_sub","Q","g1","g2","poly_integrate","dc","decompose_arg","xp","dc2","new_val","by_parts","integrated","A","B","f1","f2","warn","partial_fraction","opt","partial_fractions","get_udv","parts","setSymbol","dv","part","trig_sub","du","integral","clearU","udv","vdu","uv","integral_vdu","vdu_s","previous","stripVar","isE","is_cyclic","original_symbol","dt","decomp","ax","b_is_positive","unwrapAbs","C","D","E","F","L1","sqrt_ax","sqa","sqb","aob","bsqi","was_factored","fx","sq","u_du","ag","decomposed","a_","b_","rd","rd2","na","parse_str","cfsymbol","unwrapped","sym1","sym2","fn1","fn2","arg1","arg2","new_sym","p1_even","p2_even","trans","bx","sym1_is_linear","pd","min","pc","f_is_linear","p2","dummy","bksub","u_transform","expanded","U","scope","U2","cosn","X","sym2_clone","sa","sb","nq","syma","symb","first","intg","DivisionByZero","defint","from","to","get_value","point","Limit","limit","num_integrate","upper","lower","interval","diverges","lim","gin","lim_sign","isInfinity","fm","gm","L","lim1","lim2","indeterminate","ft","t_symbol","den_is_zero","infinity","rewriteToLog","getSubbed","isInterval","isConvergent","_num","_den","isOne","symbol_","lim_base","lim_pow","evaluates","s_arg","pi","divergent","FACTORIAL","_lim","_symbols","fns","Fresnel","Laplace_integration_depth","findFunction","Extra","LaPlace","transform","depth_is_lower","integration_expr","inverse","s_","input_symbol","den_p","finalize","fact","factorial","completed","tf","new_num","a_has_sin","b_has_cos","a_has_cos","b_has_sin","s_terms","fc","Statistics","frequencyMap","xi","mean","median","mid","mode","freq","gVariance","variance","sampleVariance","standardDeviation","sampleStandardDeviation","zScore","stdev","Units","table","foot","meter","decimeter","_A","_C","explode","knownVariable","range","Equation","lhs","rhs","NerdamerValueError","LHS","RHS","SOLVE_RADIUS","ROOTS_PER_SIDE","make_pi_conversions","STEP_SIZE","EPSILON","MAX_NEWTON_ITERATIONS","MAX_NON_LINEAR_TRIES","NON_LINEAR_JUMP_AT","NON_LINEAR_JUMP_SIZE","NON_LINEAR_START","NEWTON_SLICES","NEWTON_EPSILON","SOLUTION_PROXIMITY","FILTER_SOLUTIONS","MAX_SOLVE_DEPTH","ZERO_EPSILON","MAX_BISECTION_ITER","BI_SECTION_EPSILON","hasNegativeTerms","option","toLHS","eqn","removeDenom","_t","newRHS","latex","functions","solveFor","_solve","setEq","checkAll","test","Solve","solutions","solve","solution","es","solveCircle","svars","arraySum","_ref3","y_points","x_points","SOLUTIONS_AS_OBJECT","solveNonLinearSystem","tries","max_tries","halfway","iters","xn1","norm","lnorm","jump_at","jump","create_subs","get","max_iter","f_eqns","J","systemSolutions","expand_result","callback","valueOf","solveSystemBySubstitution","arrayEqual","solveSystem","var_array","sol","reduced","knowns","all_zero","setVar","err","tparts","determinant","SolveError","discriminant","cubic","d_o","c_o","b_o","a_o","quartic","D0","D1","divideAndConquer","solve_for","sols","csolve","pn","pf","toPolarFormArray","getPoints","step","points","last","last_sign","rside","lside","left","right","test_side","side","num_roots","hits","isFinite","bisection","epsilon","middle","x_point","Newton","fp","maxiter","iter","x0","fx0","rewrite","sqrts","sqrtSolve","existing","known","add_to_result","has_trig","r_is_symbol","PRE_ADD_SOLUTION","PI","r_str","numvars","cfact","fractionals","correct_denom","original","expand_denominator","expand_functions","is_sqrt","min_p","corrected","inverseFunctionSolve","fkeys","getCoeffs","was_calculated","points1","points2","points3","t_points","console","expr_str","rw","neq","zero","parent","isConstructor","tryToString","$TypeError","TypeError","argument","charAt","unicode","fails","constructor","getPrototypeOf","isObject","classof","MATCH","wellKnownSymbol","it","isRegExp","IteratorPrototype","createPropertyDescriptor","setToStringTag","Iterators","returnThis","IteratorConstructor","NAME","ENUMERABLE_NEXT","TO_STRING_TAG","PrototypeOfArrayIteratorPrototype","arrayIterator","isCallable","defineBuiltIn","IS_PURE","ITERATOR","BUGGY_SAFARI_ITERATORS","toObject","sharedKey","CORRECT_PROTOTYPE_GETTER","IE_PROTO","$Object","ObjectPrototype","O","object","anObject","regexpExec","R","exec","re1","re2","uncurryThis","regexpFlags","stickyHelpers","shared","getInternalState","UNSUPPORTED_DOT_ALL","UNSUPPORTED_NCG","nativeReplace","nativeExec","RegExp","patchedExec","stringSlice","UPDATES_LAST_INDEX_WRONG","lastIndex","UNSUPPORTED_Y","BROKEN_CARET","NPCG_INCLUDED","string","reCopy","match","re","state","sticky","flags","source","charsAdded","strCopy","multiline","global","that","hasIndices","ignoreCase","dotAll","unicodeSets","isPrototypeOf","regExpFlags","RegExpPrototype","$RegExp","MISSED_STICKY","defineProperty","target","TAG","STATIC","configurable","aConstructor","isNullOrUndefined","SPECIES","defaultConstructor","toIntegerOrInfinity","requireObjectCoercible","charCodeAt","createMethod","CONVERT_TO_STRING","$this","pos","second","position","codeAt","$String","$","createIteratorConstructor","createIterResultObject","toLength","getRegExpFlags","getMethod","speciesConstructor","advanceStringIndex","regExpExec","InternalStateModule","MATCH_ALL","REGEXP_STRING","REGEXP_STRING_ITERATOR","setInternalState","getterFor","stringIndexOf","nativeMatchAll","matchAll","WORKS_WITH_NON_GLOBAL_REGEX","$RegExpStringIterator","regexp","$global","fullUnicode","type","$matchAll","matcher","proto","forced","rx","className","style","fontSize","children","_defineProperties","props","descriptor","enumerable","writable","_defineProperty","ownKeys","enumerableOnly","getOwnPropertySymbols","getOwnPropertyDescriptor","_getPrototypeOf","setPrototypeOf","__proto__","_setPrototypeOf","_isNativeReflectConstruct","Reflect","construct","sham","Proxy","Date","_construct","Parent","Class","instance","bind","_wrapNativeSuper","_cache","Map","has","Wrapper","_assertThisInitialized","self","ReferenceError","_possibleConstructorReturn","ParserError","_Error","subClass","superClass","_inherits","Derived","hasNativeReflectConstruct","Constructor","protoProps","staticProps","_super","Super","NewTarget","_this","_classCallCheck","equation","getOwnPropertyDescriptors","defineProperties","_objectSpread2","errorType","operatorMap","isWhitespace","isCharNumber","isCharName","isValidNumber","endOfPattern","pattern","throwUnknownType","typed","getMessage","precedence","unaryOperatorMap","rightAssociativeOperators","parseListExpression","tokens","startAt","subexpression","parseSubexpression","terminator","operators","getTokenType","getTokenPosition","addOperator","operator","unaryType","prepareResult","token","_parseListExpression","current","_parseListExpression2","_results","_last","lengthExpected","lengthReceived","_parseListExpression3","_results2","_last2","_parseSubexpression","_last3","child","other","tokenPrecedence","otherPrecedence","lastType","substring","_end","character","tokenize","getParserError","_slicedToArray","_arrayWithHoles","iterator","_arr","_n","_d","_e","_s","_i","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","_toConsumableArray","_arrayLikeToArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","minLen","arr2","ResolverError","errorNode","checkArgs","node","minArgs","maxArgs","getUnit","units","getUnitless","isSameUnit","isEmptyUnit","combineUnits","mapper","mapUnit","_Object$entries","entries","_Object$entries$_i","_key","_value","newValue","_i2","_Object$entries2","_Object$entries2$_i","_key2","valueWrap","mapMatrix","row","castValue","cell","aTree","bTree","handleCases","aDimensions","bDimensions","rowIdx","cellIdx","multiplyVectors","unit1","unit2","aRow","bCol","innerCell","colIdx","matrixProduct","scalarProduct","aLength","bLength","vectorProduct","factor1","factor2","numberNumber","numberMatrix","matrixNumber","matrixMatrix","resolveNode","options","parseFloat","resolveVariable","minus","multiplyImplicit","multiplyDot","multiplyCross","resolveFunction","unit","unitlessValue","createNumberFunction","func","validate","resolvedArgs","nonNumber","findIndex","numberArgs","tan","asin","acos","atan","atan2","precision","Infinity","unitWrap","kg","mol","bit","_extends","assign","styles","main","display","fontStyle","indexFactor","_name$split","_name$split2","indices","marginLeft","aboveMiddle","belowMiddle","indexName","top","Parens","height","_ref$type","_ref$flip","flip","width","verticalAlign","viewBox","pathBuilders","offsetHeight","argParts","simplePart","paddingRight","nameRendering","renderInternal","argRendering","toRendering","separatorSize","styles$1","wrapper","fontFactor","textAlign","padding","separator","background","borderTop","styles$2","exponent","fontFactor$1","styles$3","borderCollapse","fontFactor$2","marginTop","cellContent","maxOf","array","styles$4","icon","lineHeight","small","fontFactor$3","tree","_ref$args","expression","bottom","rendering","canStandAlone","iconSize","styles$5","borderLeft","RootSymbol","commands","morphSvg","pathCommands","topOffsetFactor","elbowFactor","valueIdx","styles$6","content","styles$7","indexOuter","indexInner","rootIndexFactor","defaultErrorHandler","render","_ref$errorHandler","errorHandler","baseProps","color","_renderInternal","_elements","_height","_renderInternal2","skipParentheses","_len","initial","_step","_iterator","allowArrayLike","_e2","normalCompletion","didErr","_e3","return","_createForOfIteratorHelper","binaryOperatorLookup","unaryOperatorLookup","_unaryOperatorLookup$","_unaryOperatorLookup$2","_binaryOperatorLookup","_binaryOperatorLookup2","_style","baseOffset","rootIndex","rootIndexContent","sqrtContent","offset","marginRight","minWidth","pushFunction","rowHeight","context","createContext","useEquationOptions","useContext","memo","forwardRef","ref","_useEquationOptions","errorHandlerGlobal","classNameGlobal","styleGlobal","useImperativeHandle","valid","useState","knownVars","setKnownVars","setError","varToSolveFor","setVarToSolveFor","regexMatches","onSubmit","event","preventDefault","numUnknowns","newKnowns","variablesWeDontKnow","paddingBottom","fontWeight","for","id","Link"],"sourceRoot":""}